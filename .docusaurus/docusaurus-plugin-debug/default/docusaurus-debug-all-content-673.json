{
  "docusaurus-plugin-content-docs": {
    "default": {
      "loadedVersions": [
        {
          "versionName": "current",
          "versionLabel": "Next",
          "versionPath": "/docs/next",
          "tagsPath": "/docs/next/tags",
          "versionEditUrl": "https://github.com/facebook/docusaurus/edit/main/website/docs",
          "versionEditUrlLocalized": "https://github.com/facebook/docusaurus/edit/main/website/i18n/en/docusaurus-plugin-content-docs/current",
          "versionBanner": "unreleased",
          "versionBadge": true,
          "versionClassName": "docs-version-current",
          "isLast": false,
          "sidebarFilePath": "/Users/justincptung/Documents/Works/tpe/tpe-web-site/docusaurus-tpe/sidebars.json",
          "contentPath": "/Users/justincptung/Documents/Works/tpe/tpe-web-site/docusaurus-tpe/docs",
          "contentPathLocalized": "/Users/justincptung/Documents/Works/tpe/tpe-web-site/docusaurus-tpe/i18n/en/docusaurus-plugin-content-docs/current",
          "mainDocId": "intro/what-is-TPE",
          "sidebars": {
            "docs": [
              {
                "type": "category",
                "collapsed": true,
                "collapsible": true,
                "label": "Introduction",
                "items": [
                  {
                    "type": "doc",
                    "id": "intro/what-is-TPE"
                  },
                  {
                    "type": "doc",
                    "id": "intro/what-is-TPP"
                  }
                ]
              },
              {
                "type": "category",
                "collapsed": true,
                "collapsible": true,
                "label": "Get Started",
                "items": [
                  {
                    "type": "doc",
                    "id": "get-started/installation"
                  },
                  {
                    "type": "doc",
                    "id": "get-started/initial_configuration"
                  }
                ]
              }
            ]
          },
          "docs": [
            {
              "unversionedId": "get-started/initial_configuration",
              "id": "get-started/initial_configuration",
              "isDocsHomePage": false,
              "title": "Device Configuration",
              "description": "To get ThingsPro Edge up and running with the default settings, do the following:",
              "source": "@site/docs/get-started/initial_configuration.md",
              "sourceDirName": "get-started",
              "slug": "/get-started/initial_configuration",
              "permalink": "/docs/next/get-started/initial_configuration",
              "editUrl": "https://github.com/facebook/docusaurus/edit/main/website/docs/get-started/initial_configuration.md",
              "tags": [],
              "version": "current",
              "frontMatter": {},
              "sidebar": "docs",
              "previous": {
                "title": "Installation",
                "permalink": "/docs/next/get-started/installation"
              }
            },
            {
              "unversionedId": "get-started/installation",
              "id": "get-started/installation",
              "isDocsHomePage": false,
              "title": "Installation",
              "description": "Install ThingsPro Edge from the installer",
              "source": "@site/docs/get-started/installation.md",
              "sourceDirName": "get-started",
              "slug": "/get-started/installation",
              "permalink": "/docs/next/get-started/installation",
              "editUrl": "https://github.com/facebook/docusaurus/edit/main/website/docs/get-started/installation.md",
              "tags": [],
              "version": "current",
              "frontMatter": {},
              "sidebar": "docs",
              "previous": {
                "title": "What Is ThingsPro Proxy?",
                "permalink": "/docs/next/intro/what-is-TPP"
              },
              "next": {
                "title": "Device Configuration",
                "permalink": "/docs/next/get-started/initial_configuration"
              }
            },
            {
              "unversionedId": "intro/what-is-TPE",
              "id": "intro/what-is-TPE",
              "isDocsHomePage": false,
              "title": "What Is ThingsPro Edge V2.2.1?",
              "description": "ThingsPro Edge is an IIoT edge gateway software that runs on Moxa IIoT Gateways (Moxa's industrial-grade edge computers) enabling you to close the gap between sensors and cloud applications. The containerized software architecture of ThingsPro Edge brings an extensible runtime experience with secure and reliable life-cycle management to functional modules.",
              "source": "@site/docs/intro/what-is-TPE.md",
              "sourceDirName": "intro",
              "slug": "/intro/what-is-TPE",
              "permalink": "/docs/next/intro/what-is-TPE",
              "editUrl": "https://github.com/facebook/docusaurus/edit/main/website/docs/intro/what-is-TPE.md",
              "tags": [],
              "version": "current",
              "frontMatter": {},
              "sidebar": "docs",
              "next": {
                "title": "What Is ThingsPro Proxy?",
                "permalink": "/docs/next/intro/what-is-TPP"
              }
            },
            {
              "unversionedId": "intro/what-is-TPP",
              "id": "intro/what-is-TPP",
              "isDocsHomePage": false,
              "title": "What Is ThingsPro Proxy?",
              "description": "A new Moxa IIoT gateway must be configured correctly before it can be deployed in the field. Moxa's ThingsPro Proxy utility helps you provision new devices in a secure and scalable manner.",
              "source": "@site/docs/intro/what-is-TPP.md",
              "sourceDirName": "intro",
              "slug": "/intro/what-is-TPP",
              "permalink": "/docs/next/intro/what-is-TPP",
              "editUrl": "https://github.com/facebook/docusaurus/edit/main/website/docs/intro/what-is-TPP.md",
              "tags": [],
              "version": "current",
              "frontMatter": {},
              "sidebar": "docs",
              "previous": {
                "title": "What Is ThingsPro Edge V2.2.1?",
                "permalink": "/docs/next/intro/what-is-TPE"
              },
              "next": {
                "title": "Installation",
                "permalink": "/docs/next/get-started/installation"
              }
            }
          ]
        },
        {
          "versionName": "2.2.0",
          "versionLabel": "2.2.0",
          "versionPath": "/docs",
          "tagsPath": "/docs/tags",
          "versionEditUrl": "https://github.com/facebook/docusaurus/edit/main/website/versioned_docs/version-2.2.0",
          "versionEditUrlLocalized": "https://github.com/facebook/docusaurus/edit/main/website/i18n/en/docusaurus-plugin-content-docs/version-2.2.0",
          "versionBanner": null,
          "versionBadge": true,
          "versionClassName": "docs-version-2.2.0",
          "isLast": true,
          "routePriority": -1,
          "sidebarFilePath": "/Users/justincptung/Documents/Works/tpe/tpe-web-site/docusaurus-tpe/versioned_sidebars/version-2.2.0-sidebars.json",
          "contentPath": "/Users/justincptung/Documents/Works/tpe/tpe-web-site/docusaurus-tpe/versioned_docs/version-2.2.0",
          "contentPathLocalized": "/Users/justincptung/Documents/Works/tpe/tpe-web-site/docusaurus-tpe/i18n/en/docusaurus-plugin-content-docs/version-2.2.0",
          "mainDocId": "intro/what-is-TPE",
          "sidebars": {
            "version-2.2.0/docs": [
              {
                "type": "category",
                "label": "Introduction",
                "items": [
                  {
                    "type": "doc",
                    "id": "version-2.2.0/intro/what-is-TPE"
                  },
                  {
                    "type": "doc",
                    "id": "version-2.2.0/intro/what-is-TPP"
                  }
                ],
                "collapsible": true,
                "collapsed": true
              }
            ]
          },
          "docs": [
            {
              "unversionedId": "get-started/initial_configuration",
              "id": "version-2.2.0/get-started/initial_configuration",
              "isDocsHomePage": false,
              "title": "Device Configuration",
              "description": "To get ThingsPro Edge up and running with the default settings, do the following:",
              "source": "@site/versioned_docs/version-2.2.0/get-started/initial_configuration.md",
              "sourceDirName": "get-started",
              "slug": "/get-started/initial_configuration",
              "permalink": "/docs/get-started/initial_configuration",
              "editUrl": "https://github.com/facebook/docusaurus/edit/main/website/versioned_docs/version-2.2.0/get-started/initial_configuration.md",
              "tags": [],
              "version": "2.2.0",
              "frontMatter": {}
            },
            {
              "unversionedId": "get-started/installation",
              "id": "version-2.2.0/get-started/installation",
              "isDocsHomePage": false,
              "title": "Installation",
              "description": "Install ThingsPro Edge from the installer",
              "source": "@site/versioned_docs/version-2.2.0/get-started/installation.md",
              "sourceDirName": "get-started",
              "slug": "/get-started/installation",
              "permalink": "/docs/get-started/installation",
              "editUrl": "https://github.com/facebook/docusaurus/edit/main/website/versioned_docs/version-2.2.0/get-started/installation.md",
              "tags": [],
              "version": "2.2.0",
              "frontMatter": {}
            },
            {
              "unversionedId": "intro/what-is-TPE",
              "id": "version-2.2.0/intro/what-is-TPE",
              "isDocsHomePage": false,
              "title": "What Is ThingsPro Edge V2.2.0?",
              "description": "ThingsPro Edge is an IIoT edge gateway software that runs on Moxa IIoT Gateways (Moxa's industrial-grade edge computers) enabling you to close the gap between sensors and cloud applications. The containerized software architecture of ThingsPro Edge brings an extensible runtime experience with secure and reliable life-cycle management to functional modules.",
              "source": "@site/versioned_docs/version-2.2.0/intro/what-is-TPE.md",
              "sourceDirName": "intro",
              "slug": "/intro/what-is-TPE",
              "permalink": "/docs/intro/what-is-TPE",
              "editUrl": "https://github.com/facebook/docusaurus/edit/main/website/versioned_docs/version-2.2.0/intro/what-is-TPE.md",
              "tags": [],
              "version": "2.2.0",
              "frontMatter": {},
              "sidebar": "version-2.2.0/docs",
              "next": {
                "title": "What Is ThingsPro Proxy?",
                "permalink": "/docs/intro/what-is-TPP"
              }
            },
            {
              "unversionedId": "intro/what-is-TPP",
              "id": "version-2.2.0/intro/what-is-TPP",
              "isDocsHomePage": false,
              "title": "What Is ThingsPro Proxy?",
              "description": "A new Moxa IIoT gateway must be configured correctly before it can be deployed in the field. Moxa's ThingsPro Proxy utility helps you provision new devices in a secure and scalable manner.",
              "source": "@site/versioned_docs/version-2.2.0/intro/what-is-TPP.md",
              "sourceDirName": "intro",
              "slug": "/intro/what-is-TPP",
              "permalink": "/docs/intro/what-is-TPP",
              "editUrl": "https://github.com/facebook/docusaurus/edit/main/website/versioned_docs/version-2.2.0/intro/what-is-TPP.md",
              "tags": [],
              "version": "2.2.0",
              "frontMatter": {},
              "sidebar": "version-2.2.0/docs",
              "previous": {
                "title": "What Is ThingsPro Edge V2.2.0?",
                "permalink": "/docs/intro/what-is-TPE"
              }
            }
          ]
        },
        {
          "versionName": "2.1.0",
          "versionLabel": "2.1.0",
          "versionPath": "/docs/2.1.0",
          "tagsPath": "/docs/2.1.0/tags",
          "versionEditUrl": "https://github.com/facebook/docusaurus/edit/main/website/versioned_docs/version-2.1.0",
          "versionEditUrlLocalized": "https://github.com/facebook/docusaurus/edit/main/website/i18n/en/docusaurus-plugin-content-docs/version-2.1.0",
          "versionBanner": "unmaintained",
          "versionBadge": true,
          "versionClassName": "docs-version-2.1.0",
          "isLast": false,
          "sidebarFilePath": "/Users/justincptung/Documents/Works/tpe/tpe-web-site/docusaurus-tpe/versioned_sidebars/version-2.1.0-sidebars.json",
          "contentPath": "/Users/justincptung/Documents/Works/tpe/tpe-web-site/docusaurus-tpe/versioned_docs/version-2.1.0",
          "contentPathLocalized": "/Users/justincptung/Documents/Works/tpe/tpe-web-site/docusaurus-tpe/i18n/en/docusaurus-plugin-content-docs/version-2.1.0",
          "mainDocId": "intro/what-is-TPE",
          "sidebars": {
            "version-2.1.0/docs": [
              {
                "type": "category",
                "label": "Introduction",
                "items": [
                  {
                    "type": "doc",
                    "id": "version-2.1.0/intro/what-is-TPE"
                  },
                  {
                    "type": "doc",
                    "id": "version-2.1.0/intro/what-is-TPP"
                  }
                ],
                "collapsible": true,
                "collapsed": true
              }
            ]
          },
          "docs": [
            {
              "unversionedId": "get-started/initial_configuration",
              "id": "version-2.1.0/get-started/initial_configuration",
              "isDocsHomePage": false,
              "title": "Device Configuration",
              "description": "To get ThingsPro Edge up and running with the default settings, do the following:",
              "source": "@site/versioned_docs/version-2.1.0/get-started/initial_configuration.md",
              "sourceDirName": "get-started",
              "slug": "/get-started/initial_configuration",
              "permalink": "/docs/2.1.0/get-started/initial_configuration",
              "editUrl": "https://github.com/facebook/docusaurus/edit/main/website/versioned_docs/version-2.1.0/get-started/initial_configuration.md",
              "tags": [],
              "version": "2.1.0",
              "frontMatter": {}
            },
            {
              "unversionedId": "get-started/installation",
              "id": "version-2.1.0/get-started/installation",
              "isDocsHomePage": false,
              "title": "Installation",
              "description": "Install ThingsPro Edge from the installer",
              "source": "@site/versioned_docs/version-2.1.0/get-started/installation.md",
              "sourceDirName": "get-started",
              "slug": "/get-started/installation",
              "permalink": "/docs/2.1.0/get-started/installation",
              "editUrl": "https://github.com/facebook/docusaurus/edit/main/website/versioned_docs/version-2.1.0/get-started/installation.md",
              "tags": [],
              "version": "2.1.0",
              "frontMatter": {}
            },
            {
              "unversionedId": "intro/what-is-TPE",
              "id": "version-2.1.0/intro/what-is-TPE",
              "isDocsHomePage": false,
              "title": "What Is ThingsPro Edge V2.1.0?",
              "description": "ThingsPro Edge is an IIoT edge gateway software that runs on Moxa IIoT Gateways (Moxa's industrial-grade edge computers) enabling you to close the gap between sensors and cloud applications. The containerized software architecture of ThingsPro Edge brings an extensible runtime experience with secure and reliable life-cycle management to functional modules.",
              "source": "@site/versioned_docs/version-2.1.0/intro/what-is-TPE.md",
              "sourceDirName": "intro",
              "slug": "/intro/what-is-TPE",
              "permalink": "/docs/2.1.0/intro/what-is-TPE",
              "editUrl": "https://github.com/facebook/docusaurus/edit/main/website/versioned_docs/version-2.1.0/intro/what-is-TPE.md",
              "tags": [],
              "version": "2.1.0",
              "frontMatter": {},
              "sidebar": "version-2.1.0/docs",
              "next": {
                "title": "What Is ThingsPro Proxy?",
                "permalink": "/docs/2.1.0/intro/what-is-TPP"
              }
            },
            {
              "unversionedId": "intro/what-is-TPP",
              "id": "version-2.1.0/intro/what-is-TPP",
              "isDocsHomePage": false,
              "title": "What Is ThingsPro Proxy?",
              "description": "A new Moxa IIoT gateway must be configured correctly before it can be deployed in the field. Moxa's ThingsPro Proxy utility helps you provision new devices in a secure and scalable manner.",
              "source": "@site/versioned_docs/version-2.1.0/intro/what-is-TPP.md",
              "sourceDirName": "intro",
              "slug": "/intro/what-is-TPP",
              "permalink": "/docs/2.1.0/intro/what-is-TPP",
              "editUrl": "https://github.com/facebook/docusaurus/edit/main/website/versioned_docs/version-2.1.0/intro/what-is-TPP.md",
              "tags": [],
              "version": "2.1.0",
              "frontMatter": {},
              "sidebar": "version-2.1.0/docs",
              "previous": {
                "title": "What Is ThingsPro Edge V2.1.0?",
                "permalink": "/docs/2.1.0/intro/what-is-TPE"
              }
            }
          ]
        }
      ]
    }
  },
  "docusaurus-plugin-content-blog": {
    "default": {
      "blogSidebarTitle": "Recent posts",
      "blogPosts": [
        {
          "id": "welcome",
          "metadata": {
            "permalink": "/blog/welcome",
            "editUrl": "https://github.com/facebook/docusaurus/edit/main/website/blog/blog/2021-08-26-welcome/index.md",
            "source": "@site/blog/2021-08-26-welcome/index.md",
            "title": "Welcome",
            "description": "Docusaurus blogging features are powered by the blog plugin.",
            "date": "2021-08-26T00:00:00.000Z",
            "formattedDate": "August 26, 2021",
            "tags": [
              {
                "label": "facebook",
                "permalink": "/blog/tags/facebook"
              },
              {
                "label": "hello",
                "permalink": "/blog/tags/hello"
              },
              {
                "label": "docusaurus",
                "permalink": "/blog/tags/docusaurus"
              }
            ],
            "readingTime": 0.405,
            "truncated": false,
            "authors": [
              {
                "name": "Sébastien Lorber",
                "title": "Docusaurus maintainer",
                "url": "https://sebastienlorber.com",
                "imageURL": "https://github.com/slorber.png",
                "key": "slorber"
              },
              {
                "name": "Yangshun Tay",
                "title": "Front End Engineer @ Facebook",
                "url": "https://github.com/yangshun",
                "imageURL": "https://github.com/yangshun.png",
                "key": "yangshun"
              }
            ],
            "nextItem": {
              "title": "MDX Blog Post",
              "permalink": "/blog/mdx-blog-post"
            }
          }
        },
        {
          "id": "mdx-blog-post",
          "metadata": {
            "permalink": "/blog/mdx-blog-post",
            "editUrl": "https://github.com/facebook/docusaurus/edit/main/website/blog/blog/2021-08-01-mdx-blog-post.mdx",
            "source": "@site/blog/2021-08-01-mdx-blog-post.mdx",
            "title": "MDX Blog Post",
            "description": "Blog posts support Docusaurus Markdown features, such as MDX.",
            "date": "2021-08-01T00:00:00.000Z",
            "formattedDate": "August 1, 2021",
            "tags": [
              {
                "label": "docusaurus",
                "permalink": "/blog/tags/docusaurus"
              }
            ],
            "readingTime": 0.175,
            "truncated": false,
            "authors": [
              {
                "name": "Sébastien Lorber",
                "title": "Docusaurus maintainer",
                "url": "https://sebastienlorber.com",
                "imageURL": "https://github.com/slorber.png",
                "key": "slorber"
              }
            ],
            "prevItem": {
              "title": "Welcome",
              "permalink": "/blog/welcome"
            },
            "nextItem": {
              "title": "Long Blog Post",
              "permalink": "/blog/long-blog-post"
            }
          }
        },
        {
          "id": "long-blog-post",
          "metadata": {
            "permalink": "/blog/long-blog-post",
            "editUrl": "https://github.com/facebook/docusaurus/edit/main/website/blog/blog/2019-05-29-long-blog-post.md",
            "source": "@site/blog/2019-05-29-long-blog-post.md",
            "title": "Long Blog Post",
            "description": "This is the summary of a very long blog post,",
            "date": "2019-05-29T00:00:00.000Z",
            "formattedDate": "May 29, 2019",
            "tags": [
              {
                "label": "hello",
                "permalink": "/blog/tags/hello"
              },
              {
                "label": "docusaurus",
                "permalink": "/blog/tags/docusaurus"
              }
            ],
            "readingTime": 2.05,
            "truncated": true,
            "authors": [
              {
                "name": "Endilie Yacop Sucipto",
                "title": "Maintainer of Docusaurus",
                "url": "https://github.com/endiliey",
                "imageURL": "https://github.com/endiliey.png",
                "key": "endi"
              }
            ],
            "prevItem": {
              "title": "MDX Blog Post",
              "permalink": "/blog/mdx-blog-post"
            },
            "nextItem": {
              "title": "First Blog Post",
              "permalink": "/blog/first-blog-post"
            }
          }
        },
        {
          "id": "first-blog-post",
          "metadata": {
            "permalink": "/blog/first-blog-post",
            "editUrl": "https://github.com/facebook/docusaurus/edit/main/website/blog/blog/2019-05-28-first-blog-post.md",
            "source": "@site/blog/2019-05-28-first-blog-post.md",
            "title": "First Blog Post",
            "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet",
            "date": "2019-05-28T00:00:00.000Z",
            "formattedDate": "May 28, 2019",
            "tags": [
              {
                "label": "hola",
                "permalink": "/blog/tags/hola"
              },
              {
                "label": "docusaurus",
                "permalink": "/blog/tags/docusaurus"
              }
            ],
            "readingTime": 0.12,
            "truncated": false,
            "authors": [
              {
                "name": "Gao Wei",
                "title": "Docusaurus Core Team",
                "url": "https://github.com/wgao19",
                "image_url": "https://github.com/wgao19.png",
                "imageURL": "https://github.com/wgao19.png"
              }
            ],
            "prevItem": {
              "title": "Long Blog Post",
              "permalink": "/blog/long-blog-post"
            }
          }
        }
      ],
      "blogListPaginated": [
        {
          "metadata": {
            "permalink": "/blog",
            "page": 1,
            "postsPerPage": 10,
            "totalPages": 1,
            "totalCount": 4,
            "previousPage": null,
            "nextPage": null,
            "blogDescription": "Blog",
            "blogTitle": "Blog"
          },
          "items": [
            "welcome",
            "mdx-blog-post",
            "long-blog-post",
            "first-blog-post"
          ]
        }
      ],
      "blogTags": {
        "/blog/tags/facebook": {
          "name": "facebook",
          "items": [
            "welcome"
          ],
          "permalink": "/blog/tags/facebook"
        },
        "/blog/tags/hello": {
          "name": "hello",
          "items": [
            "welcome",
            "long-blog-post"
          ],
          "permalink": "/blog/tags/hello"
        },
        "/blog/tags/docusaurus": {
          "name": "docusaurus",
          "items": [
            "welcome",
            "mdx-blog-post",
            "long-blog-post",
            "first-blog-post"
          ],
          "permalink": "/blog/tags/docusaurus"
        },
        "/blog/tags/hola": {
          "name": "hola",
          "items": [
            "first-blog-post"
          ],
          "permalink": "/blog/tags/hola"
        }
      },
      "blogTagsListPath": "/blog/tags"
    }
  },
  "docusaurus-plugin-content-pages": {
    "default": [
      {
        "type": "jsx",
        "permalink": "/",
        "source": "@site/src/pages/index.js"
      },
      {
        "type": "mdx",
        "permalink": "/markdown-page",
        "source": "@site/src/pages/markdown-page.md"
      },
      {
        "type": "mdx",
        "permalink": "/release-notes",
        "source": "@site/src/pages/release-notes.md"
      }
    ]
  },
  "docusaurus-plugin-debug": {
    "default": null
  },
  "docusaurus-plugin-redoc": {
    "plugin-redoc-0": {
      "components": {
        "responses": {
          "Success": {
            "description": "success"
          }
        },
        "schemas": {
          "Permission": {
            "properties": {
              "description": {
                "description": "Description of permission.",
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "name": {
                "description": "Name of permission.",
                "type": "string"
              }
            }
          },
          "Role": {
            "properties": {
              "description": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "permissions": {
                "items": {
                  "$ref": "#/components/schemas/Permission"
                },
                "type": "array"
              },
              "users": {
                "items": {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "User": {
            "properties": {
              "changedPasswordAt": {
                "format": "date-time",
                "type": "string"
              },
              "createdAt": {
                "format": "date-time",
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "expiredAfter": {
                "format": "date-time",
                "type": "string"
              },
              "id": {
                "type": "integer"
              },
              "isActive": {
                "type": "boolean"
              },
              "loginAt": {
                "format": "date-time",
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "permissions": {
                "items": {
                  "description": "ID of permission",
                  "type": "string"
                }
              },
              "roles": {
                "items": {
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "Users": {
            "items": {
              "properties": {
                "changedPasswordAt": {
                  "format": "date-time",
                  "type": "string"
                },
                "createdAt": {
                  "format": "date-time",
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "expiredAfter": {
                  "format": "date-time",
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "isActive": {
                  "type": "boolean"
                },
                "loginAt": {
                  "format": "date-time",
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "permissions": {
                  "items": {
                    "description": "ID of permission",
                    "type": "string"
                  }
                },
                "roles": {
                  "items": {
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "type": "array"
          },
          "requestResource": {
            "properties": {
              "id": {
                "description": "Resource ID",
                "type": "integer"
              },
              "value": {
                "description": "Resource allocation argument",
                "type": "object"
              }
            }
          },
          "resource": {
            "properties": {
              "allocations": {
                "items": {
                  "properties": {
                    "app": {
                      "description": "App name of the allocated resource",
                      "type": "string"
                    },
                    "value": {
                      "description": "Properties of the allocated resource",
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "displayName": {
                "description": "Resource Name",
                "readOnly": true,
                "type": "string"
              },
              "exclusive": {
                "readOnly": true,
                "type": "boolean"
              },
              "id": {
                "description": "Resource ID\n* 1: CPU shares\n* 2: CPU core\n* 3: memory\n* 4: forward port\n* 5: filter port\n",
                "enum": [
                  1,
                  2,
                  3,
                  4,
                  5
                ],
                "readOnly": true,
                "type": "integer"
              },
              "type": {
                "description": "Resource type",
                "readOnly": true,
                "type": "string"
              }
            }
          },
          "resourceList": {
            "properties": {
              "count": {
                "description": "Array length.",
                "type": "integer"
              },
              "data": {
                "items": {
                  "$ref": "#/components/schemas/resource"
                },
                "type": "array"
              }
            },
            "title": "All current allocated resources"
          }
        },
        "securitySchemes": {
          "bearerAuth": {
            "bearerFormat": "JWT",
            "scheme": "bearer",
            "type": "http"
          }
        }
      },
      "info": {
        "title": "Core",
        "version": "2.2.0"
      },
      "openapi": "3.0.0",
      "paths": {
        "/apps": {
          "get": {
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "count": 5,
                      "data": [
                        {
                          "arch": "armhf",
                          "attributes": [
                            "started",
                            "installed"
                          ],
                          "availableVersions": [],
                          "category": "device",
                          "description": "MOXA hardware service",
                          "desiredState": "ready",
                          "displayName": "Device",
                          "hardwares": [],
                          "health": "wait",
                          "icon": "/app-icons/device.png",
                          "id": "device",
                          "imageSize": 86970368,
                          "license": {
                            "paid": false,
                            "type": "propetual"
                          },
                          "menuID": "app-device",
                          "name": "device",
                          "state": "starting",
                          "version": "1.0.0-284-uc-8112a-me"
                        },
                        {
                          "arch": "armhf",
                          "attributes": [
                            "started",
                            "installed"
                          ],
                          "availableVersions": [],
                          "category": "cloud",
                          "description": "Azure IoT Edge",
                          "desiredState": "ready",
                          "displayName": "Azure IoT Edge",
                          "hardwares": [],
                          "health": "wait",
                          "icon": "",
                          "id": "aie",
                          "imageSize": 71293440,
                          "license": {
                            "paid": true,
                            "type": "free"
                          },
                          "menuID": "app-aie",
                          "name": "aie",
                          "state": "starting",
                          "version": "0.3.1-52"
                        },
                        {
                          "arch": "armhf",
                          "attributes": [
                            "openInSameTab"
                          ],
                          "availableVersions": [],
                          "category": "protocol",
                          "description": "MOXA Modbus TCP Client (Master)",
                          "desiredState": "ready",
                          "displayName": "Modbus TCP Client (Master)",
                          "hardwares": [],
                          "health": "wait",
                          "icon": "/app-icons/modbusmaster-tcp.png",
                          "id": "modbusmaster-tcp",
                          "imageSize": 61130240,
                          "license": {
                            "paid": true,
                            "type": "free"
                          },
                          "menuID": "app-modbusmaster-tcp",
                          "name": "modbusmaster-tcp",
                          "state": "starting",
                          "version": "3.14.0-278"
                        },
                        {
                          "arch": "armhf",
                          "attributes": [
                            "installed",
                            "started",
                            "hide"
                          ],
                          "availableVersions": [],
                          "category": "intelligence",
                          "description": "ThingsPro frontend web application\n",
                          "desiredState": "ready",
                          "displayName": "ThingsPro Edge Web",
                          "hardwares": [],
                          "health": "good",
                          "icon": "",
                          "id": "edge-web",
                          "imageSize": 0,
                          "license": {
                            "paid": true,
                            "type": "free"
                          },
                          "menuID": "app-edge-web",
                          "name": "edge-web",
                          "state": "ready",
                          "version": "0.28.0-322"
                        },
                        {
                          "arch": "armhf",
                          "attributes": [
                            "installed",
                            "started",
                            "openInSameTab"
                          ],
                          "availableVersions": [],
                          "category": "intelligence",
                          "description": "ThingsPro Tag Framework Core\n",
                          "desiredState": "ready",
                          "displayName": "Tag Service",
                          "hardwares": [],
                          "health": "running",
                          "icon": "",
                          "id": "tagservice",
                          "imageSize": 84914688,
                          "license": {
                            "paid": true,
                            "type": "free"
                          },
                          "menuID": "app-tagservice",
                          "name": "tagservice",
                          "state": "starting",
                          "version": "1.5.0-168"
                        }
                      ]
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "arch": {
                                "enum": [
                                  "armhf",
                                  "amd64"
                                ],
                                "type": "string"
                              },
                              "attributes": {
                                "items": {
                                  "enum": [
                                    "started",
                                    "installed",
                                    "hide",
                                    "openInNewTab",
                                    "openInSameTab"
                                  ],
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "availableVersions": {
                                "description": "version can be installed from MPKG site(source)",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "description": {
                                "type": "string"
                              },
                              "displayName": {
                                "type": "string"
                              },
                              "error": {
                                "description": "this field is appear if error happened",
                                "type": "string"
                              },
                              "hardware": {
                                "description": "hardware required for this APP",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "health": {
                                "enum": [
                                  "wait",
                                  "good",
                                  "running",
                                  "error"
                                ],
                                "type": "string"
                              },
                              "icon": {
                                "description": "URL of the icon",
                                "type": "string"
                              },
                              "id": {
                                "description": "internal and unique APP name",
                                "type": "string"
                              },
                              "imageSize": {
                                "type": "integer"
                              },
                              "license": {
                                "properties": {
                                  "paid": {
                                    "type": "boolean"
                                  },
                                  "type": {
                                    "description": "type of license",
                                    "enum": [
                                      "propetual",
                                      "free"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "menuID": {
                                "description": "ID of menu",
                                "type": "string"
                              },
                              "name": {
                                "description": "internal and unique APP name",
                                "type": "string"
                              },
                              "progress": {
                                "description": "this field is appear if progress is available",
                                "properties": {
                                  "currentTask": {
                                    "description": "current running subtask number starting from 1",
                                    "type": "integer"
                                  },
                                  "message": {
                                    "type": "string"
                                  },
                                  "percentage": {
                                    "description": "current subtask finish percentage from 0 to 100",
                                    "type": "integer"
                                  },
                                  "totalTask": {
                                    "description": "total subtask",
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "state": {
                                "enum": [
                                  "init",
                                  "uninstalled",
                                  "installing",
                                  "stopped",
                                  "starting",
                                  "ready",
                                  "restarting",
                                  "stopping",
                                  "uninstalling",
                                  "recovering"
                                ],
                                "type": "string"
                              },
                              "version": {
                                "type": "string"
                              }
                            }
                          },
                          "type": "array"
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Return all APPs",
            "tags": [
              "apps"
            ]
          }
        },
        "/apps/{appname}": {
          "get": {
            "parameters": [
              {
                "description": "name of APP",
                "in": "path",
                "name": "appname",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "arch": "armhf",
                        "attributes": [
                          "installed",
                          "started",
                          "openInSameTab"
                        ],
                        "availableVersions": [],
                        "category": "intelligence",
                        "description": "ThingsPro Tag Framework Core\n",
                        "desiredState": "ready",
                        "displayName": "Tag Service",
                        "hardwares": [],
                        "health": "good",
                        "icon": "",
                        "id": "tagservice",
                        "imageSize": 84914688,
                        "license": {
                          "paid": true,
                          "type": "free"
                        },
                        "name": "tagservice",
                        "state": "ready",
                        "version": "1.5.0-168"
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "arch": {
                              "enum": [
                                "armhf",
                                "amd64"
                              ],
                              "type": "string"
                            },
                            "attributes": {
                              "items": {
                                "enum": [
                                  "started",
                                  "installed",
                                  "hide",
                                  "openInNewTab",
                                  "openInSameTab"
                                ],
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "availableVersions": {
                              "description": "version can be installed from MPKG site(source)",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "description": {
                              "type": "string"
                            },
                            "displayName": {
                              "type": "string"
                            },
                            "error": {
                              "description": "this field is appear if error happened",
                              "type": "string"
                            },
                            "hardware": {
                              "description": "hardware required for this APP",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "health": {
                              "enum": [
                                "wait",
                                "good",
                                "running",
                                "error"
                              ],
                              "type": "string"
                            },
                            "icon": {
                              "description": "URL of the icon",
                              "type": "string"
                            },
                            "id": {
                              "description": "internal and unique APP name",
                              "type": "string"
                            },
                            "imageSize": {
                              "type": "integer"
                            },
                            "license": {
                              "properties": {
                                "paid": {
                                  "type": "boolean"
                                },
                                "type": {
                                  "description": "type of license",
                                  "enum": [
                                    "propetual",
                                    "free"
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "menuID": {
                              "description": "ID of menu",
                              "type": "string"
                            },
                            "name": {
                              "description": "internal and unique APP name",
                              "type": "string"
                            },
                            "progress": {
                              "description": "this field is appear if progress is available",
                              "properties": {
                                "currentTask": {
                                  "description": "current running subtask number starting from 1",
                                  "type": "integer"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "percentage": {
                                  "description": "current subtask finish percentage from 0 to 100",
                                  "type": "integer"
                                },
                                "totalTask": {
                                  "description": "total subtask",
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "state": {
                              "enum": [
                                "init",
                                "uninstalled",
                                "installing",
                                "stopped",
                                "starting",
                                "ready",
                                "restarting",
                                "stopping",
                                "uninstalling",
                                "recovering"
                              ],
                              "type": "string"
                            },
                            "version": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Find APP by name",
            "tags": [
              "apps"
            ]
          }
        },
        "/apps/{appname}/{action}": {
          "put": {
            "parameters": [
              {
                "description": "name of APP",
                "in": "path",
                "name": "appname",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "in": "path",
                "name": "action",
                "required": true,
                "schema": {
                  "enum": [
                    "start",
                    "stop",
                    "install",
                    "uninstall",
                    "restart"
                  ],
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "arch": "armhf",
                        "attributes": [
                          "installed",
                          "started",
                          "openInSameTab"
                        ],
                        "availableVersions": [],
                        "category": "intelligence",
                        "description": "ThingsPro Tag Framework Core\n",
                        "desiredState": "ready",
                        "displayName": "Tag Service",
                        "hardwares": [],
                        "health": "good",
                        "icon": "",
                        "id": "tagservice",
                        "imageSize": 84914688,
                        "license": {
                          "paid": true,
                          "type": "free"
                        },
                        "name": "tagservice",
                        "state": "ready",
                        "version": "1.5.0-168"
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "arch": {
                              "enum": [
                                "armhf",
                                "amd64"
                              ],
                              "type": "string"
                            },
                            "attributes": {
                              "items": {
                                "enum": [
                                  "started",
                                  "installed",
                                  "hide",
                                  "openInNewTab",
                                  "openInSameTab"
                                ],
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "availableVersions": {
                              "description": "version can be installed from MPKG site(source)",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "description": {
                              "type": "string"
                            },
                            "displayName": {
                              "type": "string"
                            },
                            "error": {
                              "description": "this field is appear if error happened",
                              "type": "string"
                            },
                            "hardware": {
                              "description": "hardware required for this APP",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "health": {
                              "enum": [
                                "wait",
                                "good",
                                "running",
                                "error"
                              ],
                              "type": "string"
                            },
                            "icon": {
                              "description": "URL of the icon",
                              "type": "string"
                            },
                            "id": {
                              "description": "internal and unique APP name",
                              "type": "string"
                            },
                            "imageSize": {
                              "type": "integer"
                            },
                            "license": {
                              "properties": {
                                "paid": {
                                  "type": "boolean"
                                },
                                "type": {
                                  "description": "type of license",
                                  "enum": [
                                    "propetual",
                                    "free"
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "menuID": {
                              "description": "ID of menu",
                              "type": "string"
                            },
                            "name": {
                              "description": "internal and unique APP name",
                              "type": "string"
                            },
                            "progress": {
                              "description": "this field is appear if progress is available",
                              "properties": {
                                "currentTask": {
                                  "description": "current running subtask number starting from 1",
                                  "type": "integer"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "percentage": {
                                  "description": "current subtask finish percentage from 0 to 100",
                                  "type": "integer"
                                },
                                "totalTask": {
                                  "description": "total subtask",
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "state": {
                              "enum": [
                                "init",
                                "uninstalled",
                                "installing",
                                "stopped",
                                "starting",
                                "ready",
                                "restarting",
                                "stopping",
                                "uninstalling",
                                "recovering"
                              ],
                              "type": "string"
                            },
                            "version": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Operate an APP",
            "tags": [
              "apps"
            ]
          }
        },
        "/auth": {
          "get": {
            "description": "This API returns wether authentication token in header is valid by HTTP status code",
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": "ok"
                    }
                  }
                },
                "description": "success"
              },
              "401": {
                "description": "unauthorized"
              }
            },
            "summary": "Get authentication status",
            "tags": [
              "authentication"
            ]
          },
          "post": {
            "requestBody": {
              "content": {
                "application/json": {
                  "example": {
                    "acceptEULA": true,
                    "name": "admin",
                    "password": "moxa1234"
                  },
                  "schema": {
                    "properties": {
                      "acceptEULA": {
                        "type": "boolean"
                      },
                      "name": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "password"
                    ],
                    "type": "object"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwicm9sZSI6InRlc3QiLCJpYXQiOjE1NjM0MjA5MTQsImV4cCI6NDcxNzAyMDkxNH0.7oGA1VHBingnzeG7hHgWEiZ4JmoserFguyeb7_GUK6E",
                        "user": {
                          "changedPasswordAt": null,
                          "email": null,
                          "expiredAfter": null,
                          "id": 1,
                          "isActive": true,
                          "loginAt": "0001-01-01T00:00:00Z",
                          "name": "admin",
                          "permissions": [
                            "SYS_MAINTENANCE_RW",
                            "SYS_USER_RW"
                          ],
                          "roles": [
                            {
                              "id": 1,
                              "name": "Administrator"
                            }
                          ]
                        }
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "token": {
                              "type": "string"
                            },
                            "user": {
                              "$ref": "#/components/schemas/User"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              },
              "401": {
                "content": {
                  "application/json": {
                    "examples": {
                      "unauth": {
                        "summary": "unauthorized",
                        "value": {
                          "error": {
                            "code": 401,
                            "message": "The account or password you entered is not correct. (Your account will be temporarily locked if excessive tried)"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "unauthorized"
              }
            },
            "security": [],
            "summary": "Sign in",
            "tags": [
              "authentication"
            ]
          }
        },
        "/auth/websocket-token": {
          "put": {
            "description": "The token one-shot authentication for websocket only and valid in 30 seconds",
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJJRCI6MSwiUm9sZUlEIjoxLCJleHAiOjE1NjM2MTIxNjJ9.CaKmYYCyFXvWXZN0ZXO7dNk_9tBlhNaB9LIMX4bCujY"
                      }
                    }
                  }
                },
                "description": "success"
              },
              "401": {
                "description": "unauthorized"
              }
            },
            "summary": "Get websocket token",
            "tags": [
              "authentication"
            ]
          }
        },
        "/events": {
          "delete": {
            "responses": {
              "204": {
                "description": "success"
              }
            },
            "summary": "Clear event logs",
            "tags": [
              "event"
            ]
          },
          "get": {
            "parameters": [
              {
                "description": "Limit the number of result (default:100).",
                "in": "query",
                "name": "limit",
                "schema": {
                  "type": "integer"
                }
              },
              {
                "description": "Log starting from the offset (default:0).",
                "in": "query",
                "name": "offset",
                "schema": {
                  "type": "integer"
                }
              },
              {
                "description": "Order by key (default:time).",
                "in": "query",
                "name": "order",
                "schema": {
                  "enum": [
                    "time",
                    "category",
                    "eventName"
                  ],
                  "type": "string"
                }
              },
              {
                "description": "sorting (default:desc).",
                "in": "query",
                "name": "sort",
                "schema": {
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "type": "string"
                }
              },
              {
                "description": "Match by category which keywords seperated by comma(,)",
                "in": "query",
                "name": "categories",
                "schema": {
                  "type": "string"
                }
              },
              {
                "description": "Matcy by event name which keywords seperated by comma(,)",
                "in": "query",
                "name": "eventNames",
                "schema": {
                  "type": "string"
                }
              },
              {
                "description": "Filter out by severity which keywords seperated by comma(,)",
                "in": "query",
                "name": "severities",
                "schema": {
                  "type": "string"
                }
              },
              {
                "description": "Get the specified service of logs.",
                "in": "query",
                "name": "origins",
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              {
                "description": "Enable server-sent event (Value is always true if having this field).",
                "in": "query",
                "name": "event",
                "schema": {
                  "type": "boolean"
                }
              },
              {
                "description": "Download event as zip file (Value is always true if having this field).",
                "in": "query",
                "name": "download",
                "schema": {
                  "type": "boolean"
                }
              }
            ],
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "count": 2,
                      "data": [
                        {
                          "category": "system",
                          "createdAt": "2020-02-25T00:08:54.97510268+08:00",
                          "event": "software installation completed",
                          "id": 20340,
                          "message": "aaaaaaaaaaa bbbbbbbbbb ccccccccccc",
                          "origin": "system",
                          "severity": "info",
                          "user": "admin",
                          "userOrigin": "10.144.49.123"
                        },
                        {
                          "category": "system",
                          "createdAt": "2020-02-25T00:08:54.92855576+08:00",
                          "event": "software installation completed",
                          "id": 20339,
                          "message": "aaaaaaaaaaa bbbbbbbbbb ccccccccccc",
                          "origin": "system",
                          "severity": "info",
                          "user": "admin",
                          "userOrigin": "10.144.49.123"
                        }
                      ],
                      "limit": 2,
                      "offset": 0,
                      "total": 14154
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "category": {
                              "description": "Event category",
                              "type": "string"
                            },
                            "createdAt": {
                              "description": "Event time in RFC3339 format (default:now).",
                              "type": "string"
                            },
                            "event": {
                              "description": "Event message",
                              "type": "string"
                            },
                            "message": {
                              "description": "Event message in detail",
                              "type": "string"
                            },
                            "origin": {
                              "description": "Which service/APP publish the event",
                              "type": "string"
                            },
                            "severity": {
                              "description": "Event severity (default:info).",
                              "enum": [
                                "alert",
                                "warning",
                                "info"
                              ],
                              "type": "string"
                            },
                            "user": {
                              "description": "Username who trigger the event",
                              "type": "string"
                            },
                            "userOrigin": {
                              "description": "User comes from. It's normally an IP address.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "application/zip": {
                    "schema": {
                      "format": "binary",
                      "type": "string"
                    }
                  },
                  "text/event-stream": {
                    "example": ": connected\n\nid:137\nevent:message\ndata:{\"id\":137,\"severity\":\"info\",\"origin\":\"system\",\"event\":\"App Start\",\"category\":\"system\",\"message\":\"Application started: Cloud Application\",\"createdAt\":\"2020-02-12T01:09:06.60498948+08:00\",\"user\":\"\"}\n\nid:136\nevent:message\ndata:{\"id\":136,\"severity\":\"warning\",\"origin\":\"system\",\"event\":\"App Stop\",\"category\":\"system\",\"message\":\"Application stopped: Cloud Application\",\"createdAt\":\"2020-02-12T01:08:50.2650116+08:00\",\"user\":\"\"}\n"
                  }
                },
                "description": "success"
              }
            },
            "summary": "Get events",
            "tags": [
              "event"
            ]
          },
          "post": {
            "requestBody": {
              "content": {
                "application/json": {
                  "example": {
                    "category": "system",
                    "event": "software installation completed",
                    "message": "Installation completed. Job id: 1, software name: update-123",
                    "origin": "system",
                    "severity": "info"
                  },
                  "schema": {
                    "properties": {
                      "category": {
                        "description": "Event category",
                        "type": "string"
                      },
                      "createdAt": {
                        "description": "Event time in RFC3339 format (default:now).",
                        "type": "string"
                      },
                      "event": {
                        "description": "Event message",
                        "type": "string"
                      },
                      "message": {
                        "description": "Event message in detail",
                        "type": "string"
                      },
                      "origin": {
                        "description": "Which service/APP publish the event",
                        "type": "string"
                      },
                      "severity": {
                        "description": "Event severity (default:info).",
                        "enum": [
                          "alert",
                          "warning",
                          "info"
                        ],
                        "type": "string"
                      },
                      "user": {
                        "description": "Username who trigger the event",
                        "type": "string"
                      },
                      "userOrigin": {
                        "description": "User comes from. It's normally an IP address.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "origin",
                      "event",
                      "category"
                    ]
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": "ok"
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Create log",
            "tags": [
              "event"
            ]
          }
        },
        "/events/configuration": {
          "get": {
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "desiredDiskCacheSizeMB": 2,
                        "disks": [
                          {
                            "device": "/dev/root",
                            "free": 1347792896,
                            "mount": "/",
                            "name": "System",
                            "percent": 75.34374779889012,
                            "protect": 838860800,
                            "tags": {
                              "free": "systemDiskFree",
                              "percent": "systemDiskPercent",
                              "used": "systemDiskUsed"
                            },
                            "total": 5731123200,
                            "used": 4118540288
                          },
                          {
                            "device": "/dev/mmcblk0p1",
                            "free": 7636680704,
                            "mount": "/media/sd-mmcblk0p1",
                            "name": "SD1-1",
                            "percent": 4.071308614330875,
                            "protect": 0,
                            "tags": {
                              "free": "systemDiskFree",
                              "percent": "systemDiskPercent",
                              "used": "systemDiskUsed"
                            },
                            "total": 7960788992,
                            "used": 324108288
                          }
                        ],
                        "enable": true,
                        "enableTimeToLiveSec": true,
                        "reachThresholdPolicy": "rotate",
                        "targetDiskName": "System",
                        "timeToLiveSec": 86400
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "desiredDiskCacheSizeMB": {
                              "type": "string"
                            },
                            "enable": {
                              "type": "boolean"
                            },
                            "enableTimeToLiveSec": {
                              "type": "boolean"
                            },
                            "reachThresholdPolicy": {
                              "description": "default to rotate",
                              "enum": [
                                "rotate",
                                "stop"
                              ],
                              "type": "string"
                            },
                            "timeToLiveSec": {
                              "description": "unlimit if value <= 0",
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Get configuration of events",
            "tags": [
              "event"
            ]
          },
          "put": {
            "requestBody": {
              "content": {
                "application/json": {
                  "example": {
                    "desiredDiskCacheSizeMB": 2,
                    "enable": true,
                    "enableTimeToLiveSec": true,
                    "reachThresholdPolicy": "rotate",
                    "targetDiskName": "System",
                    "timeToLiveSec": 86400
                  },
                  "schema": {
                    "properties": {
                      "desiredDiskCacheSizeMB": {
                        "type": "string"
                      },
                      "enable": {
                        "type": "boolean"
                      },
                      "enableTimeToLiveSec": {
                        "type": "boolean"
                      },
                      "reachThresholdPolicy": {
                        "description": "default to rotate",
                        "enum": [
                          "rotate",
                          "stop"
                        ],
                        "type": "string"
                      },
                      "timeToLiveSec": {
                        "description": "unlimit if value <= 0",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "desiredDiskCacheSizeMB": 2,
                        "disks": [
                          {
                            "device": "/dev/root",
                            "free": 1347792896,
                            "mount": "/",
                            "name": "System",
                            "percent": 75.34374779889012,
                            "protect": 838860800,
                            "tags": {
                              "free": "systemDiskFree",
                              "percent": "systemDiskPercent",
                              "used": "systemDiskUsed"
                            },
                            "total": 5731123200,
                            "used": 4118540288
                          },
                          {
                            "device": "/dev/mmcblk0p1",
                            "free": 7636680704,
                            "mount": "/media/sd-mmcblk0p1",
                            "name": "SD1-1",
                            "percent": 4.071308614330875,
                            "protect": 0,
                            "tags": {
                              "free": "systemDiskFree",
                              "percent": "systemDiskPercent",
                              "used": "systemDiskUsed"
                            },
                            "total": 7960788992,
                            "used": 324108288
                          }
                        ],
                        "enable": true,
                        "enableTimeToLiveSec": true,
                        "reachThresholdPolicy": "rotate",
                        "targetDiskName": "System",
                        "timeToLiveSec": 86400
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "desiredDiskCacheSizeMB": {
                              "type": "string"
                            },
                            "enable": {
                              "type": "boolean"
                            },
                            "enableTimeToLiveSec": {
                              "type": "boolean"
                            },
                            "reachThresholdPolicy": {
                              "description": "default to rotate",
                              "enum": [
                                "rotate",
                                "stop"
                              ],
                              "type": "string"
                            },
                            "timeToLiveSec": {
                              "description": "unlimit if value <= 0",
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Set event configuration",
            "tags": [
              "event"
            ]
          }
        },
        "/events/profile": {
          "get": {
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "categories": [
                          "azure",
                          "device setting",
                          "modbus",
                          "mqtt",
                          "network",
                          "store-forward",
                          "system"
                        ],
                        "eventNames": [
                          "app crash",
                          "app start",
                          "app stop",
                          "buffer active",
                          "buffer clean",
                          "buffer full",
                          "buffer inactive",
                          "buffer sending",
                          "cellular no signal",
                          "cellular signal good",
                          "cellular signal low",
                          "configuration update failed",
                          "configuration update success",
                          "device connect",
                          "device connect fail",
                          "device connected",
                          "device connection fail",
                          "device disconnect",
                          "device reboot",
                          "device send properties fail",
                          "device send telemetry fail",
                          "edge connected",
                          "edge disconnected",
                          "edge send properties fail",
                          "edge send telemetry fail",
                          "function failed",
                          "function recover",
                          "master device conncted",
                          "master device disconnected",
                          "memory usage > 90%",
                          "ota download cancel",
                          "ota download completed",
                          "ota download failed",
                          "ota download resume",
                          "ota download suspend",
                          "slave device connected",
                          "slave device failed",
                          "software installation completed",
                          "software installation failed",
                          "system load 5 min > 1",
                          "system load 5 min > 3",
                          "system storage usage > 90%",
                          "system storage usage > 95%",
                          "time sync failed",
                          "time sync success",
                          "upgrade roll back completed",
                          "uplink change",
                          "user login fail",
                          "wrong function called"
                        ],
                        "events": [
                          {
                            "category": "device setting",
                            "enable": true,
                            "event": "configuration update failed",
                            "id": 1,
                            "severity": "alert"
                          },
                          {
                            "category": "device setting",
                            "enable": false,
                            "event": "configuration update success",
                            "id": 2,
                            "severity": "info"
                          },
                          {
                            "category": "network",
                            "enable": true,
                            "event": "uplink change",
                            "id": 3,
                            "severity": "warning"
                          },
                          {
                            "category": "device setting",
                            "enable": true,
                            "event": "time sync failed",
                            "id": 4,
                            "severity": "warning"
                          },
                          {
                            "category": "device setting",
                            "enable": false,
                            "event": "time sync success",
                            "id": 5,
                            "severity": "info"
                          },
                          {
                            "category": "network",
                            "enable": true,
                            "event": "cellular no signal",
                            "id": 6,
                            "severity": "alert"
                          },
                          {
                            "category": "network",
                            "enable": true,
                            "event": "cellular signal low",
                            "id": 7,
                            "severity": "warning"
                          },
                          {
                            "category": "network",
                            "enable": false,
                            "event": "cellular signal good",
                            "id": 8,
                            "severity": "info"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "system storage usage > 90%",
                            "id": 9,
                            "severity": "warning"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "system storage usage > 95%",
                            "id": 10,
                            "severity": "alert"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "system load 5 min > 1",
                            "id": 11,
                            "severity": "warning"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "system load 5 min > 3",
                            "id": 12,
                            "severity": "alert"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "memory usage > 90%",
                            "id": 13,
                            "severity": "warning"
                          },
                          {
                            "category": "azure",
                            "enable": false,
                            "event": "edge connected",
                            "id": 14,
                            "severity": "info"
                          },
                          {
                            "category": "azure",
                            "enable": true,
                            "event": "edge disconnected",
                            "id": 15,
                            "severity": "warning"
                          },
                          {
                            "category": "azure",
                            "enable": true,
                            "event": "edge send properties fail",
                            "id": 16,
                            "severity": "alert"
                          },
                          {
                            "category": "azure",
                            "enable": true,
                            "event": "edge send telemetry fail",
                            "id": 17,
                            "severity": "alert"
                          },
                          {
                            "category": "azure",
                            "enable": false,
                            "event": "device connected",
                            "id": 18,
                            "severity": "info"
                          },
                          {
                            "category": "azure",
                            "enable": true,
                            "event": "device disconnect",
                            "id": 19,
                            "severity": "warning"
                          },
                          {
                            "category": "azure",
                            "enable": true,
                            "event": "device connection fail",
                            "id": 20,
                            "severity": "alert"
                          },
                          {
                            "category": "azure",
                            "enable": true,
                            "event": "device send properties fail",
                            "id": 21,
                            "severity": "alert"
                          },
                          {
                            "category": "azure",
                            "enable": true,
                            "event": "device send telemetry fail",
                            "id": 22,
                            "severity": "alert"
                          },
                          {
                            "category": "store-forward",
                            "enable": true,
                            "event": "buffer active",
                            "id": 23,
                            "severity": "warning"
                          },
                          {
                            "category": "store-forward",
                            "enable": false,
                            "event": "buffer inactive",
                            "id": 24,
                            "severity": "info"
                          },
                          {
                            "category": "store-forward",
                            "enable": false,
                            "event": "buffer sending",
                            "id": 25,
                            "severity": "info"
                          },
                          {
                            "category": "store-forward",
                            "enable": false,
                            "event": "buffer clean",
                            "id": 26,
                            "severity": "info"
                          },
                          {
                            "category": "store-forward",
                            "enable": true,
                            "event": "buffer full",
                            "id": 27,
                            "severity": "alert"
                          },
                          {
                            "category": "mqtt",
                            "enable": false,
                            "event": "device connect",
                            "id": 28,
                            "severity": "info"
                          },
                          {
                            "category": "mqtt",
                            "enable": true,
                            "event": "device disconnect",
                            "id": 29,
                            "severity": "warning"
                          },
                          {
                            "category": "mqtt",
                            "enable": true,
                            "event": "device connect fail",
                            "id": 30,
                            "severity": "alert"
                          },
                          {
                            "category": "mqtt",
                            "enable": true,
                            "event": "device send telemetry fail",
                            "id": 31,
                            "severity": "alert"
                          },
                          {
                            "category": "modbus",
                            "enable": true,
                            "event": "configuration update success",
                            "id": 37,
                            "severity": "warning"
                          },
                          {
                            "category": "modbus",
                            "enable": true,
                            "event": "configuration update failed",
                            "id": 38,
                            "severity": "warning"
                          },
                          {
                            "category": "modbus",
                            "enable": false,
                            "event": "slave device connected",
                            "id": 39,
                            "severity": "info"
                          },
                          {
                            "category": "modbus",
                            "enable": true,
                            "event": "slave device failed",
                            "id": 40,
                            "severity": "alert"
                          },
                          {
                            "category": "modbus",
                            "enable": false,
                            "event": "function recover",
                            "id": 41,
                            "severity": "info"
                          },
                          {
                            "category": "modbus",
                            "enable": true,
                            "event": "function failed",
                            "id": 42,
                            "severity": "warning"
                          },
                          {
                            "category": "modbus",
                            "enable": true,
                            "event": "master device conncted",
                            "id": 45,
                            "severity": "warning"
                          },
                          {
                            "category": "modbus",
                            "enable": true,
                            "event": "master device disconnected",
                            "id": 46,
                            "severity": "warning"
                          },
                          {
                            "category": "modbus",
                            "enable": true,
                            "event": "wrong function called",
                            "id": 47,
                            "severity": "alert"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "device reboot",
                            "id": 48,
                            "severity": "warning"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "user login fail",
                            "id": 49,
                            "severity": "warning"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "app stop",
                            "id": 50,
                            "severity": "warning"
                          },
                          {
                            "category": "system",
                            "enable": false,
                            "event": "app start",
                            "id": 51,
                            "severity": "info"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "app crash",
                            "id": 52,
                            "severity": "alert"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "ota download failed",
                            "id": 53,
                            "severity": "alert"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "ota download suspend",
                            "id": 54,
                            "severity": "warning"
                          },
                          {
                            "category": "system",
                            "enable": false,
                            "event": "ota download resume",
                            "id": 55,
                            "severity": "info"
                          },
                          {
                            "category": "system",
                            "enable": false,
                            "event": "ota download completed",
                            "id": 56,
                            "severity": "info"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "ota download cancel",
                            "id": 57,
                            "severity": "warning"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "software installation failed",
                            "id": 58,
                            "severity": "alert"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "upgrade roll back completed",
                            "id": 59,
                            "severity": "warning"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "software installation completed",
                            "id": 60,
                            "severity": "info"
                          }
                        ],
                        "origins": [
                          "AID App",
                          "AIE App",
                          "Device App",
                          "MQTT Client",
                          "Modbus",
                          "system"
                        ],
                        "severities": [
                          "info",
                          "warning",
                          "alert"
                        ]
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Event profile",
            "tags": [
              "event"
            ]
          },
          "patch": {
            "requestBody": {
              "content": {
                "application/json": {
                  "examples": {
                    "byid": {
                      "summary": "update by ID",
                      "value": {
                        "events": [
                          {
                            "enable": true,
                            "id": 60
                          }
                        ]
                      }
                    },
                    "byname": {
                      "summary": "update by name and category",
                      "value": {
                        "events": [
                          {
                            "category": "system",
                            "enable": true,
                            "event": "software installation completed"
                          }
                        ]
                      }
                    }
                  },
                  "schema": {}
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "categories": [
                          "azure",
                          "device setting",
                          "modbus",
                          "mqtt",
                          "network",
                          "store-forward",
                          "system"
                        ],
                        "eventNames": [
                          "app crash",
                          "app start",
                          "app stop",
                          "buffer active",
                          "buffer clean",
                          "buffer full",
                          "buffer inactive",
                          "buffer sending",
                          "cellular no signal",
                          "cellular signal good",
                          "cellular signal low",
                          "configuration update failed",
                          "configuration update success",
                          "device connect",
                          "device connect fail",
                          "device connected",
                          "device connection fail",
                          "device disconnect",
                          "device reboot",
                          "device send properties fail",
                          "device send telemetry fail",
                          "edge connected",
                          "edge disconnected",
                          "edge send properties fail",
                          "edge send telemetry fail",
                          "function failed",
                          "function recover",
                          "master device conncted",
                          "master device disconnected",
                          "memory usage > 90%",
                          "ota download cancel",
                          "ota download completed",
                          "ota download failed",
                          "ota download resume",
                          "ota download suspend",
                          "slave device connected",
                          "slave device failed",
                          "software installation completed",
                          "software installation failed",
                          "system load 5 min > 1",
                          "system load 5 min > 3",
                          "system storage usage > 90%",
                          "system storage usage > 95%",
                          "time sync failed",
                          "time sync success",
                          "upgrade roll back completed",
                          "uplink change",
                          "user login fail",
                          "wrong function called"
                        ],
                        "events": [
                          {
                            "category": "device setting",
                            "enable": true,
                            "event": "configuration update failed",
                            "id": 1,
                            "severity": "alert"
                          },
                          {
                            "category": "device setting",
                            "enable": false,
                            "event": "configuration update success",
                            "id": 2,
                            "severity": "info"
                          },
                          {
                            "category": "network",
                            "enable": true,
                            "event": "uplink change",
                            "id": 3,
                            "severity": "warning"
                          },
                          {
                            "category": "device setting",
                            "enable": true,
                            "event": "time sync failed",
                            "id": 4,
                            "severity": "warning"
                          },
                          {
                            "category": "device setting",
                            "enable": false,
                            "event": "time sync success",
                            "id": 5,
                            "severity": "info"
                          },
                          {
                            "category": "network",
                            "enable": true,
                            "event": "cellular no signal",
                            "id": 6,
                            "severity": "alert"
                          },
                          {
                            "category": "network",
                            "enable": true,
                            "event": "cellular signal low",
                            "id": 7,
                            "severity": "warning"
                          },
                          {
                            "category": "network",
                            "enable": false,
                            "event": "cellular signal good",
                            "id": 8,
                            "severity": "info"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "system storage usage > 90%",
                            "id": 9,
                            "severity": "warning"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "system storage usage > 95%",
                            "id": 10,
                            "severity": "alert"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "system load 5 min > 1",
                            "id": 11,
                            "severity": "warning"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "system load 5 min > 3",
                            "id": 12,
                            "severity": "alert"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "memory usage > 90%",
                            "id": 13,
                            "severity": "warning"
                          },
                          {
                            "category": "azure",
                            "enable": false,
                            "event": "edge connected",
                            "id": 14,
                            "severity": "info"
                          },
                          {
                            "category": "azure",
                            "enable": true,
                            "event": "edge disconnected",
                            "id": 15,
                            "severity": "warning"
                          },
                          {
                            "category": "azure",
                            "enable": true,
                            "event": "edge send properties fail",
                            "id": 16,
                            "severity": "alert"
                          },
                          {
                            "category": "azure",
                            "enable": true,
                            "event": "edge send telemetry fail",
                            "id": 17,
                            "severity": "alert"
                          },
                          {
                            "category": "azure",
                            "enable": false,
                            "event": "device connected",
                            "id": 18,
                            "severity": "info"
                          },
                          {
                            "category": "azure",
                            "enable": true,
                            "event": "device disconnect",
                            "id": 19,
                            "severity": "warning"
                          },
                          {
                            "category": "azure",
                            "enable": true,
                            "event": "device connection fail",
                            "id": 20,
                            "severity": "alert"
                          },
                          {
                            "category": "azure",
                            "enable": true,
                            "event": "device send properties fail",
                            "id": 21,
                            "severity": "alert"
                          },
                          {
                            "category": "azure",
                            "enable": true,
                            "event": "device send telemetry fail",
                            "id": 22,
                            "severity": "alert"
                          },
                          {
                            "category": "store-forward",
                            "enable": true,
                            "event": "buffer active",
                            "id": 23,
                            "severity": "warning"
                          },
                          {
                            "category": "store-forward",
                            "enable": false,
                            "event": "buffer inactive",
                            "id": 24,
                            "severity": "info"
                          },
                          {
                            "category": "store-forward",
                            "enable": false,
                            "event": "buffer sending",
                            "id": 25,
                            "severity": "info"
                          },
                          {
                            "category": "store-forward",
                            "enable": false,
                            "event": "buffer clean",
                            "id": 26,
                            "severity": "info"
                          },
                          {
                            "category": "store-forward",
                            "enable": true,
                            "event": "buffer full",
                            "id": 27,
                            "severity": "alert"
                          },
                          {
                            "category": "mqtt",
                            "enable": false,
                            "event": "device connect",
                            "id": 28,
                            "severity": "info"
                          },
                          {
                            "category": "mqtt",
                            "enable": true,
                            "event": "device disconnect",
                            "id": 29,
                            "severity": "warning"
                          },
                          {
                            "category": "mqtt",
                            "enable": true,
                            "event": "device connect fail",
                            "id": 30,
                            "severity": "alert"
                          },
                          {
                            "category": "mqtt",
                            "enable": true,
                            "event": "device send telemetry fail",
                            "id": 31,
                            "severity": "alert"
                          },
                          {
                            "category": "modbus",
                            "enable": true,
                            "event": "configuration update success",
                            "id": 37,
                            "severity": "warning"
                          },
                          {
                            "category": "modbus",
                            "enable": true,
                            "event": "configuration update failed",
                            "id": 38,
                            "severity": "warning"
                          },
                          {
                            "category": "modbus",
                            "enable": false,
                            "event": "slave device connected",
                            "id": 39,
                            "severity": "info"
                          },
                          {
                            "category": "modbus",
                            "enable": true,
                            "event": "slave device failed",
                            "id": 40,
                            "severity": "alert"
                          },
                          {
                            "category": "modbus",
                            "enable": false,
                            "event": "function recover",
                            "id": 41,
                            "severity": "info"
                          },
                          {
                            "category": "modbus",
                            "enable": true,
                            "event": "function failed",
                            "id": 42,
                            "severity": "warning"
                          },
                          {
                            "category": "modbus",
                            "enable": true,
                            "event": "master device conncted",
                            "id": 45,
                            "severity": "warning"
                          },
                          {
                            "category": "modbus",
                            "enable": true,
                            "event": "master device disconnected",
                            "id": 46,
                            "severity": "warning"
                          },
                          {
                            "category": "modbus",
                            "enable": true,
                            "event": "wrong function called",
                            "id": 47,
                            "severity": "alert"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "device reboot",
                            "id": 48,
                            "severity": "warning"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "user login fail",
                            "id": 49,
                            "severity": "warning"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "app stop",
                            "id": 50,
                            "severity": "warning"
                          },
                          {
                            "category": "system",
                            "enable": false,
                            "event": "app start",
                            "id": 51,
                            "severity": "info"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "app crash",
                            "id": 52,
                            "severity": "alert"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "ota download failed",
                            "id": 53,
                            "severity": "alert"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "ota download suspend",
                            "id": 54,
                            "severity": "warning"
                          },
                          {
                            "category": "system",
                            "enable": false,
                            "event": "ota download resume",
                            "id": 55,
                            "severity": "info"
                          },
                          {
                            "category": "system",
                            "enable": false,
                            "event": "ota download completed",
                            "id": 56,
                            "severity": "info"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "ota download cancel",
                            "id": 57,
                            "severity": "warning"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "software installation failed",
                            "id": 58,
                            "severity": "alert"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "upgrade roll back completed",
                            "id": 59,
                            "severity": "warning"
                          },
                          {
                            "category": "system",
                            "enable": true,
                            "event": "software installation completed",
                            "id": 60,
                            "severity": "info"
                          }
                        ],
                        "origins": [
                          "AID App",
                          "AIE App",
                          "Device App",
                          "MQTT Client",
                          "Modbus",
                          "system"
                        ],
                        "severities": [
                          "info",
                          "warning",
                          "alert"
                        ]
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Switch event enablement",
            "tags": [
              "event"
            ]
          }
        },
        "/jobs": {
          "get": {
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "count": 1,
                      "data": [
                        {
                          "at": null,
                          "completedAt": null,
                          "createdAt": "2019-10-31T14:05:48.287613208+08:00",
                          "id": 6,
                          "lastState": "",
                          "nextTriggerAt": null,
                          "now": true,
                          "owner": "system",
                          "pendingAt": "2019-10-31T14:05:48.464809333+08:00",
                          "resourceID": 4,
                          "resourceType": "installation",
                          "startedAt": "2019-10-31T14:05:48.481181202+08:00",
                          "state": "running"
                        }
                      ]
                    },
                    "schema": {
                      "properties": {
                        "count": {
                          "type": "integer"
                        },
                        "data": {
                          "items": {
                            "properties": {
                              "at": {
                                "description": "Run the job periodically",
                                "properties": {
                                  "day": {
                                    "type": "string"
                                  },
                                  "dayOfWeek": {
                                    "type": "string"
                                  },
                                  "hour": {
                                    "type": "string"
                                  },
                                  "minute": {
                                    "type": "string"
                                  },
                                  "month": {
                                    "type": "string"
                                  }
                                }
                              },
                              "completedAt": {
                                "format": "date-time",
                                "type": "string"
                              },
                              "completedTask": {
                                "type": "integer"
                              },
                              "createdAt": {
                                "format": "date-time",
                                "type": "string"
                              },
                              "errorMessage": {
                                "description": "appear when state is failed",
                                "type": "string"
                              },
                              "id": {
                                "type": "integer"
                              },
                              "lastState": {
                                "description": "When suspended, lastState is the last active state",
                                "type": "string"
                              },
                              "nextTriggerAt": {
                                "description": "When setting `at`, this field shows the time to start",
                                "format": "date-time",
                                "type": "string"
                              },
                              "owner": {
                                "description": "User whom creating this job",
                                "type": "string"
                              },
                              "pendingAt": {
                                "format": "date-time",
                                "type": "string"
                              },
                              "resourceID": {
                                "description": "resource id associating to this job",
                                "type": "integer"
                              },
                              "resourceType": {
                                "description": "resource type associating to this job",
                                "enum": [
                                  "installation",
                                  "reboot"
                                ],
                                "type": "string"
                              },
                              "startedAt": {
                                "format": "date-time",
                                "type": "string"
                              },
                              "state": {
                                "enum": [
                                  "created",
                                  "pending",
                                  "running",
                                  "succeed",
                                  "failed",
                                  "canceling",
                                  "canceled",
                                  "suppending",
                                  "suppended",
                                  "resuming"
                                ],
                                "type": "string"
                              },
                              "totalTask": {
                                "type": "integer"
                              }
                            }
                          },
                          "type": "array"
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Get jobs",
            "tags": [
              "job"
            ]
          }
        },
        "/permissions": {
          "get": {
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "count": 2,
                      "data": [
                        {
                          "description": "",
                          "id": "SYS_USER_RW",
                          "name": "User/Role Management"
                        },
                        {
                          "description": "",
                          "id": "SYS_MAINTENANCE_RW",
                          "name": "Device Management"
                        }
                      ]
                    },
                    "schema": {
                      "items": {
                        "$ref": "#/components/schemas/Permission"
                      },
                      "type": "array"
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Query permissions",
            "tags": [
              "users"
            ]
          }
        },
        "/roles": {
          "get": {
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "count": 1,
                      "data": [
                        {
                          "description": "",
                          "id": 1,
                          "name": "Administrator",
                          "permissions": [
                            "SYS_USER_RW",
                            "SYS_MAINTENANCE_RW"
                          ],
                          "users": [
                            {
                              "id": 1,
                              "name": "admin"
                            },
                            {
                              "id": 2,
                              "name": "myuser"
                            }
                          ]
                        }
                      ]
                    },
                    "schema": {
                      "properties": {
                        "count": {
                          "type": "integer"
                        },
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/Role"
                          },
                          "type": "array"
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Query roles",
            "tags": [
              "users"
            ]
          },
          "post": {
            "requestBody": {
              "content": {
                "application/json": {
                  "example": {
                    "description": "",
                    "name": "myrole",
                    "permissions": [
                      "SYS_USER_RW"
                    ]
                  },
                  "schema": {
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "permissions": {
                        "items": {
                          "description": "ID of permission",
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "name",
                      "permissions"
                    ]
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "description": "moxa best",
                        "id": 2,
                        "name": "myrole",
                        "permissions": [
                          "SYS_USER_RW"
                        ],
                        "users": []
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Role"
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "create a role",
            "tags": [
              "users"
            ]
          }
        },
        "/roles/{id}": {
          "delete": {
            "responses": {
              "204": {
                "description": "success"
              }
            },
            "summary": "Delete role by ID",
            "tags": [
              "users"
            ]
          },
          "get": {
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "description": "moxa best",
                        "id": 2,
                        "name": "myrole",
                        "permissions": [
                          "SYS_USER_RW"
                        ],
                        "users": []
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Role"
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "get role by ID",
            "tags": [
              "users"
            ]
          },
          "parameters": [
            {
              "description": "ID of role",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "put": {
            "requestBody": {
              "content": {
                "application/json": {
                  "example": {
                    "description": "",
                    "name": "myrole",
                    "permissions": [
                      "SYS_USER_RW"
                    ]
                  },
                  "schema": {
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "permissions": {
                        "items": {
                          "description": "ID of permission",
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "name",
                      "permissions"
                    ]
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "description": "moxa best",
                        "id": 2,
                        "name": "myrole",
                        "permissions": [
                          "SYS_USER_RW"
                        ],
                        "users": []
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Role"
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "update role by ID",
            "tags": [
              "users"
            ]
          }
        },
        "/system/configuration": {
          "get": {
            "parameters": [
              {
                "description": "action to be executed",
                "in": "query",
                "name": "action",
                "required": true,
                "schema": {
                  "default": "download",
                  "enum": [
                    "download",
                    "get-profile"
                  ],
                  "type": "string"
                }
              },
              {
                "description": "Use password to encryption (default:true)",
                "in": "query",
                "name": "encryption",
                "schema": {
                  "default": true,
                  "type": "boolean"
                }
              },
              {
                "description": "If encryption is true, use this field as password (default:serial number), which should contain a number and a special char.",
                "in": "header",
                "name": "password",
                "schema": {
                  "type": "string"
                }
              },
              {
                "description": "select configurations by profiles. If no value is given, it will select all.",
                "example": "[{\"app\":\"modbusmaster\"},{\"app\":\"cloud\"}]\n",
                "in": "query",
                "name": "select",
                "schema": {
                  "format": "string"
                }
              },
              {
                "description": "filter configurations by profiles. It will do `select` first, then do `filter`.",
                "example": "[{\"labels\":[\"credential\"]},{\"labels\":[\"network\"]}]\n",
                "in": "query",
                "name": "filter",
                "schema": {
                  "format": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "count": 21,
                      "data": [
                        {
                          "app": "system",
                          "labels": [],
                          "section": "core"
                        },
                        {
                          "app": "device",
                          "labels": [
                            "network"
                          ],
                          "section": "cellulars"
                        },
                        {
                          "app": "device",
                          "labels": [],
                          "section": "dhcpservers"
                        },
                        {
                          "app": "device",
                          "labels": [],
                          "section": "discovery"
                        },
                        {
                          "app": "device",
                          "labels": [
                            "network"
                          ],
                          "section": "ethernets"
                        },
                        {
                          "app": "device",
                          "labels": [],
                          "section": "firewall"
                        },
                        {
                          "app": "device",
                          "labels": [],
                          "section": "general"
                        },
                        {
                          "app": "device",
                          "labels": [],
                          "section": "gps"
                        },
                        {
                          "app": "device",
                          "labels": [],
                          "section": "iptables"
                        },
                        {
                          "app": "device",
                          "labels": [],
                          "section": "minicards"
                        },
                        {
                          "app": "device",
                          "labels": [
                            "network"
                          ],
                          "section": "route"
                        },
                        {
                          "app": "device",
                          "labels": [],
                          "section": "serials"
                        },
                        {
                          "app": "device",
                          "labels": [],
                          "section": "time"
                        },
                        {
                          "app": "device",
                          "labels": [
                            "network"
                          ],
                          "section": "wifi"
                        },
                        {
                          "app": "cloud",
                          "labels": [],
                          "section": "core"
                        },
                        {
                          "app": "edge-web",
                          "labels": [],
                          "section": "core"
                        },
                        {
                          "app": "eipscanner",
                          "labels": [],
                          "section": "core"
                        },
                        {
                          "app": "function",
                          "labels": [],
                          "section": "core"
                        },
                        {
                          "app": "modbusmaster",
                          "labels": [],
                          "section": "core"
                        },
                        {
                          "app": "opcuaserver",
                          "labels": [],
                          "section": "core"
                        },
                        {
                          "app": "tagservice",
                          "labels": [],
                          "section": "core"
                        }
                      ]
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "items": {
                            "properties": {
                              "app": {
                                "description": "filter by APP name or `system` as internal services. Keep this empty or skip this if needed.",
                                "type": "string"
                              },
                              "labels": {
                                "description": "filter by labels",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "section": {
                                "description": "filter by configuration section name. Keep this empty or skip this if needed.",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      }
                    }
                  },
                  "application/tar+gz": {
                    "schema": {
                      "format": "binary",
                      "type": "string"
                    }
                  }
                },
                "description": "success to return one of content-type\n  1. `application/tar+gz` when query parameter `action` == `download`\n  2. `application/json` when query parameter `action` == `get-profile`\n"
              },
              "400": {
                "description": "1. Bad format of query string\n"
              }
            },
            "summary": "Export configurations",
            "tags": [
              "systems"
            ]
          },
          "put": {
            "requestBody": {
              "content": {
                "multipart/form-data": {
                  "schema": {
                    "properties": {
                      "apply": {
                        "default": false,
                        "description": "Apply configuration and will check if model name or version has conflict.",
                        "type": "boolean"
                      },
                      "encryption": {
                        "default": true,
                        "description": "Use password to encryption (default:true)",
                        "type": "boolean"
                      },
                      "file": {
                        "description": "configuration file",
                        "format": "binary",
                        "type": "string"
                      },
                      "password": {
                        "description": "password (default:serial number)",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "examples": {
                      "Both different": {
                        "summary": "Both different",
                        "value": {
                          "data": {
                            "diff": {
                              "current": {
                                "model": "uc-3100",
                                "tpeversion": "2.0.0-1600"
                              },
                              "imported": {
                                "model": "uc-8100-lx",
                                "tpeversion": "1.1.0-1234"
                              }
                            },
                            "fileName": "2019-12-19-13-52-backup.tar.gz",
                            "fileSize": 46272
                          }
                        }
                      },
                      "Devicedifferent": {
                        "summary": "Device different",
                        "value": {
                          "data": {
                            "diff": {
                              "current": {
                                "model": "uc-3100",
                                "tpeversion": "2.0.0-1600"
                              },
                              "imported": {
                                "model": "uc-8100-lx",
                                "tpeversion": "2.0.0-1600"
                              }
                            },
                            "fileName": "2019-12-19-13-52-backup.tar.gz",
                            "fileSize": 46272
                          }
                        }
                      },
                      "Nodifference": {
                        "summary": "No difference",
                        "value": {
                          "data": {
                            "diff": null,
                            "fileName": "2019-12-19-13-52-backup.tar.gz",
                            "fileSize": 46272
                          }
                        }
                      },
                      "TPEversiondifferent": {
                        "summary": "TPE version different",
                        "value": {
                          "data": {
                            "diff": {
                              "current": {
                                "model": "uc-3100",
                                "tpeversion": "2.0.0-1600"
                              },
                              "imported": {
                                "model": "uc-3100",
                                "tpeversion": "1.1.0-1234"
                              }
                            },
                            "fileName": "2019-12-19-13-52-backup.tar.gz",
                            "fileSize": 46272
                          }
                        }
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "diff": {
                              "properties": {
                                "current": {
                                  "properties": {
                                    "model": {
                                      "type": "string"
                                    },
                                    "tpeversion": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "imported": {
                                  "properties": {
                                    "model": {
                                      "type": "string"
                                    },
                                    "tpeversion": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "filename": {
                              "type": "string"
                            },
                            "filesize": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              },
              "400": {
                "content": {
                  "application/json": {
                    "examples": {
                      "extract": {
                        "summary": "invalid extract",
                        "value": {
                          "error": {
                            "code": 10001,
                            "message": "extract: invalid file or authentication failed"
                          }
                        }
                      },
                      "filesize": {
                        "summary": "file size is over limitation",
                        "value": {
                          "error": {
                            "code": 10000,
                            "message": "file is over size"
                          }
                        }
                      }
                    },
                    "schema": {
                      "properties": {
                        "error": {
                          "properties": {
                            "code": {
                              "type": "integer"
                            },
                            "message": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "error"
              }
            },
            "summary": "Upload configurations",
            "tags": [
              "systems"
            ]
          }
        },
        "/system/configuration/{filename}": {
          "parameters": [
            {
              "description": "The `filename` value returned in the response the `filename` in `PUT /system/configuration`.\n",
              "in": "path",
              "name": "filename",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "patch": {
            "description": "Apply configuration that uploaded by `PUT /system/configuration`. After applying configuration, system will be rebooted in 5 seconds.\n",
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "diff": null,
                        "fileName": "2019-12-20-04-51-backup.tar.gz",
                        "fileSize": 46297
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "fileName": {
                              "type": "string"
                            },
                            "fileSize": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Apply configuration",
            "tags": [
              "systems"
            ]
          }
        },
        "/system/discovery": {
          "get": {
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "enable": true
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "enable": {
                              "description": "enable discovery service",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Get discovery service status",
            "tags": [
              "systems"
            ]
          },
          "put": {
            "requestBody": {
              "content": {
                "application/json": {
                  "example": {
                    "enable": true
                  },
                  "schema": {
                    "properties": {
                      "enable": {
                        "description": "enable discovery service",
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "enable": true
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "enable": {
                              "description": "enable discovery service",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Set discovery service configuration",
            "tags": [
              "systems"
            ]
          }
        },
        "/system/httpserver": {
          "get": {
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "certFileName": "default.crt",
                        "httpEnable": true,
                        "httpPort": 80,
                        "httpsEnable": true,
                        "httpsPort": 443,
                        "keyFileName": "default.key"
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "certFilename": {
                              "description": "filename of https certificate",
                              "type": "string"
                            },
                            "httpEnable": {
                              "type": "boolean"
                            },
                            "httpPort": {
                              "description": "listen port for http",
                              "type": "integer"
                            },
                            "httpsEnable": {
                              "type": "boolean"
                            },
                            "httpsPort": {
                              "description": "listen port for https",
                              "type": "integer"
                            },
                            "keyFilename": {
                              "description": "filename of https key",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Get httpserver configuration",
            "tags": [
              "systems"
            ]
          },
          "patch": {
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "cert": {
                        "description": "(JSON only) certificate content",
                        "type": "string"
                      },
                      "certFile": {
                        "description": "(form-data only) certificate for https. The suffix of filename must be one of `.crt`, `.cer` or `.pem` with PEM format which the content starts with `----- BEGIN CERTIFICATE -----`\n",
                        "format": "binary",
                        "type": "string"
                      },
                      "certFilename": {
                        "description": "(JSON only) filename of client authentication certificate",
                        "type": "string"
                      },
                      "httpEnable": {
                        "type": "boolean"
                      },
                      "httpPort": {
                        "description": "listen port for http",
                        "type": "integer"
                      },
                      "httpsEnable": {
                        "type": "boolean"
                      },
                      "httpsPort": {
                        "description": "listen port for https",
                        "type": "integer"
                      },
                      "key": {
                        "description": "(JSON only) key content",
                        "type": "string"
                      },
                      "keyFile": {
                        "description": "(form-data only) key for https. The suffix of filename must be one of `.key`, `.pk` or `.pem` with PEM format which the content starts with `----- BEGIN RSA PRIVATE KEY -----`\n",
                        "format": "binary",
                        "type": "string"
                      },
                      "keyFilename": {
                        "description": "(JSON only) filename of client authentication key",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "certFileName": "default.crt",
                        "httpEnable": true,
                        "httpPort": 80,
                        "httpsEnable": true,
                        "httpsPort": 443,
                        "keyFileName": "default.key"
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "certFilename": {
                              "description": "filename of https certificate",
                              "type": "string"
                            },
                            "httpEnable": {
                              "type": "boolean"
                            },
                            "httpPort": {
                              "description": "listen port for http",
                              "type": "integer"
                            },
                            "httpsEnable": {
                              "type": "boolean"
                            },
                            "httpsPort": {
                              "description": "listen port for https",
                              "type": "integer"
                            },
                            "keyFilename": {
                              "description": "filename of https key",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Set httpserver configuration partially",
            "tags": [
              "systems"
            ]
          },
          "put": {
            "requestBody": {
              "content": {
                "multipart/form-data": {
                  "schema": {
                    "properties": {
                      "cert": {
                        "description": "(JSON only) certificate content",
                        "type": "string"
                      },
                      "certFile": {
                        "description": "(form-data only) certificate for https. The suffix of filename must be one of `.crt`, `.cer` or `.pem` with PEM format which the content starts with `----- BEGIN CERTIFICATE -----`\n",
                        "format": "binary",
                        "type": "string"
                      },
                      "certFilename": {
                        "description": "(JSON only) filename of client authentication certificate",
                        "type": "string"
                      },
                      "httpEnable": {
                        "type": "boolean"
                      },
                      "httpPort": {
                        "description": "listen port for http",
                        "type": "integer"
                      },
                      "httpsEnable": {
                        "type": "boolean"
                      },
                      "httpsPort": {
                        "description": "listen port for https",
                        "type": "integer"
                      },
                      "key": {
                        "description": "(JSON only) key content",
                        "type": "string"
                      },
                      "keyFile": {
                        "description": "(form-data only) key for https. The suffix of filename must be one of `.key`, `.pk` or `.pem` with PEM format which the content starts with `----- BEGIN RSA PRIVATE KEY -----`\n",
                        "format": "binary",
                        "type": "string"
                      },
                      "keyFilename": {
                        "description": "(JSON only) filename of client authentication key",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "certFileName": "default.crt",
                        "httpEnable": true,
                        "httpPort": 80,
                        "httpsEnable": true,
                        "httpsPort": 443,
                        "keyFileName": "default.key"
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "certFilename": {
                              "description": "filename of https certificate",
                              "type": "string"
                            },
                            "httpEnable": {
                              "type": "boolean"
                            },
                            "httpPort": {
                              "description": "listen port for http",
                              "type": "integer"
                            },
                            "httpsEnable": {
                              "type": "boolean"
                            },
                            "httpsPort": {
                              "description": "listen port for https",
                              "type": "integer"
                            },
                            "keyFilename": {
                              "description": "filename of https key",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Set httpserver configuration",
            "tags": [
              "systems"
            ]
          }
        },
        "/system/provision": {
          "get": {
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "enable": true,
                        "schedule": {
                          "enable": true,
                          "disableAfterSec": 900
                        }
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "enable": {
                              "description": "enable provisioning function",
                              "type": "boolean"
                            },
                            "schedule": {
                              "type": "object",
                              "properties": {
                                "enable": {
                                  "description": "schedule to disable provisioning function after a period",
                                  "type": "boolean"
                                },
                                "disableAfterSec": {
                                  "description": "time (in seconds) of period",
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Get provisioning service status",
            "tags": [
              "systems"
            ]
          },
          "put": {
            "requestBody": {
              "content": {
                "application/json": {
                  "example": {
                    "enable": true,
                    "schedule": {
                      "enable": true,
                      "disableAfterSec": 900
                    }
                  },
                  "schema": {
                    "properties": {
                      "enable": {
                        "description": "enable provisioning function",
                        "type": "boolean"
                      },
                      "schedule": {
                        "type": "object",
                        "properties": {
                          "enable": {
                            "description": "schedule to disable provisioning function after a period",
                            "type": "boolean"
                          },
                          "disableAfterSec": {
                            "description": "time (in seconds) of period",
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "enable": true,
                        "schedule": {
                          "enable": true,
                          "disableAfterSec": 900
                        }
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "enable": {
                              "description": "enable provisioning function",
                              "type": "boolean"
                            },
                            "schedule": {
                              "type": "object",
                              "properties": {
                                "enable": {
                                  "description": "schedule to disable provisioning function after a period",
                                  "type": "boolean"
                                },
                                "disableAfterSec": {
                                  "description": "time (in seconds) of period",
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Set provisioning service configuration",
            "tags": [
              "systems"
            ]
          }
        },
        "/system/log": {
          "get": {
            "parameters": [
              {
                "description": "Indicate to download log as zip file. Value is always true.",
                "in": "query",
                "name": "download",
                "schema": {
                  "type": "boolean"
                }
              }
            ],
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "desiredDiskCacheSizeMB": 100,
                        "disks": [
                          {
                            "device": "/dev/root",
                            "free": 3961389056,
                            "mount": "/",
                            "name": "System",
                            "percent": 27.531145236535952,
                            "tags": {
                              "free": "systemDiskFree",
                              "percent": "systemDiskPercent",
                              "used": "systemDiskUsed"
                            },
                            "total": 5731123200,
                            "used": 1504944128
                          },
                          {
                            "device": "/dev/mmcblk0p1",
                            "free": 1069535232,
                            "mount": "/host/media/sd-mmcblk0p1",
                            "name": "SD 1-1",
                            "percent": 75.04916265816615,
                            "tags": {
                              "free": "systemDiskFree",
                              "percent": "systemDiskPercent",
                              "used": "systemDiskUsed"
                            },
                            "total": 4286570496,
                            "used": 3217035264
                          },
                          {
                            "device": "/dev/mmcblk0p2",
                            "free": 4286566400,
                            "mount": "/host/media/mylabel",
                            "name": "mylabel",
                            "percent": 0.00009555424327728121,
                            "tags": {
                              "free": "systemDiskFree",
                              "percent": "systemDiskPercent",
                              "used": "systemDiskUsed"
                            },
                            "total": 4286570496,
                            "used": 4096
                          },
                          {
                            "device": "/dev/mmcblk0p3",
                            "free": 4286566400,
                            "mount": "/host/media/sd-mmcblk0p3",
                            "name": "SD 1-3",
                            "percent": 0.00009555424327728121,
                            "tags": {
                              "free": "systemDiskFree",
                              "percent": "systemDiskPercent",
                              "used": "systemDiskUsed"
                            },
                            "total": 4286570496,
                            "used": 4096
                          }
                        ],
                        "enable": true,
                        "enableTimeToLiveSec": false,
                        "targetDiskName": "System",
                        "timeToLiveSec": 86400
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "desiredDiskCacheSizeMB": {
                              "type": "string"
                            },
                            "disk": {
                              "description": "refer to API `/device/general`"
                            },
                            "enable": {
                              "type": "boolean"
                            },
                            "enableTimeToLiveSec": {
                              "type": "boolean"
                            },
                            "targetDiskName": {
                              "type": "string"
                            },
                            "timeToLiveSec": {
                              "description": "unlimit if value <= 0",
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  },
                  "application/zip": {
                    "schema": {
                      "format": "binary",
                      "type": "string"
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Get configuration or download log",
            "tags": [
              "systems"
            ]
          },
          "put": {
            "requestBody": {
              "content": {
                "application/json": {
                  "example": {
                    "desiredDiskCacheSizeMB": 100,
                    "enable": true,
                    "enableTimeToLiveSec": false,
                    "targetDiskName": "System",
                    "timeToLiveSec": 7200
                  },
                  "schema": {
                    "properties": {
                      "desiredDiskCacheSizeMB": {
                        "type": "string"
                      },
                      "disk": {
                        "description": "refer to API `/device/general`"
                      },
                      "enable": {
                        "type": "boolean"
                      },
                      "enableTimeToLiveSec": {
                        "type": "boolean"
                      },
                      "targetDiskName": {
                        "type": "string"
                      },
                      "timeToLiveSec": {
                        "description": "unlimit if value <= 0",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "desiredDiskCacheSizeMB": 100,
                        "disks": [
                          {
                            "device": "/dev/root",
                            "free": 3961389056,
                            "mount": "/",
                            "name": "System",
                            "percent": 27.531145236535952,
                            "tags": {
                              "free": "systemDiskFree",
                              "percent": "systemDiskPercent",
                              "used": "systemDiskUsed"
                            },
                            "total": 5731123200,
                            "used": 1504944128
                          },
                          {
                            "device": "/dev/mmcblk0p1",
                            "free": 1069535232,
                            "mount": "/host/media/sd-mmcblk0p1",
                            "name": "SD 1-1",
                            "percent": 75.04916265816615,
                            "tags": {
                              "free": "systemDiskFree",
                              "percent": "systemDiskPercent",
                              "used": "systemDiskUsed"
                            },
                            "total": 4286570496,
                            "used": 3217035264
                          },
                          {
                            "device": "/dev/mmcblk0p2",
                            "free": 4286566400,
                            "mount": "/host/media/mylabel",
                            "name": "mylabel",
                            "percent": 0.00009555424327728121,
                            "tags": {
                              "free": "systemDiskFree",
                              "percent": "systemDiskPercent",
                              "used": "systemDiskUsed"
                            },
                            "total": 4286570496,
                            "used": 4096
                          },
                          {
                            "device": "/dev/mmcblk0p3",
                            "free": 4286566400,
                            "mount": "/host/media/sd-mmcblk0p3",
                            "name": "SD 1-3",
                            "percent": 0.00009555424327728121,
                            "tags": {
                              "free": "systemDiskFree",
                              "percent": "systemDiskPercent",
                              "used": "systemDiskUsed"
                            },
                            "total": 4286570496,
                            "used": 4096
                          }
                        ],
                        "enable": true,
                        "enableTimeToLiveSec": false,
                        "targetDiskName": "System",
                        "timeToLiveSec": 86400
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "desiredDiskCacheSizeMB": {
                              "type": "string"
                            },
                            "disk": {
                              "description": "refer to API `/device/general`"
                            },
                            "enable": {
                              "type": "boolean"
                            },
                            "enableTimeToLiveSec": {
                              "type": "boolean"
                            },
                            "targetDiskName": {
                              "type": "string"
                            },
                            "timeToLiveSec": {
                              "description": "unlimit if value <= 0",
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  },
                  "application/zip": {
                    "schema": {
                      "format": "binary",
                      "type": "string"
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Set log configuration",
            "tags": [
              "systems"
            ]
          }
        },
        "/system/reboot": {
          "get": {
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "at": {
                          "day": "1",
                          "dayOfWeek": "*",
                          "hour": "12",
                          "minute": "0",
                          "month": "1"
                        },
                        "enableScheduler": true,
                        "lastBootAt": "2019-01-01T12:00:00Z",
                        "nextTriggerAt": "2019-01-01T12:00:00Z"
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "at": {
                              "properties": {
                                "day": {
                                  "type": "string"
                                },
                                "dayOfWeek": {
                                  "type": "string"
                                },
                                "hour": {
                                  "type": "string"
                                },
                                "minute": {
                                  "type": "string"
                                },
                                "month": {
                                  "type": "string"
                                }
                              }
                            },
                            "enableScheduler": {
                              "type": "boolean"
                            },
                            "lastBootAt": {
                              "format": "date-time",
                              "type": "string"
                            },
                            "nextTriggerAt": {
                              "format": "date-time",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Get reboot configuration",
            "tags": [
              "systems"
            ]
          },
          "put": {
            "requestBody": {
              "content": {
                "application/json": {
                  "examples": {
                    "now": {
                      "summary": "now",
                      "value": {
                        "now": true
                      }
                    },
                    "scheduler": {
                      "summary": "reboot every hours",
                      "value": {
                        "at": {
                          "day": "1",
                          "dayOfWeek": "*",
                          "hour": "12",
                          "minute": "0",
                          "month": "1"
                        },
                        "enableScheduler": true
                      }
                    }
                  },
                  "schema": {
                    "properties": {
                      "at": {
                        "description": "the format can be a fixed string \"now\", datetime in RFC3339, or crontab (https://linux.die.net/man/5/crontab)",
                        "type": "string"
                      },
                      "enableScheduler": {
                        "type": "boolean"
                      },
                      "now": {
                        "description": "reboot immediately",
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "at": {
                          "day": "1",
                          "dayOfWeek": "*",
                          "hour": "12",
                          "minute": "0",
                          "month": "1"
                        },
                        "enableScheduler": true,
                        "lastBootAt": "2019-01-01T12:00:00Z",
                        "nextTriggerAt": "2019-01-01T12:00:00Z"
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "at": {
                              "properties": {
                                "day": {
                                  "type": "string"
                                },
                                "dayOfWeek": {
                                  "type": "string"
                                },
                                "hour": {
                                  "type": "string"
                                },
                                "minute": {
                                  "type": "string"
                                },
                                "month": {
                                  "type": "string"
                                }
                              }
                            },
                            "enableScheduler": {
                              "type": "boolean"
                            },
                            "lastBootAt": {
                              "format": "date-time",
                              "type": "string"
                            },
                            "nextTriggerAt": {
                              "format": "date-time",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Reboot system",
            "tags": [
              "systems"
            ]
          }
        },
        "/system/reset-default": {
          "get": {
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "factory": {
                          "isSupported": true,
                          "scopes": [
                            "all"
                          ]
                        },
                        "system": {
                          "isSupported": true,
                          "scopes": [
                            "all",
                            "account",
                            "appdata",
                            "discovery",
                            "eventlog",
                            "httpserver",
                            "job",
                            "journald",
                            "keep-network-setting",
                            "provision",
                            "reboot",
                            "sshserver",
                            "serialconsole",
                            "upgrade"
                          ]
                        }
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "fileName": {
                              "type": "string"
                            },
                            "fileSize": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "get reset system capabilities",
            "tags": [
              "systems"
            ]
          },
          "put": {
            "parameters": [
              {
                "in": "query",
                "name": "mode",
                "schema": {
                  "default": "system",
                  "enum": [
                    "factory",
                    "system"
                  ],
                  "type": "string"
                }
              },
              {
                "description": "If true, do reset immediately, else wait 3 seconds",
                "in": "query",
                "name": "sync",
                "schema": {
                  "default": false,
                  "type": "boolean"
                }
              },
              {
                "description": "reset scope",
                "in": "query",
                "name": "scopes",
                "schema": {
                  "items": {
                    "enum": [
                      "all",
                      "account",
                      "appdata",
                      "discovery",
                      "eventlog",
                      "httpserver",
                      "job",
                      "journald",
                      "keep-network-setting",
                      "provision",
                      "reboot",
                      "sshserver",
                      "serialconsole",
                      "upgrade"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "success"
              },
              "400": {
                "description": "1. unsupported mode\n2. status is not ready\n3. invalid scopes\n"
              }
            },
            "summary": "reset system to default configuration",
            "tags": [
              "systems"
            ]
          }
        },
        "/system/serialconsole": {
          "get": {
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "enable": true
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "enable": {
                              "description": "enable serial console",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Get serial console status",
            "tags": [
              "systems"
            ]
          },
          "put": {
            "requestBody": {
              "content": {
                "application/json": {
                  "example": {
                    "enable": true
                  },
                  "schema": {
                    "properties": {
                      "enable": {
                        "description": "enable serial console",
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "enable": true
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "enable": {
                              "description": "enable serial console",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Set serial console configuration",
            "tags": [
              "systems"
            ]
          }
        },
        "/system/services": {
          "get": {
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "cloudConnectivity": [
                          {
                            "available": true,
                            "enable": true,
                            "id": "cloud"
                          }
                        ],
                        "network": [
                          {
                            "available": true,
                            "enable": true,
                            "id": "wifi"
                          },
                          {
                            "available": true,
                            "enable": true,
                            "id": "cellular"
                          },
                          {
                            "available": true,
                            "enable": true,
                            "id": "lan1"
                          },
                          {
                            "available": true,
                            "enable": true,
                            "id": "lan2"
                          },
                          {
                            "available": false,
                            "enable": false,
                            "id": "dhcpserver1"
                          },
                          {
                            "available": true,
                            "enable": false,
                            "id": "dhcpserver2"
                          }
                        ],
                        "protocol": [
                          {
                            "available": true,
                            "enable": true,
                            "id": "modbusmaster"
                          },
                          {
                            "available": true,
                            "enable": true,
                            "id": "eipscanner"
                          },
                          {
                            "available": true,
                            "enable": true,
                            "id": "opcuaserver"
                          }
                        ],
                        "provisionService": [
                          {
                            "available": true,
                            "enable": true,
                            "id": "provision"
                          },
                          {
                            "available": true,
                            "enable": true,
                            "id": "provisionschedule"
                          }
                        ],
                        "service": [
                          {
                            "available": true,
                            "enable": false,
                            "id": "httpservice"
                          },
                          {
                            "available": true,
                            "enable": true,
                            "id": "httpsservice"
                          },
                          {
                            "available": true,
                            "enable": true,
                            "id": "ntp"
                          },
                          {
                            "available": true,
                            "enable": true,
                            "id": "sshserver"
                          },
                          {
                            "available": true,
                            "enable": true,
                            "id": "localconsole"
                          },
                          {
                            "available": true,
                            "enable": false,
                            "id": "sdcard"
                          },
                          {
                            "available": true,
                            "enable": true,
                            "id": "syslog"
                          },
                          {
                            "available": true,
                            "enable": true,
                            "id": "eventlog"
                          }
                        ]
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "network": {
                              "items": {
                                "properties": {
                                  "available": {
                                    "description": "service available",
                                    "type": "boolean"
                                  },
                                  "enable": {
                                    "description": "service status",
                                    "type": "boolean"
                                  },
                                  "id": {
                                    "description": "service name",
                                    "type": "string"
                                  }
                                }
                              },
                              "type": "array"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Get system services",
            "tags": [
              "systems"
            ]
          }
        },
        "/system/services/{id}/disable": {
          "parameters": [
            {
              "description": "service name",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "enum": [
                  "dhcpserver1",
                  "dhcpserver2",
                  "httpservice",
                  "httpsservice",
                  "sshserver",
                  "localconsole",
                  "lan1",
                  "lan2",
                  "cloud",
                  "modbusmaster",
                  "eipscanner",
                  "opcuaserver",
                  "sdcard",
                  "ntp",
                  "eventlog",
                  "syslog",
                  "wifi",
                  "cellular",
                  "provision",
                  "provisionschedule"
                ],
                "type": "string"
              }
            }
          ],
          "put": {
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "enable": false
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "enable": {
                              "description": "service status",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Disable system service",
            "tags": [
              "systems"
            ]
          }
        },
        "/system/services/{id}/enable": {
          "parameters": [
            {
              "description": "service name",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "enum": [
                  "dhcpserver1",
                  "dhcpserver2",
                  "httpservice",
                  "httpsservice",
                  "sshserver",
                  "localconsole",
                  "lan1",
                  "lan2",
                  "cloud",
                  "modbusmaster",
                  "eipscanner",
                  "opcuaserver",
                  "sdcard",
                  "ntp",
                  "eventlog",
                  "syslog",
                  "wifi",
                  "cellular",
                  "provision",
                  "provisionschedule"
                ],
                "type": "string"
              }
            }
          ],
          "put": {
            "description": "enable system services including Web GUI `edge-web`,\nDHCP Server `dhcpserverX`, Discovery `discovery`,\nHTTP service `httpservice` and so on.\n",
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "enable": true
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "enable": {
                              "description": "service status",
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Enable system service",
            "tags": [
              "systems"
            ]
          }
        },
        "/system/sshserver": {
          "get": {
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "enable": true,
                        "port": 22
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "enable": {
                              "description": "enable SSH",
                              "type": "boolean"
                            },
                            "port": {
                              "description": "port to listen",
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Get SSH configuration",
            "tags": [
              "systems"
            ]
          },
          "put": {
            "requestBody": {
              "content": {
                "application/json": {
                  "example": {
                    "enable": true,
                    "port": 22
                  },
                  "schema": {
                    "properties": {
                      "enable": {
                        "description": "enable SSH",
                        "type": "boolean"
                      },
                      "port": {
                        "description": "port to listen",
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "enable": true,
                        "port": 22
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "enable": {
                              "description": "enable SSH",
                              "type": "boolean"
                            },
                            "port": {
                              "description": "port to listen",
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Set SSH configuration",
            "tags": [
              "systems"
            ]
          }
        },
        "/system/upgrade": {
          "get": {
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "allowOverCellular": true,
                        "caName": "ca.crt",
                        "certFileName": "client.crt",
                        "disks": [
                          {
                            "device": "/dev/root",
                            "free": 2856562688,
                            "mount": "/",
                            "name": "System",
                            "percent": 47.74261663447114,
                            "protect": 838860800,
                            "tags": {
                              "free": "systemDiskFree",
                              "percent": "systemDiskPercent",
                              "used": "systemDiskUsed"
                            },
                            "total": 5731123200,
                            "used": 2609770496
                          },
                          {
                            "device": "/dev/mmcblk0p1",
                            "free": 7423197184,
                            "mount": "/media/sd-mmcblk0p1",
                            "name": "SD1-1",
                            "percent": 6.752996575342466,
                            "protect": 0,
                            "tags": {
                              "free": "systemDiskFree",
                              "percent": "systemDiskPercent",
                              "used": "systemDiskUsed"
                            },
                            "total": 7960788992,
                            "used": 537591808
                          }
                        ],
                        "enableClientAuth": false,
                        "enableSnapshot": false,
                        "isSnapshotSupported": true,
                        "keyFileName": "client.key",
                        "retryCount": 3,
                        "retryInterval": 5,
                        "targetDiskName": "SD1-1"
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "allowOverCellular": {
                              "description": "allow upgrade over the cellular",
                              "type": "boolean"
                            },
                            "disks": {
                              "description": "disk list",
                              "items": {
                                "type": "object"
                              }
                            },
                            "enableClientAuth": {
                              "description": "use cert and key as X.509 client authentication",
                              "type": "boolean"
                            },
                            "enableSnapshot": {
                              "description": "do snapshot during upgrade. If the device doesn’t support snapshot feature (isSnapshotSupported), the request will be rejected with an error.",
                              "type": "boolean"
                            },
                            "isSnapshotSupported": {
                              "description": "whether supports snapshot",
                              "type": "boolean"
                            },
                            "retryCount": {
                              "description": "maximum re-try count to download upgrade package. 0 means unlimited.",
                              "type": "integer"
                            },
                            "retryInterval": {
                              "description": "re-try interval in seconds to download upgrade package.",
                              "type": "integer"
                            },
                            "targetDiskName": {
                              "description": "disk partition name to store upgrade file",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Get upgrade configuration",
            "tags": [
              "upgrade"
            ]
          },
          "patch": {
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "allowOverCellular": {
                        "description": "allow upgrade over the cellular",
                        "type": "boolean"
                      },
                      "disks": {
                        "description": "disk list",
                        "items": {
                          "type": "object"
                        }
                      },
                      "enableClientAuth": {
                        "description": "use cert and key as X.509 client authentication",
                        "type": "boolean"
                      },
                      "enableSnapshot": {
                        "description": "do snapshot during upgrade. If the device doesn’t support snapshot feature (isSnapshotSupported), the request will be rejected with an error.",
                        "type": "boolean"
                      },
                      "isSnapshotSupported": {
                        "description": "whether supports snapshot",
                        "type": "boolean"
                      },
                      "retryCount": {
                        "description": "maximum re-try count to download upgrade package. 0 means unlimited.",
                        "type": "integer"
                      },
                      "retryInterval": {
                        "description": "re-try interval in seconds to download upgrade package.",
                        "type": "integer"
                      },
                      "targetDiskName": {
                        "description": "disk partition name to store upgrade file",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "allowOverCellular": true,
                        "caName": "ca.crt",
                        "certFileName": "client.crt",
                        "disks": [
                          {
                            "device": "/dev/root",
                            "free": 2856562688,
                            "mount": "/",
                            "name": "System",
                            "percent": 47.74261663447114,
                            "protect": 838860800,
                            "tags": {
                              "free": "systemDiskFree",
                              "percent": "systemDiskPercent",
                              "used": "systemDiskUsed"
                            },
                            "total": 5731123200,
                            "used": 2609770496
                          },
                          {
                            "device": "/dev/mmcblk0p1",
                            "free": 7423197184,
                            "mount": "/media/sd-mmcblk0p1",
                            "name": "SD1-1",
                            "percent": 6.752996575342466,
                            "protect": 0,
                            "tags": {
                              "free": "systemDiskFree",
                              "percent": "systemDiskPercent",
                              "used": "systemDiskUsed"
                            },
                            "total": 7960788992,
                            "used": 537591808
                          }
                        ],
                        "enableClientAuth": false,
                        "enableSnapshot": false,
                        "isSnapshotSupported": true,
                        "keyFileName": "client.key",
                        "retryCount": 3,
                        "retryInterval": 5,
                        "targetDiskName": "SD1-1"
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "allowOverCellular": {
                              "description": "allow upgrade over the cellular",
                              "type": "boolean"
                            },
                            "disks": {
                              "description": "disk list",
                              "items": {
                                "type": "object"
                              }
                            },
                            "enableClientAuth": {
                              "description": "use cert and key as X.509 client authentication",
                              "type": "boolean"
                            },
                            "enableSnapshot": {
                              "description": "do snapshot during upgrade. If the device doesn’t support snapshot feature (isSnapshotSupported), the request will be rejected with an error.",
                              "type": "boolean"
                            },
                            "isSnapshotSupported": {
                              "description": "whether supports snapshot",
                              "type": "boolean"
                            },
                            "retryCount": {
                              "description": "maximum re-try count to download upgrade package. 0 means unlimited.",
                              "type": "integer"
                            },
                            "retryInterval": {
                              "description": "re-try interval in seconds to download upgrade package.",
                              "type": "integer"
                            },
                            "targetDiskName": {
                              "description": "disk partition name to store upgrade file",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Set upgrade configuration partially",
            "tags": [
              "upgrade"
            ]
          },
          "put": {
            "requestBody": {
              "content": {
                "application/json": {
                  "example": {
                    "allowOverCellular": true,
                    "ca": "xxxxxx",
                    "caFilename": "ca.crt",
                    "cert": "xxxxxxx",
                    "certFilename": "a.crt",
                    "enableClientAuth": true,
                    "enableSnapshot": true,
                    "key": "xxxxx",
                    "keyFilename": "a.key",
                    "retryCount": 3,
                    "retryInterval": 0,
                    "targetDiskName": "System"
                  },
                  "schema": {
                    "properties": {
                      "allowOverCellular": {
                        "description": "allow upgrade over the cellular",
                        "type": "boolean"
                      },
                      "ca": {
                        "description": "CA content",
                        "type": "string"
                      },
                      "caFilename": {
                        "description": "filename of CA",
                        "type": "string"
                      },
                      "cert": {
                        "description": "certificate content",
                        "type": "string"
                      },
                      "certFilename": {
                        "description": "filename of client authentication certificate",
                        "type": "string"
                      },
                      "disks": {
                        "description": "disk list",
                        "items": {
                          "type": "object"
                        }
                      },
                      "enableClientAuth": {
                        "description": "use cert and key as X.509 client authentication",
                        "type": "boolean"
                      },
                      "enableSnapshot": {
                        "description": "do snapshot during upgrade. If the device doesn’t support snapshot feature (isSnapshotSupported), the request will be rejected with an error.",
                        "type": "boolean"
                      },
                      "isSnapshotSupported": {
                        "description": "whether supports snapshot",
                        "type": "boolean"
                      },
                      "key": {
                        "description": "key content",
                        "type": "string"
                      },
                      "keyFilename": {
                        "description": "filename of client authentication key",
                        "type": "string"
                      },
                      "retryCount": {
                        "description": "maximum re-try count to download upgrade package. 0 means unlimited.",
                        "type": "integer"
                      },
                      "retryInterval": {
                        "description": "re-try interval in seconds to download upgrade package.",
                        "type": "integer"
                      },
                      "targetDiskName": {
                        "description": "partition to store upgrade file",
                        "type": "string"
                      }
                    }
                  }
                },
                "multipart/form-data": {
                  "encoding": {
                    "certFile": {
                      "explode": false,
                      "style": "form"
                    }
                  },
                  "example": {
                    "allowOverCellular": true,
                    "caFile": "file",
                    "certFile": "file",
                    "enableClientAuth": true,
                    "enableSnapshot": true,
                    "keyFile": "file",
                    "retryCount": 3,
                    "retryInterval": 0,
                    "targetDiskName": "System"
                  },
                  "schema": {
                    "properties": {
                      "allowOverCellular": {
                        "description": "allow upgrade over the cellular",
                        "type": "boolean"
                      },
                      "caFile": {
                        "description": "CA content",
                        "format": "binary",
                        "type": "string"
                      },
                      "certFile": {
                        "description": "certificate content",
                        "format": "binary",
                        "type": "string"
                      },
                      "disks": {
                        "description": "disk list",
                        "items": {
                          "type": "object"
                        }
                      },
                      "enableClientAuth": {
                        "description": "use cert and key as X.509 client authentication",
                        "type": "boolean"
                      },
                      "enableSnapshot": {
                        "description": "do snapshot during upgrade. If the device doesn’t support snapshot feature (isSnapshotSupported), the request will be rejected with an error.",
                        "type": "boolean"
                      },
                      "isSnapshotSupported": {
                        "description": "whether supports snapshot",
                        "type": "boolean"
                      },
                      "keyFile": {
                        "description": "key content",
                        "format": "binary",
                        "type": "string"
                      },
                      "retryCount": {
                        "description": "maximum re-try count to download upgrade package. 0 means unlimited.",
                        "type": "integer"
                      },
                      "retryInterval": {
                        "description": "re-try interval in seconds to download upgrade package.",
                        "type": "integer"
                      },
                      "targetDiskName": {
                        "description": "partition to store upgrade file",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "allowOverCellular": true,
                        "caName": "ca.crt",
                        "certFileName": "client.crt",
                        "disks": [
                          {
                            "device": "/dev/root",
                            "free": 2856562688,
                            "mount": "/",
                            "name": "System",
                            "percent": 47.74261663447114,
                            "protect": 838860800,
                            "tags": {
                              "free": "systemDiskFree",
                              "percent": "systemDiskPercent",
                              "used": "systemDiskUsed"
                            },
                            "total": 5731123200,
                            "used": 2609770496
                          },
                          {
                            "device": "/dev/mmcblk0p1",
                            "free": 7423197184,
                            "mount": "/media/sd-mmcblk0p1",
                            "name": "SD1-1",
                            "percent": 6.752996575342466,
                            "protect": 0,
                            "tags": {
                              "free": "systemDiskFree",
                              "percent": "systemDiskPercent",
                              "used": "systemDiskUsed"
                            },
                            "total": 7960788992,
                            "used": 537591808
                          }
                        ],
                        "enableClientAuth": false,
                        "enableSnapshot": false,
                        "isSnapshotSupported": true,
                        "keyFileName": "client.key",
                        "retryCount": 3,
                        "retryInterval": 5,
                        "targetDiskName": "SD1-1"
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "allowOverCellular": {
                              "description": "allow upgrade over the cellular",
                              "type": "boolean"
                            },
                            "disks": {
                              "description": "disk list",
                              "items": {
                                "type": "object"
                              }
                            },
                            "enableClientAuth": {
                              "description": "use cert and key as X.509 client authentication",
                              "type": "boolean"
                            },
                            "enableSnapshot": {
                              "description": "do snapshot during upgrade. If the device doesn’t support snapshot feature (isSnapshotSupported), the request will be rejected with an error.",
                              "type": "boolean"
                            },
                            "isSnapshotSupported": {
                              "description": "whether supports snapshot",
                              "type": "boolean"
                            },
                            "retryCount": {
                              "description": "maximum re-try count to download upgrade package. 0 means unlimited.",
                              "type": "integer"
                            },
                            "retryInterval": {
                              "description": "re-try interval in seconds to download upgrade package.",
                              "type": "integer"
                            },
                            "targetDiskName": {
                              "description": "disk partition name to store upgrade file",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Set upgrade configuration",
            "tags": [
              "upgrade"
            ]
          }
        },
        "/upgrades": {
          "get": {
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "count": 2,
                      "data": [
                        {
                          "completedAt": null,
                          "completedTask": 0,
                          "createdAt": "2020-02-24T10:59:11.63206964+08:00",
                          "id": 1,
                          "isDeleted": false,
                          "lastState": "",
                          "owner": "system",
                          "parameter": {
                            "at": null,
                            "deleteFileAfterInstallComplete": true,
                            "download": true,
                            "id": null,
                            "install": false,
                            "snapshot": true,
                            "url": "http://10.144.48.106:10080/moxaics/v3/edge/builds/edge-core-update/develop/1106/update_2.0.0-1106-uc-8112a-me-iotedge_armhf.deb"
                          },
                          "pendingAt": null,
                          "startedAt": null,
                          "state": "created",
                          "tasks": [
                            {
                              "completedAt": null,
                              "id": 1,
                              "name": "update_2.0.0-1106-uc-8112a-me-iotedge_armhf.deb",
                              "progress": 0,
                              "startedAt": null,
                              "state": "created",
                              "totalSize": 213375528,
                              "type": "download"
                            }
                          ],
                          "totalTask": 1,
                          "triggerdAt": null
                        },
                        {
                          "completedAt": null,
                          "completedTask": 0,
                          "createdAt": "2020-02-24T10:59:14.67798968+08:00",
                          "id": 2,
                          "isDeleted": false,
                          "lastState": "",
                          "owner": "system",
                          "parameter": {
                            "at": null,
                            "deleteFileAfterInstallComplete": true,
                            "download": true,
                            "id": null,
                            "install": false,
                            "snapshot": true,
                            "url": "http://10.144.48.106:10080/moxaics/v3/edge/builds/edge-core-update/develop/1106/update_2.0.0-1106-uc-8112a-me-iotedge_armhf.deb"
                          },
                          "pendingAt": null,
                          "startedAt": null,
                          "state": "created",
                          "tasks": [
                            {
                              "completedAt": null,
                              "id": 2,
                              "name": "update_2.0.0-1106-uc-8112a-me-iotedge_armhf.deb",
                              "progress": 0,
                              "startedAt": null,
                              "state": "created",
                              "totalSize": 213375528,
                              "type": "download"
                            }
                          ],
                          "totalTask": 1,
                          "triggerdAt": null
                        }
                      ]
                    },
                    "schema": {
                      "properties": {
                        "count": {
                          "type": "integer"
                        },
                        "data": {
                          "properties": {
                            "completedAt": {
                              "format": "date-time",
                              "type": "string"
                            },
                            "completedTask": {
                              "type": "integer"
                            },
                            "createdAt": {
                              "format": "date-time",
                              "type": "string"
                            },
                            "errorMessage": {
                              "description": "appear when state is failed",
                              "type": "string"
                            },
                            "id": {
                              "type": "integer"
                            },
                            "isDeleted": {
                              "description": "is download file deleted?",
                              "type": "boolean"
                            },
                            "lastState": {
                              "description": "When suspended, lastState is the last active state",
                              "type": "string"
                            },
                            "owner": {
                              "description": "User whom creating this job",
                              "type": "string"
                            },
                            "parameter": {
                              "properties": {
                                "at": {
                                  "description": "Run the job periodically",
                                  "properties": {
                                    "day": {
                                      "type": "string"
                                    },
                                    "dayOfWeek": {
                                      "type": "string"
                                    },
                                    "hour": {
                                      "type": "string"
                                    },
                                    "minute": {
                                      "type": "string"
                                    },
                                    "month": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "deleteFileAfterInstallComplete": {
                                  "description": "Delete installation file after upgrade completed (default:true)",
                                  "type": "boolean"
                                },
                                "download": {
                                  "description": "Indicate to request download",
                                  "type": "boolean"
                                },
                                "file": {
                                  "description": "(form-data) file for Debian package",
                                  "type": "string"
                                },
                                "id": {
                                  "description": "Upgrade ID",
                                  "type": "integer"
                                },
                                "install": {
                                  "description": "Indicate to request install",
                                  "type": "boolean"
                                },
                                "snapshot": {
                                  "description": "Do snapshot when installation. If not set, it will apply by default configuration of `/system/upgrade`.",
                                  "type": "boolean"
                                },
                                "url": {
                                  "description": "URL to download",
                                  "type": "string"
                                }
                              }
                            },
                            "pendingAt": {
                              "format": "date-time",
                              "type": "string"
                            },
                            "startedAt": {
                              "format": "date-time",
                              "type": "string"
                            },
                            "state": {
                              "enum": [
                                "created",
                                "pending",
                                "running",
                                "succeed",
                                "failed",
                                "canceling",
                                "canceled",
                                "suppending",
                                "suppended",
                                "resuming"
                              ],
                              "type": "string"
                            },
                            "tasks": {
                              "items": {
                                "properties": {
                                  "completedAt": {
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "id": {
                                    "type": "integer"
                                  },
                                  "name": {
                                    "description": "task name",
                                    "type": "string"
                                  },
                                  "progress": {
                                    "description": "Progress in percentage",
                                    "maximum": 100,
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "speed": {
                                    "description": "download speed in KBps",
                                    "type": "integer"
                                  },
                                  "startedAt": {
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "state": {
                                    "enum": [
                                      "created",
                                      "pending",
                                      "running",
                                      "succeed",
                                      "failed",
                                      "canceling",
                                      "canceled",
                                      "suppending",
                                      "suppended",
                                      "resuming"
                                    ],
                                    "type": "string"
                                  },
                                  "totalSize": {
                                    "description": "file size in bytes",
                                    "type": "integer"
                                  },
                                  "type": {
                                    "enum": [
                                      "download",
                                      "install"
                                    ],
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "totalTask": {
                              "type": "integer"
                            },
                            "triggerAt": {
                              "description": "null if not set",
                              "format": "date-time",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Retrieve all upgrade jobs",
            "tags": [
              "upgrade"
            ]
          },
          "post": {
            "requestBody": {
              "content": {
                "application/json": {
                  "examples": {
                    "downloadAndInstall": {
                      "summary": "download and install immediately",
                      "value": {
                        "deleteFileAfterInstallComplete": true,
                        "install": true,
                        "url": "https://mxswdc2.s3-ap-northeast-1.amazonaws.com/v3/edge/builds/edge-core-update/release/iotedge/v1.1.0/275/package_1.1.0-275-uc-8112a-me_armhf.yaml"
                      }
                    },
                    "downloadOnly": {
                      "summary": "download only",
                      "value": {
                        "install": false,
                        "url": "https://mxswdc2.s3-ap-northeast-1.amazonaws.com/v3/edge/builds/edge-core-update/release/iotedge/v1.1.0/275/package_1.1.0-275-uc-8112a-me_armhf.yaml"
                      }
                    },
                    "installAtSpecifiedTime": {
                      "summary": "start to install at specified time",
                      "value": {
                        "at": {
                          "day": "*",
                          "dayOfWeek": "*",
                          "hour": "13",
                          "minute": "0",
                          "month": "*"
                        },
                        "id": 1
                      }
                    },
                    "installOnly": {
                      "summary": "install by upgrade ID",
                      "value": {
                        "id": 1
                      }
                    }
                  },
                  "schema": {
                    "properties": {
                      "at": {
                        "description": "Run the job periodically",
                        "properties": {
                          "day": {
                            "type": "string"
                          },
                          "dayOfWeek": {
                            "type": "string"
                          },
                          "hour": {
                            "type": "string"
                          },
                          "minute": {
                            "type": "string"
                          },
                          "month": {
                            "type": "string"
                          }
                        }
                      },
                      "deleteFileAfterInstallComplete": {
                        "description": "Delete installation file after upgrade completed (default:true)",
                        "type": "boolean"
                      },
                      "download": {
                        "description": "Indicate to request download",
                        "type": "boolean"
                      },
                      "file": {
                        "description": "(form-data) file for Debian package",
                        "type": "string"
                      },
                      "id": {
                        "description": "Upgrade ID",
                        "type": "integer"
                      },
                      "install": {
                        "description": "Indicate to request install",
                        "type": "boolean"
                      },
                      "snapshot": {
                        "description": "Do snapshot when installation. If not set, it will apply by default configuration of `/system/upgrade`.",
                        "type": "boolean"
                      },
                      "url": {
                        "description": "URL to download",
                        "type": "string"
                      }
                    }
                  }
                },
                "multipart/form-data": {
                  "schema": {
                    "properties": {
                      "at": {
                        "description": "Run the job periodically",
                        "properties": {
                          "day": {
                            "type": "string"
                          },
                          "dayOfWeek": {
                            "type": "string"
                          },
                          "hour": {
                            "type": "string"
                          },
                          "minute": {
                            "type": "string"
                          },
                          "month": {
                            "type": "string"
                          }
                        }
                      },
                      "deleteFileAfterInstallComplete": {
                        "description": "Delete installation file after upgrade completed (default:true)",
                        "type": "boolean"
                      },
                      "download": {
                        "description": "Indicate to request download",
                        "type": "boolean"
                      },
                      "file": {
                        "description": "(form-data) file for Debian package",
                        "type": "string"
                      },
                      "id": {
                        "description": "Upgrade ID",
                        "type": "integer"
                      },
                      "install": {
                        "description": "Indicate to request install",
                        "type": "boolean"
                      },
                      "snapshot": {
                        "description": "Do snapshot when installation. If not set, it will apply by default configuration of `/system/upgrade`.",
                        "type": "boolean"
                      },
                      "url": {
                        "description": "URL to download",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "completedAt": null,
                        "completedTask": 0,
                        "createdAt": "2020-02-24T10:57:38.28929348+08:00",
                        "id": 12,
                        "isDeleted": false,
                        "lastState": "",
                        "owner": "system",
                        "parameter": {
                          "at": null,
                          "deleteFileAfterInstallComplete": true,
                          "download": true,
                          "id": null,
                          "install": false,
                          "snapshot": true,
                          "url": "http://10.144.48.106:10080/moxaics/v3/edge/builds/edge-core-update/develop/1106/update_2.0.0-1106-uc-8112a-me-iotedge_armhf.deb"
                        },
                        "pendingAt": null,
                        "startedAt": null,
                        "state": "created",
                        "tasks": [
                          {
                            "completedAt": null,
                            "id": 57,
                            "name": "update_2.0.0-1106-uc-8112a-me-iotedge_armhf.deb",
                            "progress": 0,
                            "startedAt": null,
                            "state": "created",
                            "totalSize": 213375528,
                            "type": "download"
                          }
                        ],
                        "totalTask": 1,
                        "triggerdAt": null
                      }
                    }
                  }
                },
                "description": "success"
              },
              "400": {
                "description": "unsupported file format"
              }
            },
            "summary": "Create upgrade job",
            "tags": [
              "upgrade"
            ]
          }
        },
        "/upgrades/{id}": {
          "delete": {
            "responses": {
              "204": {
                "description": "success"
              },
              "400": {
                "description": "file had been deleted"
              },
              "404": {
                "description": "job not found"
              }
            },
            "summary": "Delete upgrade job",
            "tags": [
              "upgrade"
            ]
          },
          "get": {
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "examples": {
                      "canceled": {
                        "summary": "canceled job",
                        "value": {
                          "data": {
                            "completedAt": "2020-02-24T10:54:27.16629856+08:00",
                            "completedTask": 0,
                            "createdAt": "2020-02-24T10:51:17.57571124+08:00",
                            "id": 9,
                            "isDeleted": false,
                            "lastState": "running",
                            "owner": "system",
                            "parameter": {
                              "at": null,
                              "deleteFileAfterInstallComplete": true,
                              "download": true,
                              "id": null,
                              "install": false,
                              "snapshot": true,
                              "url": "http://10.144.48.106:10080/moxaics/v3/edge/builds/edge-core-update/develop/1106/update_2.0.0-1106-uc-8112a-me-iotedge_armhf.deb"
                            },
                            "pendingAt": "2020-02-24T10:51:23.4746076+08:00",
                            "startedAt": "2020-02-24T10:51:23.50617604+08:00",
                            "state": "canceled",
                            "tasks": [
                              {
                                "completedAt": "2020-02-24T10:54:27.05335256+08:00",
                                "id": 54,
                                "name": "update_2.0.0-1106-uc-8112a-me-iotedge_armhf.deb",
                                "progress": 2,
                                "speed": 3670,
                                "startedAt": "2020-02-24T10:51:23.57414428+08:00",
                                "state": "canceled",
                                "totalSize": 213375528,
                                "type": "download"
                              }
                            ],
                            "totalTask": 1,
                            "triggerdAt": null
                          }
                        }
                      },
                      "completed": {
                        "summary": "completed installation",
                        "value": {
                          "data": {
                            "completedAt": "2020-02-18T16:40:20.3056944+08:00",
                            "completedTask": 12,
                            "createdAt": "2020-02-18T16:21:13.64273504+08:00",
                            "id": 6,
                            "isDeleted": true,
                            "lastState": "",
                            "owner": "system",
                            "parameter": {
                              "at": null,
                              "deleteFileAfterInstallComplete": true,
                              "download": true,
                              "id": null,
                              "install": true,
                              "snapshot": false,
                              "url": "http://10.144.48.106:10080/moxaics/v3/edge/builds/edge-core-update/develop/1076/update_2.0.0-1076-uc-8112a-me-iotedge_armhf.deb"
                            },
                            "pendingAt": "2020-02-18T16:23:42.3504006+08:00",
                            "startedAt": "2020-02-18T16:23:42.3849478+08:00",
                            "state": "succeed",
                            "tasks": [
                              {
                                "completedAt": "2020-02-18T16:26:44.6263696+08:00",
                                "id": 38,
                                "name": "update_2.0.0-1076-uc-8112a-me-iotedge_armhf.deb",
                                "progress": 100,
                                "speed": 1215,
                                "startedAt": "2020-02-18T16:23:42.96726164+08:00",
                                "state": "succeed",
                                "totalSize": 214501856,
                                "type": "download"
                              },
                              {
                                "completedAt": "2020-02-18T16:28:24.18937284+08:00",
                                "id": 39,
                                "name": "system-agent",
                                "progress": 100,
                                "startedAt": "2020-02-18T16:28:14.46062504+08:00",
                                "state": "succeed",
                                "type": "install"
                              },
                              {
                                "completedAt": "2020-02-18T16:28:33.6286498+08:00",
                                "id": 40,
                                "name": "moby",
                                "progress": 100,
                                "startedAt": "2020-02-18T16:28:24.21569+08:00",
                                "state": "succeed",
                                "type": "install"
                              },
                              {
                                "completedAt": "2020-02-18T16:29:32.1599818+08:00",
                                "id": 41,
                                "name": "iotedge",
                                "progress": 100,
                                "startedAt": "2020-02-18T16:28:33.77385288+08:00",
                                "state": "succeed",
                                "type": "install"
                              },
                              {
                                "completedAt": "2020-02-18T16:30:30.087283+08:00",
                                "id": 42,
                                "name": "appman",
                                "progress": 100,
                                "startedAt": "2020-02-18T16:29:32.19470184+08:00",
                                "state": "succeed",
                                "type": "install"
                              },
                              {
                                "completedAt": "2020-02-18T16:33:02.24707172+08:00",
                                "id": 43,
                                "name": "tagservice",
                                "progress": 100,
                                "startedAt": "2020-02-18T16:30:30.10365956+08:00",
                                "state": "succeed",
                                "type": "install"
                              },
                              {
                                "completedAt": "2020-02-18T16:33:03.41367912+08:00",
                                "id": 44,
                                "name": "edge-web",
                                "progress": 100,
                                "startedAt": "2020-02-18T16:33:02.26589584+08:00",
                                "state": "succeed",
                                "type": "install"
                              },
                              {
                                "completedAt": "2020-02-18T16:35:32.08494868+08:00",
                                "id": 45,
                                "name": "device",
                                "progress": 100,
                                "startedAt": "2020-02-18T16:33:03.4314002+08:00",
                                "state": "succeed",
                                "type": "install"
                              },
                              {
                                "completedAt": "2020-02-18T16:36:42.0024222+08:00",
                                "id": 46,
                                "name": "modbusmaster",
                                "progress": 100,
                                "startedAt": "2020-02-18T16:35:32.10108564+08:00",
                                "state": "succeed",
                                "type": "install"
                              },
                              {
                                "completedAt": "2020-02-18T16:39:54.1495638+08:00",
                                "id": 47,
                                "name": "cloud",
                                "progress": 100,
                                "startedAt": "2020-02-18T16:36:42.03298536+08:00",
                                "state": "succeed",
                                "type": "install"
                              },
                              {
                                "completedAt": "2020-02-18T16:39:56.68418872+08:00",
                                "id": 48,
                                "name": "device-configuration",
                                "progress": 100,
                                "startedAt": "2020-02-18T16:39:54.17269196+08:00",
                                "state": "succeed",
                                "type": "install"
                              },
                              {
                                "completedAt": "2020-02-18T16:40:18.75193924+08:00",
                                "id": 49,
                                "name": "complete-installation",
                                "progress": 100,
                                "startedAt": "2020-02-18T16:40:15.5685226+08:00",
                                "state": "succeed",
                                "type": "install"
                              }
                            ],
                            "totalTask": 12,
                            "triggerdAt": null
                          }
                        }
                      },
                      "running": {
                        "summary": "running installation",
                        "value": {
                          "data": {
                            "completedAt": null,
                            "completedTask": 0,
                            "createdAt": "2020-02-24T10:51:17.57571124+08:00",
                            "id": 9,
                            "isDeleted": false,
                            "lastState": "",
                            "owner": "system",
                            "parameter": {
                              "at": null,
                              "deleteFileAfterInstallComplete": true,
                              "download": true,
                              "id": null,
                              "install": false,
                              "snapshot": true,
                              "url": "http://10.144.48.106:10080/moxaics/v3/edge/builds/edge-core-update/develop/1106/update_2.0.0-1106-uc-8112a-me-iotedge_armhf.deb"
                            },
                            "pendingAt": "2020-02-24T10:51:23.4746076+08:00",
                            "startedAt": "2020-02-24T10:51:23.50617604+08:00",
                            "state": "running",
                            "tasks": [
                              {
                                "completedAt": null,
                                "id": 54,
                                "name": "update_2.0.0-1106-uc-8112a-me-iotedge_armhf.deb",
                                "progress": 0,
                                "startedAt": "2020-02-24T10:51:23.57414428+08:00",
                                "state": "running",
                                "totalSize": 213375528,
                                "type": "download"
                              }
                            ],
                            "totalTask": 1,
                            "triggerdAt": null
                          }
                        }
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "completedAt": {
                              "format": "date-time",
                              "type": "string"
                            },
                            "completedTask": {
                              "type": "integer"
                            },
                            "createdAt": {
                              "format": "date-time",
                              "type": "string"
                            },
                            "errorMessage": {
                              "description": "appear when state is failed",
                              "type": "string"
                            },
                            "id": {
                              "type": "integer"
                            },
                            "isDeleted": {
                              "description": "is download file deleted?",
                              "type": "boolean"
                            },
                            "lastState": {
                              "description": "When suspended, lastState is the last active state",
                              "type": "string"
                            },
                            "owner": {
                              "description": "User whom creating this job",
                              "type": "string"
                            },
                            "parameter": {
                              "properties": {
                                "at": {
                                  "description": "Run the job periodically",
                                  "properties": {
                                    "day": {
                                      "type": "string"
                                    },
                                    "dayOfWeek": {
                                      "type": "string"
                                    },
                                    "hour": {
                                      "type": "string"
                                    },
                                    "minute": {
                                      "type": "string"
                                    },
                                    "month": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "deleteFileAfterInstallComplete": {
                                  "description": "Delete installation file after upgrade completed (default:true)",
                                  "type": "boolean"
                                },
                                "download": {
                                  "description": "Indicate to request download",
                                  "type": "boolean"
                                },
                                "file": {
                                  "description": "(form-data) file for Debian package",
                                  "type": "string"
                                },
                                "id": {
                                  "description": "Upgrade ID",
                                  "type": "integer"
                                },
                                "install": {
                                  "description": "Indicate to request install",
                                  "type": "boolean"
                                },
                                "snapshot": {
                                  "description": "Do snapshot when installation. If not set, it will apply by default configuration of `/system/upgrade`.",
                                  "type": "boolean"
                                },
                                "url": {
                                  "description": "URL to download",
                                  "type": "string"
                                }
                              }
                            },
                            "pendingAt": {
                              "format": "date-time",
                              "type": "string"
                            },
                            "startedAt": {
                              "format": "date-time",
                              "type": "string"
                            },
                            "state": {
                              "enum": [
                                "created",
                                "pending",
                                "running",
                                "succeed",
                                "failed",
                                "canceling",
                                "canceled",
                                "suppending",
                                "suppended",
                                "resuming"
                              ],
                              "type": "string"
                            },
                            "tasks": {
                              "items": {
                                "properties": {
                                  "completedAt": {
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "id": {
                                    "type": "integer"
                                  },
                                  "name": {
                                    "description": "task name",
                                    "type": "string"
                                  },
                                  "progress": {
                                    "description": "Progress in percentage",
                                    "maximum": 100,
                                    "minimum": 0,
                                    "type": "integer"
                                  },
                                  "speed": {
                                    "description": "download speed in KBps",
                                    "type": "integer"
                                  },
                                  "startedAt": {
                                    "format": "date-time",
                                    "type": "string"
                                  },
                                  "state": {
                                    "enum": [
                                      "created",
                                      "pending",
                                      "running",
                                      "succeed",
                                      "failed",
                                      "canceling",
                                      "canceled",
                                      "suppending",
                                      "suppended",
                                      "resuming"
                                    ],
                                    "type": "string"
                                  },
                                  "totalSize": {
                                    "description": "file size in bytes",
                                    "type": "integer"
                                  },
                                  "type": {
                                    "enum": [
                                      "download",
                                      "install"
                                    ],
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "totalTask": {
                              "type": "integer"
                            },
                            "triggerAt": {
                              "description": "null if not set",
                              "format": "date-time",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Find upgrade job by ID",
            "tags": [
              "upgrade"
            ]
          },
          "parameters": [
            {
              "description": "ID of upgrade job",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ]
        },
        "/upgrades/{id}/{action}": {
          "put": {
            "parameters": [
              {
                "description": "id of upgrade pack",
                "in": "path",
                "name": "id",
                "required": true,
                "schema": {
                  "type": "integer"
                }
              },
              {
                "description": "id of upgrade pack",
                "in": "path",
                "name": "action",
                "required": true,
                "schema": {
                  "enum": [
                    "start",
                    "cancel",
                    "suspend",
                    "resume"
                  ],
                  "type": "string"
                }
              },
              {
                "description": "Delete upgrade file after upgrade completed (default:true)",
                "in": "path",
                "name": "deleteFileAfterInstallComplete",
                "required": true,
                "schema": {
                  "type": "boolean"
                }
              }
            ],
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "completedAt": "2020-02-24T11:00:28.75763008+08:00",
                        "completedTask": 0,
                        "createdAt": "2020-02-24T10:59:11.63206964+08:00",
                        "id": 1,
                        "isDeleted": false,
                        "lastState": "running",
                        "owner": "system",
                        "parameter": {
                          "at": null,
                          "deleteFileAfterInstallComplete": true,
                          "download": true,
                          "id": null,
                          "install": false,
                          "snapshot": true,
                          "url": "http://10.144.48.106:10080/moxaics/v3/edge/builds/edge-core-update/develop/1106/update_2.0.0-1106-uc-8112a-me-iotedge_armhf.deb"
                        },
                        "pendingAt": "2020-02-24T11:00:12.61542208+08:00",
                        "startedAt": "2020-02-24T11:00:12.63342556+08:00",
                        "state": "canceled",
                        "tasks": [
                          {
                            "completedAt": "2020-02-24T11:00:28.72362264+08:00",
                            "id": 1,
                            "name": "update_2.0.0-1106-uc-8112a-me-iotedge_armhf.deb",
                            "progress": 0,
                            "startedAt": "2020-02-24T11:00:12.78006724+08:00",
                            "state": "canceled",
                            "totalSize": 213375528,
                            "type": "download"
                          }
                        ],
                        "totalTask": 1,
                        "triggerdAt": null
                      }
                    }
                  }
                },
                "description": "success"
              },
              "400": {
                "description": "state is not allowed to change"
              }
            },
            "summary": "Operate the upgrade",
            "tags": [
              "upgrade"
            ]
          }
        },
        "/users": {
          "get": {
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "count": 1,
                      "data": [
                        {
                          "changedPasswordAt": null,
                          "createdAt": "2019-09-24T05:52:28.912234779Z",
                          "email": null,
                          "expiredAfter": null,
                          "id": 1,
                          "isActive": true,
                          "loginAt": "0001-01-01T00:00:00Z",
                          "name": "admin",
                          "permissions": [
                            "SYS_MAINTENANCE_RW",
                            "SYS_USER_RW"
                          ],
                          "roles": [
                            {
                              "id": 1,
                              "name": "Administrator"
                            }
                          ]
                        }
                      ]
                    },
                    "schema": {
                      "properties": {
                        "count": {
                          "type": "integer"
                        },
                        "data": {
                          "$ref": "#/components/schemas/Users"
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Query users",
            "tags": [
              "users"
            ]
          },
          "post": {
            "requestBody": {
              "content": {
                "application/json": {
                  "example": {
                    "expiredAfter": "2023-01-31T16:00:00.000Z",
                    "isActive": true,
                    "name": "myuser",
                    "password": "moxa1234",
                    "roles": [
                      {
                        "id": 1
                      }
                    ]
                  },
                  "schema": {
                    "properties": {
                      "email": {
                        "type": "string"
                      },
                      "expiredAfter": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "isActive": {
                        "type": "boolean"
                      },
                      "name": {
                        "type": "string"
                      },
                      "password": {
                        "description": "at least 6 characters",
                        "type": "string"
                      },
                      "roles": {
                        "items": {
                          "description": "ID of role",
                          "type": "integer"
                        }
                      }
                    },
                    "required": [
                      "name",
                      "password",
                      "roles",
                      "isActive",
                      "expiredAfter"
                    ]
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "changedPasswordAt": null,
                        "createdAt": "2019-09-24T05:52:28.912234779Z",
                        "email": null,
                        "expiredAfter": null,
                        "id": 3,
                        "isActive": true,
                        "loginAt": "0001-01-01T00:00:00Z",
                        "name": "myuser",
                        "permissions": [
                          "SYS_MAINTENANCE_RW",
                          "SYS_USER_RW"
                        ],
                        "roles": [
                          {
                            "id": 1,
                            "name": "Administrator"
                          }
                        ]
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Add user",
            "tags": [
              "users"
            ]
          }
        },
        "/users/{id}": {
          "delete": {
            "parameters": [
              {
                "description": "ID of user",
                "in": "path",
                "name": "id",
                "required": true,
                "schema": {
                  "type": "integer"
                }
              }
            ],
            "responses": {
              "204": {
                "description": "success"
              }
            },
            "summary": "Delete user by ID",
            "tags": [
              "users"
            ]
          },
          "get": {
            "parameters": [
              {
                "description": "ID of user",
                "in": "path",
                "name": "id",
                "required": true,
                "schema": {
                  "type": "integer"
                }
              }
            ],
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "changedPasswordAt": null,
                        "createdAt": "2019-09-24T05:52:28.912234779Z",
                        "email": null,
                        "expiredAfter": null,
                        "id": 3,
                        "isActive": true,
                        "loginAt": "0001-01-01T00:00:00Z",
                        "name": "myuser",
                        "permissions": [
                          "SYS_MAINTENANCE_RW",
                          "SYS_USER_RW"
                        ],
                        "roles": [
                          {
                            "id": 1,
                            "name": "Administrator"
                          }
                        ]
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  }
                },
                "description": "success"
              },
              "400": {
                "description": "bad request"
              },
              "403": {
                "description": "user without Administrator role can not access this API"
              }
            },
            "summary": "Query user by ID",
            "tags": [
              "users"
            ]
          },
          "put": {
            "parameters": [
              {
                "description": "ID of user",
                "in": "path",
                "name": "id",
                "required": true,
                "schema": {
                  "type": "integer"
                }
              }
            ],
            "requestBody": {
              "content": {
                "application/json": {
                  "example": {
                    "email": "aa@aaa.aaa",
                    "expiredAfter": null,
                    "isActive": true,
                    "roles": [
                      {
                        "id": 1
                      }
                    ]
                  },
                  "schema": {
                    "properties": {
                      "email": {
                        "type": "string"
                      },
                      "expiredAfter": {
                        "format": "date-time",
                        "type": "string"
                      },
                      "isActive": {
                        "type": "boolean"
                      },
                      "roles": {
                        "items": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "changedPasswordAt": null,
                        "createdAt": "2019-09-24T05:52:28.912234779Z",
                        "email": null,
                        "expiredAfter": null,
                        "id": 3,
                        "isActive": true,
                        "loginAt": "0001-01-01T00:00:00Z",
                        "name": "myuser",
                        "permissions": [
                          "SYS_MAINTENANCE_RW",
                          "SYS_USER_RW"
                        ],
                        "roles": [
                          {
                            "id": 1,
                            "name": "Administrator"
                          }
                        ]
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  }
                },
                "description": "success"
              },
              "400": {
                "description": "bad request"
              },
              "403": {
                "description": "user without Administrator role can not access this API"
              }
            },
            "summary": "Update user by ID",
            "tags": [
              "users"
            ]
          }
        },
        "/users/{id}/password": {
          "put": {
            "parameters": [
              {
                "description": "ID of user",
                "in": "path",
                "name": "id",
                "required": true,
                "schema": {
                  "type": "integer"
                }
              }
            ],
            "requestBody": {
              "content": {
                "application/json": {
                  "example": {
                    "newPassword": "123456"
                  },
                  "schema": {
                    "properties": {
                      "newPassword": {
                        "type": "string"
                      },
                      "oldPassword": {
                        "description": "user with admin role do not need pass oldPassword",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "changedPasswordAt": null,
                        "createdAt": "2019-09-24T05:52:28.912234779Z",
                        "email": null,
                        "expiredAfter": null,
                        "id": 3,
                        "isActive": true,
                        "loginAt": "0001-01-01T00:00:00Z",
                        "name": "myuser",
                        "permissions": [
                          "SYS_MAINTENANCE_RW",
                          "SYS_USER_RW"
                        ],
                        "roles": [
                          {
                            "id": 1,
                            "name": "Administrator"
                          }
                        ]
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  }
                },
                "description": "success"
              },
              "400": {
                "description": "bad request"
              },
              "403": {
                "description": "user without Administrator role can not access this API"
              }
            },
            "summary": "Update user's password by ID",
            "tags": [
              "users"
            ]
          }
        },
        "/users/me": {
          "get": {
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "changedPasswordAt": null,
                        "createdAt": "2019-09-24T05:52:28.912234779Z",
                        "email": null,
                        "expiredAfter": null,
                        "id": 3,
                        "isActive": true,
                        "loginAt": "0001-01-01T00:00:00Z",
                        "name": "myuser",
                        "permissions": [
                          "SYS_MAINTENANCE_RW",
                          "SYS_USER_RW"
                        ],
                        "remindToChangePassword": null,
                        "roles": [
                          {
                            "id": 1,
                            "name": "Administrator"
                          }
                        ]
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Query who I am",
            "tags": [
              "users"
            ]
          },
          "put": {
            "requestBody": {
              "content": {
                "application/json": {
                  "example": {
                    "email": "aa@aaa.aaa",
                    "expiredAfter": "2023-01-31T16:00:00.000Z",
                    "isActive": true,
                    "roles": [
                      {
                        "id": 1
                      }
                    ]
                  },
                  "schema": {
                    "properties": {
                      "email": {
                        "type": "string"
                      },
                      "expiredAfter": {
                        "type": "string"
                      },
                      "isActive": {
                        "type": "boolean"
                      },
                      "roles": {
                        "items": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "changedPasswordAt": null,
                        "createdAt": "2019-09-24T05:52:28.912234779Z",
                        "email": null,
                        "expiredAfter": null,
                        "id": 3,
                        "isActive": true,
                        "loginAt": "0001-01-01T00:00:00Z",
                        "name": "myuser",
                        "permissions": [
                          "SYS_MAINTENANCE_RW",
                          "SYS_USER_RW"
                        ],
                        "roles": [
                          {
                            "id": 1,
                            "name": "Administrator"
                          }
                        ]
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Update current user's information",
            "tags": [
              "users"
            ]
          }
        },
        "/users/me/password": {
          "put": {
            "requestBody": {
              "content": {
                "application/json": {
                  "example": {
                    "newPassword": "123456",
                    "oldPassword": "moxa1234"
                  },
                  "schema": {
                    "properties": {
                      "newPassword": {
                        "type": "string"
                      },
                      "oldPassword": {
                        "description": "user with admin role do not need pass oldPassword",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "changedPasswordAt": null,
                        "createdAt": "2019-09-24T05:52:28.912234779Z",
                        "email": null,
                        "expiredAfter": null,
                        "id": 3,
                        "isActive": true,
                        "loginAt": "0001-01-01T00:00:00Z",
                        "name": "myuser",
                        "permissions": [
                          "SYS_MAINTENANCE_RW",
                          "SYS_USER_RW"
                        ],
                        "roles": [
                          {
                            "id": 1,
                            "name": "Administrator"
                          }
                        ]
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  }
                },
                "description": "success"
              }
            },
            "summary": "Update current user's password",
            "tags": [
              "users"
            ]
          }
        }
      },
      "security": [
        {
          "bearerAuth": []
        }
      ],
      "servers": [
        {
          "url": "http://127.0.0.1/api/v1"
        }
      ],
      "tags": [
        {
          "name": "systems"
        },
        {
          "name": "users"
        },
        {
          "name": "authentication"
        },
        {
          "name": "event"
        },
        {
          "name": "apps"
        },
        {
          "name": "job"
        },
        {
          "name": "upgrade"
        }
      ]
    },
    "plugin-redoc-1": {
      "openapi": "3.0.0",
      "info": {
        "version": "2.2.0",
        "title": "ThingsPro Cloud APIs",
        "description": "ThingsPro Cloud APIs"
      },
      "components": {
        "securitySchemes": {
          "bearerAuth": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT"
          }
        },
        "examples": {
          "byInterval-allValues": {
            "value": {
              "id": 1,
              "enable": true,
              "description": "my message group",
              "outputTopic": "sample",
              "properties": [],
              "onChange": false,
              "minPublishInterval": 0,
              "samplingMode": "allValues",
              "customSamplingRate": false,
              "tags": {
                "modbus": {
                  "myDevice1": [
                    "di0",
                    "di1"
                  ]
                }
              },
              "pollingInterval": 0,
              "sendOutThreshold": {
                "mode": "byTime",
                "time": 60
              }
            }
          },
          "byInterval-latestValues": {
            "value": {
              "id": 1,
              "enable": true,
              "description": "my message group",
              "outputTopic": "sample",
              "properties": [],
              "onChange": false,
              "minPublishInterval": 0,
              "samplingMode": "latestValues",
              "customSamplingRate": false,
              "tags": {
                "modbus": {
                  "myDevice1": [
                    "di0",
                    "di1"
                  ]
                }
              },
              "pollingInterval": 0,
              "sendOutThreshold": {
                "mode": "byTime",
                "time": 60
              }
            }
          },
          "byInterval-allChangedValues": {
            "value": {
              "id": 1,
              "enable": true,
              "description": "my message group",
              "outputTopic": "sample",
              "properties": [],
              "onChange": true,
              "minPublishInterval": 0,
              "samplingMode": "allChangedValues",
              "customSamplingRate": false,
              "tags": {
                "modbus": {
                  "myDevice1": [
                    "di0",
                    "di1"
                  ]
                }
              },
              "pollingInterval": 0,
              "sendOutThreshold": {
                "mode": "byTime",
                "time": 60
              }
            }
          },
          "byInterval-latestChangedValues": {
            "value": {
              "id": 1,
              "enable": true,
              "description": "my message group",
              "outputTopic": "sample",
              "properties": [],
              "onChange": true,
              "minPublishInterval": 0,
              "samplingMode": "latestChangedValues",
              "customSamplingRate": false,
              "tags": {
                "modbus": {
                  "myDevice1": [
                    "di0",
                    "di1"
                  ]
                }
              },
              "pollingInterval": 0,
              "sendOutThreshold": {
                "mode": "byTime",
                "time": 60
              }
            }
          },
          "byInterval-custom": {
            "value": {
              "id": 1,
              "enable": true,
              "description": "my message group",
              "outputTopic": "sample",
              "properties": [],
              "onChange": true,
              "minPublishInterval": 0,
              "samplingMode": "allValues",
              "customSamplingRate": true,
              "tags": {
                "modbus": {
                  "myDevice1": [
                    "di0",
                    "di1"
                  ]
                }
              },
              "pollingInterval": 51,
              "sendOutThreshold": {
                "mode": "byTime",
                "time": 60
              }
            }
          },
          "immediately-onchange": {
            "value": {
              "id": 1,
              "enable": true,
              "description": "my message group",
              "outputTopic": "sample",
              "properties": [],
              "onChange": true,
              "minPublishInterval": 0,
              "samplingMode": "allValues",
              "customSamplingRate": false,
              "tags": {
                "modbus": {
                  "myDevice1": [
                    "di0",
                    "di1"
                  ]
                }
              },
              "pollingInterval": 0,
              "sendOutThreshold": {
                "mode": "immediately"
              }
            }
          },
          "bySize-enable-idle-timer": {
            "value": {
              "id": 1,
              "enable": true,
              "description": "my message group",
              "outputTopic": "sample",
              "properties": [],
              "onChange": true,
              "minPublishInterval": 0,
              "samplingMode": "allValues",
              "customSamplingRate": false,
              "tags": {
                "modbus": {
                  "myDevice1": [
                    "di0",
                    "di1"
                  ]
                }
              },
              "pollingInterval": 0,
              "sendOutThreshold": {
                "mode": "bySize",
                "size": 4096,
                "sizeIdleTimer": {
                  "enable": true,
                  "time": 60
                }
              }
            }
          },
          "bySize-disable-idle-timer": {
            "value": {
              "id": 1,
              "enable": true,
              "description": "my message group",
              "outputTopic": "sample",
              "properties": [],
              "onChange": true,
              "minPublishInterval": 0,
              "samplingMode": "allValues",
              "customSamplingRate": false,
              "tags": {
                "modbus": {
                  "myDevice1": [
                    "di0",
                    "di1"
                  ]
                }
              },
              "pollingInterval": 0,
              "sendOutThreshold": {
                "mode": "bySize",
                "size": 4096,
                "sizeIdleTimer": {
                  "enable": false
                }
              }
            }
          }
        },
        "schemas": {
          "MQTTConfiguration": {
            "title": "MQTT client configuration",
            "required": [
              "server",
              "port"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true
              },
              "enable": {
                "type": "boolean",
                "default": false
              },
              "status": {
                "type": "string",
                "enum": [
                  "disconnect",
                  "connecting",
                  "connectFailure",
                  "connected"
                ],
                "readOnly": true
              },
              "protocolVersion": {
                "type": "string",
                "description": "MQTT protocol version",
                "default": "3.1.1",
                "enum": [
                  3.1,
                  "3.1.1"
                ]
              },
              "server": {
                "type": "string",
                "description": "MQTT server(broker) ip or url"
              },
              "port": {
                "type": "integer"
              },
              "keepAliveSec": {
                "type": "integer",
                "default": 60,
                "minimum": 10,
                "maximum": 65536
              },
              "handshakeTimeout": {
                "type": "integer",
                "default": 10,
                "minimum": 10,
                "maximum": 600
              },
              "retryInterval": {
                "type": "integer",
                "default": 60,
                "minimum": 10,
                "maximum": 3600
              },
              "clearSession": {
                "type": "boolean",
                "default": true
              },
              "certificateOverTLS": {
                "type": "boolean",
                "default": false
              },
              "clientID": {
                "type": "string",
                "description": "Max length: 65536 in V3.1.1, 23 in V3.1"
              },
              "userName": {
                "type": "string",
                "maxLength": 255
              },
              "password": {
                "type": "string",
                "maxLength": 255
              },
              "tlsVersion": {
                "type": "string",
                "default": 1.2,
                "enum": [
                  1.3,
                  1.2,
                  1.1,
                  1
                ]
              },
              "insecureSkipVerify": {
                "type": "boolean",
                "default": false
              },
              "certificate": {
                "properties": {
                  "rootCaCertFile": {
                    "type": "string"
                  },
                  "caCertFile": {
                    "type": "string"
                  },
                  "caPkFile": {
                    "type": "string"
                  }
                }
              },
              "qos": {
                "type": "integer",
                "description": "support qos 0,1,2",
                "default": 1
              },
              "retain": {
                "type": "boolean",
                "default": false
              },
              "willMessage": {
                "properties": {
                  "enable": {
                    "type": "boolean",
                    "default": false
                  },
                  "topic": {
                    "description": "refer: http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718106",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 65536
                  },
                  "message": {
                    "type": "string"
                  },
                  "qos": {
                    "type": "integer"
                  },
                  "retain": {
                    "type": "boolean"
                  }
                }
              },
              "remoteAPI": {
                "description": "- ThingsPro Edge REST API invocation(request/response patten)\n- required headers:\n-  * request-expired-time: UTC\n-  * request-id: int string\n-  * example:\n      ```\n      # request\n      mosquitto_pub -t '/devices/1/request' \\\n         -m '{\"path\":\"/system/sshserver\",\"method\":\"PUT\",\"headers\":[{\"request-expired-time\":\"2020-11-12 11:45:26\"},{\"request-id\":\"1\"}],\"requestBody\":{\"enable\":true,\"port\":22}}'\n      # response, subscribe topic '/devices/1/response'\n      {\"request-id\":\"1\",\"state\":200,\"payload\":\"{\\\"data\\\":{\\\"type\\\":\\\"general\\\",\\\"description\\\":\\\"1\\\",\\\"hostName\\\":\\\"Moxa\\\",\\\"modelName\\\":\\\"UC-8100A-ME-T-LX\\\",\\\"deviceType\\\":\\\"gateway\\\",\\\"serialNumber\\\":\\\"TAICB1046773\\\",\\\"firmwareVersion\\\":\\\"1.3.1\\\",\\\"thingsproVersion\\\":\\\"1.1.0-594\\\",\\\"cpu\\\":\\\"ARMv7Processorrev2(v7l)\\\",\\\"memorySize\\\":1055838208,\\\"disk\\\":[{\\\"name\\\":\\\"System\\\",\\\"mount\\\":\\\"/\\\",\\\"device\\\":\\\"/dev/root\\\",\\\"total\\\":6827344896,\\\"free\\\":4880628736,\\\"used\\\":1659873280,\\\"percent\\\":25.37837731628948,\\\"tags\\\":{\\\"used\\\":\\\"systemDiskUsed\\\",\\\"free\\\":\\\"systemDiskFree\\\",\\\"percent\\\":\\\"systemDiskPercent\\\"}}],\\\"lastBootTime\\\":\\\"2019-12-20T11:31:20+08:00\\\"}}\"}\n      ```\n",
                "properties": {
                  "enable": {
                    "type": "boolean",
                    "default": false
                  },
                  "requestSubTopic": {
                    "description": "refer: http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718106",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 65536
                  },
                  "responsePubTopic": {
                    "description": "refer: http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718106",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 65536
                  },
                  "qos": {
                    "default": 1,
                    "type": "integer"
                  },
                  "retain": {
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            },
            "example": {
              "id": 1,
              "enable": true,
              "status": "connected",
              "protocolVersion": "3.1.1",
              "server": "127.0.0.1",
              "port": 1883,
              "keepAliveSec": 60,
              "handshakeTimeout": 10,
              "retryInterval": 60,
              "clearSession": true,
              "certificateOverTLS": false,
              "clientID": "mydevice1",
              "userName": "moxa",
              "password": "123",
              "tlsVersion": "1.2",
              "insecureSkipVerify": false,
              "certificate": {
                "rootCaCertFile": "",
                "caCertFile": "",
                "caPkFile": ""
              },
              "qos": 1,
              "retain": false,
              "willMessage": {
                "enable": true,
                "topic": "/devices/1/will",
                "message": "dead",
                "qos": 1,
                "retain": true
              },
              "remoteAPI": {
                "enable": true,
                "requestSubTopic": "/devices/1/request",
                "responsePubTopic": "/devices/1/response",
                "ttl": 60,
                "qos": 1,
                "retain": false
              }
            }
          },
          "DLMConfiguration": {
            "title": "DLM configuration",
            "description": "- \"DLM connection status.\"\n- \"Event: reference thingspro event/log API to listen events(label=[\\\"notification\\\", \\\"dlm\\\"])\"\n",
            "properties": {
              "connection": {
                "type": "object",
                "properties": {
                  "enable": {
                    "type": "boolean",
                    "description": "DLM enable/disable",
                    "default": true
                  },
                  "retryDelaySec": {
                    "type": "integer",
                    "description": "Delay between retries.",
                    "default": 10,
                    "minimum": 10,
                    "maximum": 86400
                  },
                  "picTarget": {
                    "type": "string",
                    "description": "PIC target",
                    "default": "prod",
                    "enum": [
                      "prod",
                      "stage",
                      "develop"
                    ]
                  }
                }
              },
              "certificates": {
                "type": "object",
                "properties": {
                  "caCertFile": {
                    "type": "string",
                    "description": "device ca certificate file name"
                  },
                  "caPkFile": {
                    "description": "device ca private key file name",
                    "type": "string"
                  },
                  "certificateInfo": {
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                      "issuerCN": {
                        "type": "string",
                        "readOnly": true
                      },
                      "notBefore": {
                        "type": "string",
                        "readOnly": true
                      },
                      "notAfter": {
                        "type": "string",
                        "readOnly": true
                      },
                      "modelName": {
                        "type": "string",
                        "readOnly": true
                      },
                      "macAddress": {
                        "type": "string",
                        "readOnly": true
                      },
                      "serialNumber": {
                        "type": "string",
                        "readOnly": true
                      }
                    }
                  }
                }
              },
              "connectionStatus": {
                "type": "object",
                "properties": {
                  "projectName": {
                    "type": "string",
                    "readOnly": true
                  },
                  "status": {
                    "type": "string",
                    "description": "DLM connection status.",
                    "readOnly": true,
                    "enum": [
                      "connecting",
                      "connectFailure",
                      "connected"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "readOnly": true,
                    "description": "DLM error message."
                  },
                  "lastConnectTime": {
                    "readOnly": true,
                    "type": "string",
                    "description": "last connect start time, format: \"Mon Jan _2 15:04:05 2006\""
                  },
                  "lastConnectedTime": {
                    "readOnly": true,
                    "type": "string",
                    "description": "last connected time, format: \"Mon Jan _2 15:04:05 2006\""
                  },
                  "statuslastUpdateTime": {
                    "readOnly": true,
                    "type": "string",
                    "description": "connection status last update time, format: \"Mon Jan _2 15:04:05 2006\""
                  }
                }
              }
            },
            "example": {
              "data": {
                "connection": {
                  "enable": true,
                  "retryDelaySec": 10
                },
                "certificates": {
                  "caPkFile": "device.key",
                  "caCertFile": "device.crt",
                  "certificateInfo": {
                    "issuerCN": "Apollo intermediate CA",
                    "notBefore": "Sep 20, 2019, 01:07:06",
                    "notAfter": "Jul 7, 2037, 01:07:06",
                    "modelName": "UC-8100A-ME-T",
                    "macAddress": "00:90:e8:00:02:42",
                    "serialNumber": "MOXA00000469"
                  }
                },
                "connectionStatus": {
                  "projectName": "myProject",
                  "status": "connecting",
                  "message": "",
                  "lastConnectedTime": "Sep 23, 2019, 10:00:01",
                  "lastConnectTime": "Sep 23, 2019, 10:00:01",
                  "statuslastUpdateTime": "Sep 24, 2019, 08:31:44"
                }
              }
            }
          },
          "AzureIoTDeviceConfiguration": {
            "title": "Azure IoT Device configuration",
            "properties": {
              "status": {
                "type": "string",
                "readOnly": true,
                "description": "The iot device service status.",
                "default": "disconnect",
                "enum": [
                  "disconnect",
                  "connecting",
                  "connectFailure",
                  "connected"
                ]
              },
              "provisioning": {
                "properties": {
                  "enable": {
                    "type": "boolean",
                    "default": false
                  },
                  "protocol": {
                    "type": "object",
                    "properties": {
                      "capabilities": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "protocol": {
                              "type": "string"
                            },
                            "port": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "protocol": {
                        "type": "string",
                        "description": "Communication protocol",
                        "default": "mqtt"
                      },
                      "port": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Communication protocol used port"
                      }
                    }
                  },
                  "keepAlive": {
                    "type": "integer",
                    "description": "unit: second",
                    "default": 60,
                    "minimum": 1,
                    "maximum": 3600
                  },
                  "supportTwin": {
                    "type": "boolean",
                    "default": true
                  },
                  "authenticationType": {
                    "type": "string",
                    "description": "The identity provisioning mode of the iot device.",
                    "default": "symmetricKey",
                    "enum": [
                      "x509",
                      "symmetricKey"
                    ]
                  },
                  "connectionString": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1024
                  },
                  "certificate": {
                    "description": "X509 certificate",
                    "properties": {
                      "caCertFile": {
                        "type": "string",
                        "description": "device ca certificate file name"
                      },
                      "caPkFile": {
                        "description": "device ca private key file name",
                        "type": "string"
                      }
                    }
                  },
                  "rootCaCertFile": {
                    "description": "root ca certificate file name",
                    "type": "string"
                  }
                }
              }
            },
            "example": {
              "status": "connected",
              "provisioning": {
                "authenticationType": "symmetricKey",
                "connectionString": "[connection string]",
                "enable": true,
                "protocol": {
                  "capabilities": [
                    {
                      "protocol": "mqtt",
                      "port": 8883
                    },
                    {
                      "protocol": "mqttOverWebsocket",
                      "port": 443
                    },
                    {
                      "protocol": "amqp",
                      "port": 5671
                    },
                    {
                      "protocol": "amqpOverWebsocket",
                      "port": 443
                    }
                  ],
                  "protocol": "mqtt",
                  "port": 8883
                },
                "supportTwin": true,
                "certificate": {
                  "caPkFile": "device.key",
                  "caCertFile": "device.crt"
                },
                "rootCaCertFile": "root.crt"
              }
            }
          },
          "AwsIoTCoreConfiguration": {
            "title": "AWS IoT Device configuration",
            "properties": {
              "status": {
                "type": "string",
                "readOnly": true,
                "description": "The iot device service status.",
                "enum": [
                  "disconnect",
                  "connecting",
                  "connectFailure",
                  "connected"
                ]
              },
              "provisioning": {
                "properties": {
                  "enable": {
                    "type": "boolean",
                    "default": false
                  },
                  "host": {
                    "type": "string"
                  },
                  "port": {
                    "type": "integer",
                    "default": 8883
                  },
                  "thingID": {
                    "type": "string"
                  },
                  "messageQOS": {
                    "type": "integer",
                    "default": 0
                  },
                  "keepAliveSec": {
                    "type": "integer",
                    "description": "unit: second",
                    "default": 60,
                    "minimum": 1,
                    "maximum": 3600
                  },
                  "supportDM": {
                    "type": "boolean",
                    "default": true
                  },
                  "certificate": {
                    "properties": {
                      "rootCaCertFile": {
                        "type": "string"
                      },
                      "caCertFile": {
                        "type": "string"
                      },
                      "caPkFile": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "example": {
              "status": "connected",
              "provisioning": {
                "enable": true,
                "host": "a22j5sm6o3yzc5.iot.us-east-1.amazonaws.com",
                "port": 8883,
                "thingID": "MyThingsproEdge",
                "supportDM": true,
                "messageQOS": 0,
                "certificate": {
                  "rootCaCertFile": "rootCA.crt",
                  "caPkFile": "private.key",
                  "caCertFile": "device.crt"
                }
              }
            }
          },
          "BlukConfiguration": {
            "title": "Bluk Upload Configuration",
            "description": "Bulk data upload to server after device status change to connected.",
            "required": [
              "enable",
              "size"
            ],
            "properties": {
              "enable": {
                "type": "boolean",
                "default": false
              },
              "size": {
                "type": "integer",
                "description": "unit: KB",
                "default": 128,
                "minimum": 1,
                "maximum": 1024
              }
            }
          },
          "SparkplugBrokerConfiguration": {
            "title": "Sparkplug broker configuration",
            "required": [
              "server",
              "port"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true
              },
              "status": {
                "type": "string",
                "readOnly": true,
                "description": "Connection status.",
                "enum": [
                  "disconnect",
                  "connecting",
                  "connectFailure",
                  "connected"
                ]
              },
              "lastConectedTime": {
                "type": "string",
                "readOnly": true,
                "default": ""
              },
              "enable": {
                "type": "boolean",
                "default": false
              },
              "server": {
                "type": "string",
                "description": "MQTT server(broker) ip or url"
              },
              "port": {
                "type": "integer",
                "minimum": 1,
                "maximum": 65536
              },
              "keepAliveSec": {
                "type": "integer",
                "default": 60,
                "minimum": 10,
                "maximum": 65536
              },
              "certificateOverTLS": {
                "type": "boolean",
                "default": false
              },
              "clientID": {
                "type": "string",
                "description": "Max length: 65536 in V3.1.1, 23 in V3.1"
              },
              "userName": {
                "type": "string",
                "maxLength": 255
              },
              "password": {
                "type": "string",
                "maxLength": 255
              },
              "tlsVersion": {
                "type": "string",
                "default": 1.2,
                "enum": [
                  "1.3",
                  "1.2",
                  "1.1",
                  "1.0"
                ]
              },
              "insecureSkipVerify": {
                "type": "boolean",
                "default": false
              },
              "certificate": {
                "properties": {
                  "rootCaCertFile": {
                    "type": "string"
                  },
                  "caCertFile": {
                    "type": "string"
                  },
                  "caPkFile": {
                    "type": "string"
                  }
                }
              }
            },
            "example": {
              "id": 1,
              "enable": true,
              "status": "connected",
              "lastConnectedTime": "May 20, 2020, 14:05",
              "server": "test.sparkplug.org",
              "port": 1883,
              "keepAliveSec": 10,
              "userName": "admin",
              "password": "password"
            }
          },
          "SparkplugConfiguration": {
            "title": "Sparkplug configuration",
            "required": [
              "nodeID",
              "groupID"
            ],
            "properties": {
              "enable": {
                "type": "boolean",
                "default": false
              },
              "enableDM": {
                "type": "boolean",
                "default": false
              },
              "nodeID": {
                "description": "The format can be valid UTF-8 alphanumeric String with the exception of the reserved characters of \"+\", \"/\", \"#\"",
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "groupID": {
                "description": "The format can be valid UTF-8 alphanumeric String with the exception of the reserved characters of \"+\", \"/\", \"#\"",
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "uuid": {
                "description": "The format can be valid UTF-8 alphanumeric String. UUID to track message type in terms of schema definitions",
                "type": "string",
                "minLength": 0,
                "maxLength": 255
              },
              "primaryHostID": {
                "type": "string",
                "description": "The format can be valid UTF-8 alphanumeric String.",
                "minLength": 0,
                "maxLength": 255
              },
              "handshakeTimeout": {
                "type": "integer",
                "default": 10,
                "minimum": 1,
                "maximum": 600
              },
              "maxRetries": {
                "type": "integer",
                "default": 3,
                "minimum": 0,
                "maximum": 60
              },
              "retryInterval": {
                "type": "integer",
                "default": 60,
                "minimum": 10,
                "maximum": 3600
              },
              "brokerList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SparkplugBrokerConfiguration"
                }
              }
            },
            "example": {
              "enable": true,
              "enableDM": false,
              "nodeID": "gary",
              "groupID": "thingspro-edges",
              "uuid": "",
              "primaryHostID": "garyig",
              "handshakeTimeout": 10,
              "retryInterval": 10,
              "maxRetries": 3,
              "brokerList": [
                {
                  "id": 1,
                  "enable": true,
                  "status": "connected",
                  "lastConnectedTime": "May 20, 2020, 14:05",
                  "server": "test.sparkplug.org",
                  "port": 1883,
                  "keepAliveSec": 10,
                  "userName": "admin",
                  "password": "password"
                }
              ]
            }
          },
          "AzureIoTEdgeConfiguration": {
            "title": "Azure IoT Edge configuration",
            "properties": {
              "iotedge": {
                "description": "IoT Edge runtime information",
                "properties": {
                  "version": {
                    "type": "string",
                    "readOnly": true
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "resetting",
                      "running",
                      "dead",
                      "exited",
                      "waiting"
                    ],
                    "readOnly": true
                  },
                  "since": {
                    "type": "string",
                    "example": "Mon 2016-10-07 09:49:16 CST",
                    "readOnly": true
                  },
                  "match": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "suggestion": {
                    "type": "string",
                    "readOnly": true
                  },
                  "modules": {
                    "type": "array",
                    "items": {
                      "description": "IoT Edge modules runtime information",
                      "type": "object",
                      "properties": {
                        "status": {
                          "description": "One of created, restarting, running, removing, paused, exited, or dead",
                          "readOnly": true,
                          "type": "string"
                        },
                        "config": {
                          "description": "docker image URL",
                          "readOnly": true,
                          "type": "string"
                        },
                        "description": {
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "module name",
                          "readOnly": true,
                          "type": "string"
                        },
                        "match": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "suggestion": {
                          "type": "string",
                          "readOnly": true
                        }
                      }
                    }
                  }
                }
              },
              "provisioning": {
                "properties": {
                  "enable": {
                    "type": "boolean",
                    "default": false
                  },
                  "supportTwin": {
                    "type": "boolean"
                  },
                  "globalEndpoint": {
                    "type": "string",
                    "description": "DPS url",
                    "default": "https://global.azure-devices-provisioning.net"
                  },
                  "source": {
                    "type": "string",
                    "description": "The identity provisioning mode of the iotedge.",
                    "default": "manual",
                    "enum": [
                      "manual",
                      "dps"
                    ]
                  },
                  "method": {
                    "type": "string",
                    "description": "The identity provisioning mode of the iotedge.",
                    "default": "tpm",
                    "enum": [
                      "tpm",
                      "symmetricKey",
                      "x509"
                    ]
                  },
                  "connectionString": {
                    "type": "string",
                    "description": "for source:manual",
                    "minLength": 1,
                    "maxLength": 1024
                  },
                  "scopeId": {
                    "description": "for source:dps; Value of a specific DPS instance's ID scope",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 128
                  },
                  "symmetricKey": {
                    "description": "for source:dps,method:symmetricKey",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "identityCert": {
                    "description": "for source:dps,method:x509",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1024
                  },
                  "identityPk": {
                    "description": "for source:dps,method:x509",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1024
                  },
                  "registrationId": {
                    "description": "Use only lowercase alphanumeric and dash ('-') characters. For example, symm-key-device-007\n",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 128
                  },
                  "endorsementKey": {
                    "description": "for source:dps,method:tpm;",
                    "type": "string",
                    "readOnly": true
                  }
                }
              },
              "downstreamCerts": {
                "properties": {
                  "mode": {
                    "type": "string",
                    "description": "The identity certication mode of the iotedge.",
                    "default": "default",
                    "enum": [
                      "default",
                      "user",
                      "moxa"
                    ]
                  },
                  "caCertFile": {
                    "type": "string",
                    "description": "device ca certificate file name"
                  },
                  "caPkFile": {
                    "description": "device ca private key file name",
                    "type": "string"
                  },
                  "trustedCaFile": {
                    "type": "string",
                    "description": "a file containing all the trusted CA"
                  },
                  "certificateInfo": {
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                      "issuer": {
                        "type": "string",
                        "readOnly": true
                      },
                      "notAfter": {
                        "type": "string",
                        "readOnly": true
                      },
                      "subject": {
                        "type": "object",
                        "properties": {
                          "cn": {
                            "type": "string",
                            "readOnly": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "StoreAndForward": {
            "title": "Store and forward configuration",
            "properties": {
              "enable": {
                "type": "boolean",
                "default": false
              },
              "targetDiskName": {
                "type": "string"
              },
              "desiredDiskCacheSizeMB": {
                "type": "integer"
              },
              "timeToLiveSec": {
                "type": "integer"
              },
              "dropBehavior": {
                "type": "string",
                "enum": [
                  "oldest",
                  "newest"
                ]
              },
              "disks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "readOnly": true
                    },
                    "mount": {
                      "type": "string",
                      "readOnly": true
                    },
                    "device": {
                      "type": "string",
                      "readOnly": true
                    },
                    "total": {
                      "type": "integer",
                      "readOnly": true
                    },
                    "used": {
                      "type": "integer",
                      "readOnly": true
                    },
                    "free": {
                      "type": "integer",
                      "readOnly": true
                    }
                  }
                }
              }
            },
            "example": {
              "enable": true,
              "targetDiskName": "System",
              "desiredDiskCacheSizeMB": 8,
              "timeToLiveSec": 7200,
              "dropBehavior": "oldest",
              "disks": [
                {
                  "name": "System",
                  "mount": "/",
                  "device": "/dev/root",
                  "total": 3206059008,
                  "used": 6059008,
                  "free": 3200000000
                }
              ]
            }
          },
          "StoreAndForwardWithBulkUpload": {
            "title": "Store and forward configuration with bulk upload",
            "properties": {
              "enable": {
                "type": "boolean",
                "default": false
              },
              "targetDiskName": {
                "type": "string"
              },
              "desiredDiskCacheSizeMB": {
                "type": "integer"
              },
              "timeToLiveSec": {
                "type": "integer"
              },
              "dropBehavior": {
                "type": "string",
                "enum": [
                  "oldest",
                  "newest"
                ]
              },
              "disks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "readOnly": true
                    },
                    "mount": {
                      "type": "string",
                      "readOnly": true
                    },
                    "device": {
                      "type": "string",
                      "readOnly": true
                    },
                    "total": {
                      "type": "integer",
                      "readOnly": true
                    },
                    "used": {
                      "type": "integer",
                      "readOnly": true
                    },
                    "free": {
                      "type": "integer",
                      "readOnly": true
                    }
                  }
                }
              },
              "bulkUpload": {
                "$ref": "#/components/schemas/BlukConfiguration"
              }
            },
            "example": {
              "enable": true,
              "targetDiskName": "System",
              "desiredDiskCacheSizeMB": 8,
              "timeToLiveSec": 7200,
              "dropBehavior": "oldest",
              "bulkUpload": {
                "enable": false,
                "size": 128
              },
              "disks": [
                {
                  "name": "System",
                  "mount": "/",
                  "device": "/dev/root",
                  "total": 3206059008,
                  "used": 6059008,
                  "free": 3200000000
                }
              ]
            }
          },
          "MessagePolicyV20": {
            "title": "Message upload group configuration (version: 2.0)",
            "required": [
              "id",
              "enable",
              "tags",
              "pollingInterval",
              "sentOutThreshold",
              "outputTopic"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true
              },
              "enable": {
                "type": "boolean"
              },
              "properties": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "key",
                    "value"
                  ],
                  "properties": {
                    "key": {
                      "type": "string",
                      "minLength": 1
                    },
                    "value": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                }
              },
              "tags": {
                "type": "object",
                "properties": {
                  "moduleName": {
                    "type": "object",
                    "properties": {
                      "sourceName": {
                        "type": "array",
                        "items": {
                          "description": "tag name",
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 255
                        }
                      }
                    }
                  }
                }
              },
              "outputTopic": {
                "type": "string",
                "default": "sample",
                "minLength": 1
              },
              "pollingInterval": {
                "type": "integer",
                "description": "unit:second",
                "default": 0,
                "minLength": 0,
                "maxLength": 86400
              },
              "sendOutThreshold": {
                "type": "object",
                "properties": {
                  "size": {
                    "description": "unit:byte",
                    "type": "integer",
                    "default": 4096,
                    "minimum": 0,
                    "maximum": 262144
                  },
                  "time": {
                    "description": "unit:second",
                    "type": "integer",
                    "default": 60,
                    "minimum": 0,
                    "maximum": 86400
                  }
                }
              },
              "format": {
                "description": "jq filter string, use to change message format.\n- empty means use default message format: `{tags:{(.prvdName):{(.srcName):{(.tagName):{values:[{updateTimeStamp:(.ts/1000|todateiso8601),value:.dataValue}]}}}}}`\n",
                "type": "string",
                "default": "",
                "minLength": 0,
                "maxLength": 4096
              }
            },
            "example": {
              "id": 1,
              "enable": true,
              "outputTopic": "sample2",
              "properties": [],
              "tags": {
                "modbus": {
                  "myDevice1": [
                    "di0",
                    "di1"
                  ]
                },
                "system": {
                  "system": [
                    "cpuUsage",
                    "memoryUsage"
                  ]
                }
              },
              "pollingInterval": 5,
              "sendOutThreshold": {
                "size": 4096,
                "time": 120
              },
              "format": ""
            }
          },
          "MessagePolicy": {
            "title": "Message upload group configuration",
            "required": [
              "id",
              "enable",
              "tags",
              "sendOutThreshold",
              "outputTopic"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true
              },
              "enable": {
                "type": "boolean"
              },
              "description": {
                "type": "string",
                "maxLength": 1024
              },
              "format": {
                "description": "jq filter string, use to change message format.\n- empty means use default message format: {tags:{(.prvdName):{(.srcName):{(.tagName):{values:[{updateTimeStamp:(.ts/1000|todateiso8601),value:.dataValue}]}}}}}\n",
                "type": "string",
                "default": "",
                "minLength": 0,
                "maxLength": 4096
              },
              "properties": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "key",
                    "value"
                  ],
                  "properties": {
                    "key": {
                      "type": "string",
                      "minLength": 1
                    },
                    "value": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                }
              },
              "tags": {
                "type": "object",
                "properties": {
                  "moduleName": {
                    "type": "object",
                    "properties": {
                      "sourceName": {
                        "type": "array",
                        "items": {
                          "description": "tag name",
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 255
                        }
                      }
                    }
                  }
                }
              },
              "outputTopic": {
                "type": "string",
                "default": "sample",
                "minLength": 1
              },
              "onChange": {
                "description": "drop data if same with latest when enable onChange.",
                "type": "boolean",
                "readOnly": true
              },
              "minPublishInterval": {
                "description": "a fixed interval between the two publish. unit:second",
                "type": "integer",
                "default": 0,
                "minimum": 0,
                "maximum": 10
              },
              "samplingMode": {
                "type": "string",
                "default": "allChangedValues",
                "enum": [
                  "allValues",
                  "latestValues",
                  "allChangedValues",
                  "latestChangedValues"
                ]
              },
              "customSamplingRate": {
                "description": "enable will use the pollingInterval that user input.",
                "type": "boolean",
                "default": false
              },
              "pollingInterval": {
                "type": "integer",
                "description": "unit:second, 0 means subscribe mode",
                "default": 0,
                "minLength": 0,
                "maxLength": 86400
              },
              "sendOutThreshold": {
                "type": "object",
                "properties": {
                  "mode": {
                    "type": "string",
                    "default": "byTime",
                    "enum": [
                      "byTime",
                      "bySize",
                      "immediately"
                    ]
                  },
                  "time": {
                    "description": "unit:second",
                    "type": "integer",
                    "default": 60,
                    "minimum": 0,
                    "maximum": 86400
                  },
                  "size": {
                    "description": "unit:byte",
                    "type": "integer",
                    "default": 4096,
                    "minimum": 0,
                    "maximum": 262144
                  },
                  "sizeIdleTimer": {
                    "type": "object",
                    "properties": {
                      "enable": {
                        "type": "boolean",
                        "default": true
                      },
                      "time": {
                        "description": "unit:second",
                        "type": "integer",
                        "default": 60,
                        "minimum": 0,
                        "maximum": 86400
                      }
                    }
                  }
                }
              }
            },
            "example": {
              "id": 1,
              "enable": true,
              "description": "my message group",
              "outputTopic": "sample",
              "properties": [],
              "onChange": false,
              "minPublishInterval": 0,
              "samplingMode": "allValues",
              "customSamplingRate": false,
              "tags": {
                "modbus": {
                  "myDevice1": [
                    "di0",
                    "di1"
                  ]
                }
              },
              "pollingInterval": 0,
              "sendOutThreshold": {
                "mode": "byTime",
                "time": 60
              }
            }
          },
          "SparkplugMessagePolicy": {
            "title": "Sparkplug Message upload group configuration",
            "required": [
              "id",
              "enable",
              "tags",
              "sendOutThreshold"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true
              },
              "enable": {
                "type": "boolean"
              },
              "description": {
                "type": "string",
                "maxLength": 1024
              },
              "tags": {
                "type": "object",
                "properties": {
                  "moduleName": {
                    "type": "object",
                    "properties": {
                      "sourceName": {
                        "type": "array",
                        "items": {
                          "description": "tag name",
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 255
                        }
                      }
                    }
                  }
                }
              },
              "onChange": {
                "description": "drop data if same with latest when enable onChange.",
                "type": "boolean",
                "readOnly": true
              },
              "minPublishInterval": {
                "description": "a fixed interval between the two publish. unit:second",
                "type": "integer",
                "default": 0,
                "minimum": 0,
                "maximum": 10
              },
              "samplingMode": {
                "type": "string",
                "default": "allChangedValues",
                "enum": [
                  "allValues",
                  "latestValues",
                  "allChangedValues",
                  "latestChangedValues"
                ]
              },
              "customSamplingRate": {
                "description": "enable will use the pollingInterval that user input.",
                "type": "boolean",
                "default": false
              },
              "pollingInterval": {
                "type": "integer",
                "description": "unit:second, 0 means subscribe mode",
                "default": 10,
                "minLength": 0,
                "maxLength": 86400
              },
              "sendOutThreshold": {
                "type": "object",
                "properties": {
                  "mode": {
                    "type": "string",
                    "default": "byTime",
                    "enum": [
                      "byTime",
                      "bySize",
                      "immediately"
                    ]
                  },
                  "time": {
                    "description": "unit:second",
                    "type": "integer",
                    "default": 60,
                    "minimum": 0,
                    "maximum": 86400
                  },
                  "size": {
                    "description": "unit:byte",
                    "type": "integer",
                    "default": 4096,
                    "minimum": 0,
                    "maximum": 262144
                  },
                  "sizeIdleTimer": {
                    "type": "object",
                    "properties": {
                      "enable": {
                        "type": "boolean",
                        "default": true
                      },
                      "time": {
                        "description": "unit:second",
                        "type": "integer",
                        "default": 60,
                        "minimum": 0,
                        "maximum": 86400
                      }
                    }
                  }
                }
              }
            },
            "example": {
              "id": 1,
              "enable": true,
              "description": "my message group",
              "properties": [],
              "onChange": false,
              "minPublishInterval": 0,
              "samplingMode": "allValues",
              "customSamplingRate": false,
              "tags": {
                "modbus": {
                  "myDevice1": [
                    "di0",
                    "di1"
                  ]
                }
              },
              "pollingInterval": 0,
              "sendOutThreshold": {
                "mode": "byTime",
                "time": 60
              }
            }
          },
          "Tag": {
            "type": "object",
            "properties": {
              "srcName": {
                "type": "string"
              },
              "tagName": {
                "type": "string"
              },
              "dataType": {
                "type": "string",
                "enum": [
                  "uint8",
                  "uint16",
                  "uint32",
                  "uint64",
                  "int16",
                  "int32",
                  "int64",
                  "float32",
                  "float64",
                  "string",
                  "boolean",
                  "bytearray"
                ]
              },
              "duration": {
                "type": "integer",
                "format": "int32"
              },
              "dataUnit": {
                "type": "string"
              },
              "access": {
                "type": "string",
                "enum": [
                  "ro",
                  "wo",
                  "rw"
                ]
              }
            },
            "example": {
              "srcName": "system",
              "tagName": "cpuUsage",
              "dataType": "int32",
              "duration": 1000,
              "dataUnit": "%",
              "access": "ro"
            }
          },
          "DeviceProperties": {
            "type": "object",
            "properties": {
              "$origin": {
                "type": "object",
                "properties": {
                  "$resource": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "reportedPath",
                        "desiredPath"
                      ],
                      "properties": {
                        "source": {
                          "type": "string",
                          "description": "json path of property in resource; empty == \".\"(complete json object/array)"
                        },
                        "reportedPath": {
                          "type": "string",
                          "description": "json path of reported property."
                        },
                        "desiredPath": {
                          "type": "string",
                          "description": "json path of desired property."
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": {
              "device": {
                "general": [
                  {
                    "reportedPath": "general",
                    "desiredPath": "general"
                  }
                ],
                "wan": [
                  {
                    "reportedPath": "wan",
                    "desiredPath": "wan"
                  }
                ]
              }
            }
          },
          "CloudSupportList": {
            "type": "string",
            "description": "Cloud APP support cloud list.",
            "enum": [
              "azure-iotedge",
              "azure-device",
              "dlm",
              "mqtt",
              "aws"
            ]
          }
        }
      },
      "security": [
        {
          "bearerAuth": []
        }
      ],
      "paths": {
        "/mqtt": {
          "get": {
            "description": "Get MQTT client configuration.",
            "tags": [
              "mqtt"
            ],
            "responses": {
              "200": {
                "description": "MQTT client configuration.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MQTTConfiguration"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "post": {
            "description": "Create a MQTT client configuration.",
            "tags": [
              "mqtt"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MQTTConfiguration"
                  }
                },
                "multipart/form-data": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "rootCaCertFile": {
                        "description": "trusted ca certificate",
                        "format": "binary",
                        "type": "string"
                      },
                      "caCertFile": {
                        "description": "device ca certificate",
                        "format": "binary",
                        "type": "string"
                      },
                      "caPkFile": {
                        "description": "device ca private key",
                        "format": "binary",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "MQTT client configuration.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MQTTConfiguration"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/mqtt/{id}": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "the `id` in the configuration of mqtt clients.",
              "schema": {
                "type": "integer"
              },
              "required": true
            }
          ],
          "put": {
            "description": "Edit MQTT client configuration.",
            "tags": [
              "mqtt"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MQTTConfiguration"
                  }
                },
                "multipart/form-data": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "rootCaCertFile": {
                        "description": "trusted ca certificate",
                        "format": "binary",
                        "type": "string"
                      },
                      "caCertFile": {
                        "description": "device ca certificate",
                        "format": "binary",
                        "type": "string"
                      },
                      "caPkFile": {
                        "description": "device ca private key",
                        "format": "binary",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "MQTT client configuration.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MQTTConfiguration"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "description": "delete MQTT client configuration.",
            "tags": [
              "mqtt"
            ],
            "responses": {
              "200": {
                "description": "MQTT client configuration.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MQTTConfiguration"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/mqtt/{id}/certificates": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "the `id` in the configuration of mqtt clients.",
              "schema": {
                "type": "integer"
              },
              "required": true
            }
          ],
          "delete": {
            "description": "delete certficate.",
            "tags": [
              "mqtt"
            ],
            "responses": {
              "200": {
                "description": "MQTT client configuration",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MQTTConfiguration"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/mqtt/{id}/store-and-forward": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "the `id` in the configuration of mqtt clients.",
              "schema": {
                "type": "integer"
              },
              "required": true
            }
          ],
          "get": {
            "description": "get store and forward setting.",
            "tags": [
              "mqtt"
            ],
            "responses": {
              "200": {
                "description": "store and forward setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/StoreAndForward"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "update store and forward setting.",
            "tags": [
              "mqtt"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StoreAndForward"
                  },
                  "example": {
                    "enable": true,
                    "targetDiskName": "System",
                    "desiredDiskCacheSizeMB": 8,
                    "timeToLiveSec": 7200,
                    "dropBehavior": "oldest"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "store and forward setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/StoreAndForward"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/mqtt/{id}/messages": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "the `id` in the configuration of mqtt clients.",
              "schema": {
                "type": "integer"
              },
              "required": true
            }
          ],
          "get": {
            "description": "get message groups setting.",
            "tags": [
              "mqtt"
            ],
            "responses": {
              "200": {
                "description": "message groups setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessagePolicyV20"
                      }
                    }
                  }
                }
              }
            }
          },
          "post": {
            "description": "create a message group.",
            "tags": [
              "mqtt"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessagePolicyV20"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "message group setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessagePolicyV20"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/mqtt/{id}/messages/{group_id}": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "the `id` in the configuration of mqtt clients.",
              "schema": {
                "type": "integer"
              },
              "required": true
            },
            {
              "name": "group_id",
              "in": "path",
              "description": "the `id` in the configuration of message groups.",
              "schema": {
                "type": "integer"
              },
              "required": true
            }
          ],
          "get": {
            "description": "get message group setting.",
            "tags": [
              "mqtt"
            ],
            "responses": {
              "200": {
                "description": "message policy setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MessagePolicyV20"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "update message group setting.",
            "tags": [
              "mqtt"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessagePolicyV20"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "message group setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MessagePolicyV20"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "description": "delete message group setting.",
            "tags": [
              "mqtt"
            ],
            "responses": {
              "200": {
                "description": "message groups setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessagePolicyV20"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/mqtt/{id}/messages/test": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "the `id` in the configuration of mqtt clients.",
              "schema": {
                "type": "integer"
              },
              "required": true
            }
          ],
          "put": {
            "description": "test custom payload.",
            "tags": [
              "mqtt"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "format": {
                        "type": "string"
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Tag"
                        }
                      }
                    }
                  },
                  "example": {
                    "format": "{time: (now|todateiso8601), (.srcName): { (.tagName): .dataValue} }",
                    "tags": [
                      {
                        "srcName": "system",
                        "tagName": "cpuUsage",
                        "dataType": "int32",
                        "duration": 1000,
                        "access": "ro"
                      }
                    ]
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "custom payload test results",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "object"
                        },
                        "error": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "data": {
                        "system": {
                          "cpuUsage": 60
                        },
                        "time": "2019-09-27T11:42:34Z"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-device": {
          "get": {
            "description": "Get azure iot device configuration.",
            "tags": [
              "azure_device"
            ],
            "responses": {
              "200": {
                "description": "Azure iot device configuration.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AzureIoTDeviceConfiguration"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "Update provisioning configuration.",
            "tags": [
              "azure_device"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AzureIoTDeviceConfiguration"
                  },
                  "examples": {
                    "symmetricKey mode": {
                      "value": {
                        "provisioning": {
                          "enable": true,
                          "authenticationType": "symmetricKey",
                          "supportTwin": true,
                          "connectionString": "connection-string-test",
                          "keepAlive": 60,
                          "protocol": {
                            "protocol": "mqtt"
                          }
                        }
                      }
                    },
                    "switch to X509 mode (need import certificate)": {
                      "value": {
                        "provisioning": {
                          "enable": true,
                          "authenticationType": "x509",
                          "supportTwin": false,
                          "connectionString": "connection-string-test",
                          "keepAlive": 60,
                          "protocol": {
                            "protocol": "mqtt"
                          },
                          "certificate": {
                            "caPkFile": "device.crt",
                            "caCertFile": "device.key"
                          }
                        }
                      }
                    },
                    "enable/disable device management": {
                      "value": {
                        "provisioning": {
                          "enable": true,
                          "authenticationType": "symmetricKey",
                          "supportTwin": false,
                          "connectionString": "connection-string-test",
                          "keepAlive": 60,
                          "protocol": {
                            "protocol": "mqtt"
                          }
                        }
                      }
                    },
                    "change communication protocol": {
                      "value": {
                        "provisioning": {
                          "enable": true,
                          "authenticationType": "symmetricKey",
                          "supportTwin": true,
                          "connectionString": "connection-string-test",
                          "keepAlive": 60,
                          "protocol": {
                            "protocol": "mqttOverWebsocket"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "azure iot device configuration",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AzureIoTDeviceConfiguration"
                        }
                      }
                    },
                    "example": {
                      "data": {
                        "provisioning": {
                          "authenticationType": "symmetricKey",
                          "connectionString": "connection-string-test",
                          "enable": true,
                          "supportTwin": true,
                          "certificate": {
                            "caPkFile": "",
                            "caCertFile": "",
                            "certificateInfo": {
                              "notAfter": "",
                              "subject": {
                                "cn": ""
                              },
                              "issuer": ""
                            }
                          }
                        },
                        "status": "connected"
                      }
                    }
                  }
                }
              }
            }
          },
          "post": {
            "description": "Setup x509 certificates.",
            "tags": [
              "azure_device"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "multipart/form-data": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "caCertFile": {
                        "description": "device ca certificate",
                        "format": "binary",
                        "type": "string"
                      },
                      "caPkFile": {
                        "description": "device ca private key",
                        "format": "binary",
                        "type": "string"
                      },
                      "rootCaCertFile": {
                        "description": "root ca certificate",
                        "format": "binary",
                        "type": "string"
                      },
                      "connectionString": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1024
                      },
                      "protocol": {
                        "type": "string",
                        "description": "Communication protocol",
                        "enum": [
                          "mqtt",
                          "mqttOverWebsocket",
                          "amqp",
                          "amqpOverWebsocket"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "azure iot device configuration",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AzureIoTDeviceConfiguration"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-device/twin/reported": {
          "put": {
            "description": "reported twin properties.",
            "tags": [
              "azure_device"
            ],
            "responses": {
              "200": {
                "description": "twin properties setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "data": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-device/twin/clear": {
          "put": {
            "description": "clear twin properties.",
            "tags": [
              "azure_device"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "example": [
                    "general",
                    "ethernets"
                  ]
                }
              }
            },
            "responses": {
              "200": {
                "description": "twin properties setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "data": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-device/store-and-forward": {
          "get": {
            "description": "get store and forward setting.",
            "tags": [
              "azure_device"
            ],
            "responses": {
              "200": {
                "description": "store and forward setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/StoreAndForward"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "update store and forward setting.",
            "tags": [
              "azure_device"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StoreAndForward"
                  },
                  "example": {
                    "enable": true,
                    "targetDiskName": "System",
                    "desiredDiskCacheSizeMB": 8,
                    "timeToLiveSec": 7200,
                    "dropBehavior": "oldest"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "store and forward setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/StoreAndForward"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-device/messages": {
          "get": {
            "description": "get message groups setting.",
            "tags": [
              "azure_device"
            ],
            "responses": {
              "200": {
                "description": "message groups setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessagePolicyV20"
                      }
                    }
                  }
                }
              }
            }
          },
          "post": {
            "description": "create a message group.",
            "tags": [
              "azure_device"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessagePolicyV20"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "message group setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessagePolicyV20"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-device/messages/{id}": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "message group id.",
              "schema": {
                "type": "integer"
              },
              "required": true
            }
          ],
          "get": {
            "description": "get message group setting.",
            "tags": [
              "azure_device"
            ],
            "responses": {
              "200": {
                "description": "message policy setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MessagePolicyV20"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "update message group setting.",
            "tags": [
              "azure_device"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessagePolicyV20"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "message group setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MessagePolicyV20"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "description": "delete message group setting.",
            "tags": [
              "azure_device"
            ],
            "responses": {
              "200": {
                "description": "message groups setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessagePolicyV20"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-device/messages/test": {
          "put": {
            "description": "test custom payload.",
            "tags": [
              "azure_device"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "format": {
                        "type": "string"
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Tag"
                        }
                      }
                    }
                  },
                  "example": {
                    "format": "{ time : (now|todateiso8601), (.srcName) : { (.tagName) : .dataValue}}",
                    "tags": [
                      {
                        "srcName": "system",
                        "tagName": "cpuUsage",
                        "dataType": "int32",
                        "duration": 1000,
                        "dataUnit": "%",
                        "access": "ro"
                      }
                    ]
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "custom payload test results",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "object"
                        },
                        "error": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "data": {
                        "system": {
                          "cpuUsage": 60
                        },
                        "time": "2019-09-27T11:42:34Z"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/aws": {
          "get": {
            "description": "Get AWS iot device configuration.",
            "tags": [
              "aws"
            ],
            "responses": {
              "200": {
                "description": "AWS iot device configuration.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AwsIoTCoreConfiguration"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "Update provisioning configuration.",
            "tags": [
              "aws"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AwsIoTCoreConfiguration"
                  }
                },
                "multipart/form-data": {
                  "schema": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AwsIoTCoreConfiguration"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "rootCaCertFile": {
                            "description": "trusted ca certificate",
                            "format": "binary",
                            "type": "string"
                          },
                          "caCertFile": {
                            "description": "device ca certificate",
                            "format": "binary",
                            "type": "string"
                          },
                          "caPkFile": {
                            "description": "device ca private key",
                            "format": "binary",
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "AWS iot device configuration",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AwsIoTCoreConfiguration"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/aws/shadow/reported": {
          "put": {
            "description": "reported twin properties.",
            "tags": [
              "aws"
            ],
            "responses": {
              "200": {
                "description": "twin properties setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "data": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "/aws/shadow/clear": {
          "put": {
            "description": "clear twin properties.",
            "tags": [
              "aws"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "example": [
                    "general",
                    "ethernets"
                  ]
                }
              }
            },
            "responses": {
              "200": {
                "description": "twin properties setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "data": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "/aws/store-and-forward": {
          "get": {
            "description": "get store and forward setting.",
            "tags": [
              "aws"
            ],
            "responses": {
              "200": {
                "description": "store and forward setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/StoreAndForward"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "update store and forward setting.",
            "tags": [
              "aws"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StoreAndForward"
                  },
                  "example": {
                    "enable": true,
                    "targetDiskName": "System",
                    "desiredDiskCacheSizeMB": 8,
                    "timeToLiveSec": 7200,
                    "dropBehavior": "oldest"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "store and forward setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/StoreAndForward"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/aws/messages": {
          "get": {
            "description": "get message groups setting.",
            "tags": [
              "aws"
            ],
            "responses": {
              "200": {
                "description": "message groups setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessagePolicyV20"
                      }
                    }
                  }
                }
              }
            }
          },
          "post": {
            "description": "create a message group.",
            "tags": [
              "aws"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessagePolicyV20"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "message group setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessagePolicyV20"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/aws/messages/{id}": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "message group id.",
              "schema": {
                "type": "integer"
              },
              "required": true
            }
          ],
          "get": {
            "description": "get message group setting.",
            "tags": [
              "aws"
            ],
            "responses": {
              "200": {
                "description": "message policy setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MessagePolicyV20"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "update message group setting.",
            "tags": [
              "aws"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessagePolicyV20"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "message group setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MessagePolicyV20"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "description": "delete message group setting.",
            "tags": [
              "aws"
            ],
            "responses": {
              "200": {
                "description": "message groups setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessagePolicyV20"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/aws/messages/test": {
          "put": {
            "description": "test custom payload.",
            "tags": [
              "aws"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "format": {
                        "type": "string"
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Tag"
                        }
                      }
                    }
                  },
                  "example": {
                    "format": "{ time : (now|todateiso8601), (.srcName) : { (.tagName) : .dataValue}}",
                    "tags": [
                      {
                        "srcName": "system",
                        "tagName": "cpuUsage",
                        "dataType": "int32",
                        "duration": 1000,
                        "dataUnit": "%",
                        "access": "ro"
                      }
                    ]
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "custom payload test results",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "object"
                        },
                        "error": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "data": {
                        "system": {
                          "cpuUsage": 60
                        },
                        "time": "2019-09-27T11:42:34Z"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-iotedge": {
          "get": {
            "description": "Get azure iotedge configuration.",
            "tags": [
              "azure_iotedge"
            ],
            "responses": {
              "200": {
                "description": "Azure iotedge configuration.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AzureIoTEdgeConfiguration"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "patch": {
            "description": "Update azure iotedge configuration.",
            "tags": [
              "azure_iotedge"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AzureIoTEdgeConfiguration"
                  },
                  "examples": {
                    "enable-service": {
                      "value": {
                        "provisioning": {
                          "enable": true
                        }
                      }
                    },
                    "provisioning-manual": {
                      "value": {
                        "provisioning": {
                          "source": "manual",
                          "connectionString": "[YOUR CONNECTION STRING]"
                        }
                      }
                    },
                    "provisioning-dps-tpm": {
                      "value": {
                        "provisioning": {
                          "source": "dps",
                          "method": "tpm",
                          "globalEndpoint": "https://global.azure-devices-provisioning.net",
                          "registrationId": "[registration ID]",
                          "scopeId": "[DEVICE SCOPE ID]"
                        }
                      }
                    },
                    "provisioning-dps-symmetricKey": {
                      "value": {
                        "provisioning": {
                          "source": "dps",
                          "method": "symmetricKey",
                          "globalEndpoint": "https://global.azure-devices-provisioning.net",
                          "registrationId": "[registration ID]",
                          "scopeId": "[DEVICE SCOPE ID]",
                          "symmetricKey": "[symmetric Key]"
                        }
                      }
                    },
                    "provisioning-dps-x509": {
                      "value": {
                        "provisioning": {
                          "source": "dps",
                          "method": "x509",
                          "globalEndpoint": "https://global.azure-devices-provisioning.net",
                          "scopeId": "[SCOPE ID]",
                          "registrationId": "",
                          "identityCert": "[CERT FILE CONTENT]",
                          "identityPk": "[KEY CONTENT]"
                        }
                      }
                    },
                    "downstreamCerts-default": {
                      "value": {
                        "downstreamCerts": {
                          "mode": "default"
                        }
                      }
                    },
                    "downstreamCerts-moxa": {
                      "value": {
                        "downstreamCerts": {
                          "mode": "moxa"
                        }
                      }
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "azure iotedge configuration",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AzureIoTEdgeConfiguration"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-iotedge/reset": {
          "put": {
            "description": "Reset AIE APP(include iotedge runtime pkgs).",
            "tags": [
              "azure_iotedge"
            ],
            "responses": {
              "202": {
                "description": "restart azure iotedge service success",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AzureIoTEdgeConfiguration"
                        }
                      },
                      "example": {
                        "data": {
                          "iotedge": {
                            "status": "resetting"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "reset failed",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "error": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "error": "reset iotedge failed"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-iotedge/restart": {
          "put": {
            "description": "Control azure iotedge service.",
            "tags": [
              "azure_iotedge"
            ],
            "responses": {
              "200": {
                "description": "restart azure iotedge service success",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AzureIoTEdgeConfiguration"
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "restart azure iotedge service failed",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "error": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "error": "restart iotedge failed"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-iotedge/modules/{name}/restart": {
          "put": {
            "description": "Restart azure module.",
            "tags": [
              "azure_iotedge"
            ],
            "parameters": [
              {
                "in": "path",
                "name": "name",
                "required": true,
                "schema": {
                  "type": "string",
                  "enum": [
                    "restart"
                  ]
                },
                "description": "control action."
              }
            ],
            "responses": {
              "200": {
                "description": "Restart azure iotedge modules success",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "data": "edgeAgent enable task is accepted"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Restart azure iotedge service/modules failed",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "error": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "error": "stop module is not allowed"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-iotedge/certificates": {
          "post": {
            "description": "Import user certificates and update azure iotedge configuration.",
            "tags": [
              "azure_iotedge"
            ],
            "requestBody": {
              "description": "The uploaded certificates and configuration.",
              "required": true,
              "content": {
                "multipart/form-data": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "caCertFile": {
                        "description": "device ca certificate",
                        "format": "binary",
                        "type": "string"
                      },
                      "caPkFile": {
                        "description": "device ca private key",
                        "format": "binary",
                        "type": "string"
                      },
                      "trustedCaFile": {
                        "description": "a file containing all the trusted CA",
                        "format": "binary",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "azure iotedge configuration",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AzureIoTEdgeConfiguration"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-iotedge/twin/reported": {
          "put": {
            "description": "reported twin properties.",
            "tags": [
              "azure_iotedge"
            ],
            "responses": {
              "200": {
                "description": "twin properties setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "data": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-iotedge/twin/clear": {
          "put": {
            "description": "clear twin properties.",
            "tags": [
              "azure_iotedge"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "example": [
                    "general",
                    "ethernets"
                  ]
                }
              }
            },
            "responses": {
              "200": {
                "description": "twin properties setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "data": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-iotedge/messages": {
          "get": {
            "description": "get message groups setting.",
            "tags": [
              "azure_iotedge"
            ],
            "responses": {
              "200": {
                "description": "message groups setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessagePolicyV20"
                      }
                    }
                  }
                }
              }
            }
          },
          "post": {
            "description": "create a message group.",
            "tags": [
              "azure_iotedge"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessagePolicyV20"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "message group setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessagePolicyV20"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-iotedge/messages/{id}": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "message group id.",
              "schema": {
                "type": "integer"
              },
              "required": true
            }
          ],
          "get": {
            "description": "get message group setting.",
            "tags": [
              "azure_iotedge"
            ],
            "responses": {
              "200": {
                "description": "message policy setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MessagePolicyV20"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "update message group setting.",
            "tags": [
              "azure_iotedge"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessagePolicyV20"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "message group setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MessagePolicyV20"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "description": "delete message group setting.",
            "tags": [
              "azure_iotedge"
            ],
            "responses": {
              "200": {
                "description": "message groups setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessagePolicyV20"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-iotedge/messages/test": {
          "put": {
            "description": "test custom payload.",
            "tags": [
              "azure_iotedge"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "format": {
                        "type": "string"
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Tag"
                        }
                      }
                    }
                  },
                  "example": {
                    "format": "{ time : (now|todateiso8601), (.srcName) : { (.tagName) : .dataValue}}",
                    "tags": [
                      {
                        "srcName": "system",
                        "tagName": "cpuUsage",
                        "dataType": "int32",
                        "duration": 1000,
                        "dataUnit": "%",
                        "access": "ro"
                      }
                    ]
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "custom payload test results",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "object"
                        },
                        "error": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "data": {
                        "system": {
                          "cpuUsage": 60
                        },
                        "time": "2019-09-27T11:42:34Z"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/sparkplug": {
          "get": {
            "parameters": [
              {
                "in": "query",
                "description": "Get runtime status, ex: {\"brokerList\":[{\"id\":1,\"status\":\"connected\"}]}",
                "name": "event",
                "schema": {
                  "type": "boolean"
                }
              }
            ],
            "description": "Get Sparkplug configuration.",
            "tags": [
              "sparkplug"
            ],
            "responses": {
              "200": {
                "description": "Sparkplug configuration.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SparkplugConfiguration"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "Update Sparkplug configuration.(BrokerList is readOnly in this endpoint)",
            "tags": [
              "sparkplug"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SparkplugConfiguration"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Sparkplug configuration",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SparkplugConfiguration"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/sparkplug/configuration": {
          "get": {
            "tags": [
              "sparkplug"
            ],
            "summary": "Download configurations",
            "parameters": [
              {
                "description": "Use password to encryption (default:true)",
                "in": "query",
                "name": "encryption",
                "schema": {
                  "default": true,
                  "type": "boolean"
                }
              },
              {
                "description": "password",
                "in": "header",
                "name": "password",
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "content": {
                  "application/zip": {
                    "schema": {
                      "format": "binary",
                      "type": "string"
                    }
                  }
                },
                "description": "success"
              }
            }
          },
          "put": {
            "tags": [
              "sparkplug"
            ],
            "summary": "Upload configurations",
            "requestBody": {
              "content": {
                "multipart/form-data": {
                  "schema": {
                    "properties": {
                      "decryption": {
                        "default": true,
                        "description": "Use password to decryption (default:true)",
                        "type": "boolean"
                      },
                      "file": {
                        "description": "configuration file",
                        "format": "binary",
                        "type": "string"
                      },
                      "password": {
                        "description": "password",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "fileName": "2019-12-19-13-52-backup.zip",
                        "fileSize": 46272
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "filename": {
                              "type": "string"
                            },
                            "filesize": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              },
              "400": {
                "content": {
                  "application/json": {
                    "examples": {
                      "extract1": {
                        "summary": "failed to extract",
                        "value": {
                          "error": {
                            "code": 10001,
                            "message": "extract: zip: not a valid zip file"
                          }
                        }
                      },
                      "extract2": {
                        "summary": "password error",
                        "value": {
                          "error": {
                            "code": 10001,
                            "message": "extract: zip: decryption error"
                          }
                        }
                      },
                      "filesize": {
                        "summary": "file size is over limitation",
                        "value": {
                          "error": {
                            "code": 10000,
                            "message": "file is over size"
                          }
                        }
                      }
                    },
                    "schema": {
                      "properties": {
                        "error": {
                          "properties": {
                            "code": {
                              "type": "integer"
                            },
                            "message": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "error"
              }
            }
          }
        },
        "/sparkplug/brokers": {
          "get": {
            "description": "Get Sparkplug brokers configuration.",
            "tags": [
              "sparkplug"
            ],
            "responses": {
              "200": {
                "description": "Sparkplug brokers configuration.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SparkplugBrokerConfiguration"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "Update Sparkplug brokers configuration.",
            "tags": [
              "sparkplug"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SparkplugBrokerConfiguration"
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Sparkplug configuration",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SparkplugBrokerConfiguration"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "post": {
            "description": "Create a new Sparkplug broker configuration.",
            "tags": [
              "sparkplug"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SparkplugBrokerConfiguration"
                  }
                },
                "multipart/form-data": {
                  "schema": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SparkplugBrokerConfiguration"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "rootCaCertFile": {
                            "description": "trusted ca certificate",
                            "format": "binary",
                            "type": "string"
                          },
                          "caCertFile": {
                            "description": "device ca certificate",
                            "format": "binary",
                            "type": "string"
                          },
                          "caPkFile": {
                            "description": "device ca private key",
                            "format": "binary",
                            "type": "string"
                          }
                        }
                      }
                    ]
                  },
                  "example": {
                    "enable": true,
                    "server": "test.sparkplug.org",
                    "port": 1883,
                    "keepAliveSec": 10,
                    "userName": "admin",
                    "password": "password"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Sparkplug configuration",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SparkplugBrokerConfiguration"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/sparkplug/brokers/{id}": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "broker id.",
              "schema": {
                "type": "integer"
              },
              "required": true
            }
          ],
          "put": {
            "description": "Update Sparkplug broker configuration.",
            "tags": [
              "sparkplug"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SparkplugBrokerConfiguration"
                  }
                },
                "multipart/form-data": {
                  "schema": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SparkplugBrokerConfiguration"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "rootCaCertFile": {
                            "description": "trusted ca certificate",
                            "format": "binary",
                            "type": "string"
                          },
                          "caCertFile": {
                            "description": "device ca certificate",
                            "format": "binary",
                            "type": "string"
                          },
                          "caPkFile": {
                            "description": "device ca private key",
                            "format": "binary",
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Sparkplug configuration",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SparkplugBrokerConfiguration"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "description": "Delete Sparkplug broker configuration.",
            "tags": [
              "sparkplug"
            ],
            "responses": {
              "200": {
                "description": "Sparkplug configuration",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SparkplugBrokerConfiguration"
                          }
                        }
                      }
                    },
                    "example": {
                      "data": []
                    }
                  }
                }
              }
            }
          }
        },
        "/sparkplug/node/reported": {
          "put": {
            "description": "reported node properties.",
            "tags": [
              "sparkplug"
            ],
            "responses": {
              "200": {
                "description": "node properties setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "data": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "/sparkplug/store-and-forward": {
          "get": {
            "description": "get store and forward setting.",
            "tags": [
              "sparkplug"
            ],
            "responses": {
              "200": {
                "description": "store and forward setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/StoreAndForwardWithBulkUpload"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "update store and forward setting.",
            "tags": [
              "sparkplug"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StoreAndForwardWithBulkUpload"
                  },
                  "example": {
                    "enable": true,
                    "targetDiskName": "System",
                    "desiredDiskCacheSizeMB": 8,
                    "timeToLiveSec": 7200,
                    "dropBehavior": "oldest",
                    "bulkUpload": {
                      "enable": false,
                      "size": 128
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "store and forward setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/StoreAndForwardWithBulkUpload"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/sparkplug/messages": {
          "parameters": [
            {
              "in": "query",
              "name": "type",
              "schema": {
                "type": "string",
                "enum": [
                  "node",
                  "device"
                ]
              }
            }
          ],
          "get": {
            "description": "get message groups setting.",
            "tags": [
              "sparkplug"
            ],
            "responses": {
              "200": {
                "description": "message groups setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SparkplugMessagePolicy"
                      }
                    }
                  }
                }
              }
            }
          },
          "post": {
            "description": "create a message group.",
            "tags": [
              "sparkplug"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SparkplugMessagePolicy"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "message group setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SparkplugMessagePolicy"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/sparkplug/messages/{id}": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "message group id.",
              "schema": {
                "type": "integer"
              },
              "required": true
            }
          ],
          "get": {
            "description": "get message group setting.",
            "tags": [
              "sparkplug"
            ],
            "responses": {
              "200": {
                "description": "message policy setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SparkplugMessagePolicy"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "update message group setting.",
            "tags": [
              "sparkplug"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SparkplugMessagePolicy"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "message group setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SparkplugMessagePolicy"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "description": "delete message group setting.",
            "tags": [
              "sparkplug"
            ],
            "responses": {
              "200": {
                "description": "message groups setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SparkplugMessagePolicy"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "servers": [
        {
          "url": "http://127.0.0.1/api/v1"
        }
      ]
    },
    "plugin-redoc-2": {
      "openapi": "3.0.0",
      "tags": [
        {
          "name": "tag"
        },
        {
          "name": "monitor"
        },
        {
          "name": "access"
        }
      ],
      "info": {
        "description": "TagService and TagHub API",
        "version": "2.0.0",
        "title": "Tag APIs"
      },
      "servers": [
        {
          "url": "http://127.0.0.1/api/v1"
        }
      ],
      "security": [
        {
          "bearerAuth": []
        }
      ],
      "paths": {
        "/tags/list": {
          "parameters": [
            {
              "name": "provider",
              "in": "query",
              "schema": {
                "type": "string"
              }
            }
          ],
          "get": {
            "tags": [
              "tag"
            ],
            "summary": "Get the list of all tags",
            "responses": {
              "200": {
                "description": "The request has succeeded.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/tag-list"
                    },
                    "examples": {
                      "modbusmaster": {
                        "$ref": "#/components/examples/modbusmasterTagList"
                      },
                      "system": {
                        "$ref": "#/components/examples/systemTagList"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/tags/monitor/{provider}/{source}": {
          "parameters": [
            {
              "name": "provider",
              "in": "path",
              "required": true,
              "description": "Provider Name - (system, module name, app name)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "source",
              "in": "path",
              "required": true,
              "description": "Source Name - (device name, function name)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tags",
              "in": "query",
              "description": "Tag Name - format (tags=name1,name2,name3)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "ms",
              "in": "query",
              "description": "history data search in milliseconds",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "streamInterval",
              "in": "query",
              "description": "create a http streaming connection and response data by milliseconds time interval",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "compute",
              "in": "query",
              "description": "apply a compute method during streaming",
              "schema": {
                "type": "string",
                "enum": [
                  "diff"
                ]
              }
            },
            {
              "name": "onChanged",
              "in": "query",
              "description": "create a http streaming connection and response data on tag value changed",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "get": {
            "tags": [
              "monitor"
            ],
            "summary": "Get monitoring tag values",
            "description": "Returns value of tags in taghub which queried by different sources and time",
            "responses": {
              "200": {
                "description": "response",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/tags-monitor"
                        }
                      }
                    },
                    "examples": {
                      "modbus_tcp_master": {
                        "$ref": "#/components/examples/tags-monitor"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/tags/access/{provider}/{source}/{tag}": {
          "parameters": [
            {
              "name": "provider",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "source",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tag",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "get": {
            "tags": [
              "access"
            ],
            "summary": "Direct read method by tag",
            "description": "Only 'r', 'rw' access type can work.",
            "responses": {
              "200": {
                "description": "Success",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/tags-access-response"
                    }
                  }
                }
              },
              "400": {
                "description": "Failure",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/tags-access-error"
                    }
                  }
                }
              }
            }
          },
          "put": {
            "tags": [
              "access"
            ],
            "summary": "Direct write method by tag",
            "description": "Only 'w', 'rw' access type can work.",
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/tags-access"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Success"
              },
              "400": {
                "description": "Failure",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/tags-access-error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "components": {
        "securitySchemes": {
          "bearerAuth": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT"
          }
        },
        "schemas": {
          "tag": {
            "type": "object",
            "properties": {
              "prvdName": {
                "type": "string"
              },
              "srcName": {
                "type": "string"
              },
              "tagName": {
                "type": "string"
              },
              "dataType": {
                "type": "string",
                "enum": [
                  "uint8",
                  "uint16",
                  "uint32",
                  "uint64",
                  "int8",
                  "int16",
                  "int32",
                  "int64",
                  "float",
                  "double",
                  "string",
                  "boolean",
                  "byte-array",
                  "raw"
                ]
              },
              "dataSize": {
                "type": "integer",
                "format": "int32"
              },
              "duration": {
                "type": "integer",
                "format": "int32"
              },
              "dataUnit": {
                "type": "string"
              },
              "access": {
                "type": "string",
                "enum": [
                  "r",
                  "w",
                  "rw"
                ]
              }
            }
          },
          "tag-list": {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "protocol-list": {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "tags-monitor": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "prvdName": {
                  "type": "string",
                  "description": "provider name (system, virtual, modules name)"
                },
                "srcName": {
                  "type": "string",
                  "description": "source name (device, function name)"
                },
                "tagName": {
                  "type": "string",
                  "description": "tag name"
                },
                "ts": {
                  "type": "integer",
                  "format": "int64",
                  "description": "the abbreviation of timestamp (microsecond)"
                },
                "dataType": {
                  "type": "string",
                  "enum": [
                    "uint8",
                    "uint16",
                    "uint32",
                    "uint64",
                    "int8",
                    "int16",
                    "int32",
                    "int64",
                    "float",
                    "double",
                    "string",
                    "boolean",
                    "byte-array",
                    "raw"
                  ]
                },
                "dataValue": {
                  "type": "object"
                },
                "dataUnit": {
                  "type": "string"
                }
              }
            }
          },
          "tags-access": {
            "type": "object",
            "properties": {
              "dataType": {
                "type": "string",
                "example": "int16"
              },
              "dataValue": {
                "type": "object",
                "example": 1
              }
            }
          },
          "tags-access-response": {
            "type": "object",
            "properties": {
              "prvdName": {
                "type": "string",
                "example": "modbus_tcp_master"
              },
              "srcName": {
                "type": "string",
                "example": "ioLogik"
              },
              "tagName": {
                "type": "string",
                "example": "di0"
              },
              "timestamp": {
                "type": "string",
                "example": "1560322153374"
              },
              "dataType": {
                "type": "string",
                "example": "uint16"
              },
              "dataValue": {
                "type": "object",
                "example": 1
              }
            }
          },
          "tags-access-error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              }
            }
          }
        },
        "examples": {
          "tags-monitor": {
            "value": {
              "data": {
                "prvdName": "modbus_tcp_master",
                "srcName": "ioLogik-E1210",
                "tagName": "di0",
                "dataType": "uint16",
                "dataValue": 1,
                "dataUnit": "mA",
                "ts": 1541409957933
              }
            }
          },
          "systemTagList": {
            "value": {
              "data": [
                {
                  "prvdName": "system",
                  "srcName": "cpu",
                  "tagName": "usage",
                  "dataType": "int32",
                  "dataSize": 1,
                  "dataUnit": "%",
                  "access": "r"
                }
              ]
            }
          },
          "modbusmasterTagList": {
            "value": {
              "data": [
                {
                  "prvdName": "modbus_tcp_master",
                  "srcName": "ioLogik",
                  "tagName": "di0",
                  "dataType": "byte-array",
                  "dataSize": 20,
                  "dataUnit": "mA",
                  "access": "r"
                }
              ]
            }
          }
        }
      }
    },
    "plugin-redoc-3": {
      "openapi": "3.0.0",
      "info": {
        "version": "2.2.0",
        "title": "ThingsPro Cloud APIs",
        "description": "ThingsPro Cloud APIs"
      },
      "components": {
        "securitySchemes": {
          "bearerAuth": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT"
          }
        },
        "examples": {
          "byInterval-allValues": {
            "value": {
              "id": 1,
              "enable": true,
              "description": "my message group",
              "outputTopic": "sample",
              "properties": [],
              "onChange": false,
              "minPublishInterval": 0,
              "samplingMode": "allValues",
              "customSamplingRate": false,
              "tags": {
                "modbus": {
                  "myDevice1": [
                    "di0",
                    "di1"
                  ]
                }
              },
              "pollingInterval": 0,
              "sendOutThreshold": {
                "mode": "byTime",
                "time": 60
              }
            }
          },
          "byInterval-latestValues": {
            "value": {
              "id": 1,
              "enable": true,
              "description": "my message group",
              "outputTopic": "sample",
              "properties": [],
              "onChange": false,
              "minPublishInterval": 0,
              "samplingMode": "latestValues",
              "customSamplingRate": false,
              "tags": {
                "modbus": {
                  "myDevice1": [
                    "di0",
                    "di1"
                  ]
                }
              },
              "pollingInterval": 0,
              "sendOutThreshold": {
                "mode": "byTime",
                "time": 60
              }
            }
          },
          "byInterval-allChangedValues": {
            "value": {
              "id": 1,
              "enable": true,
              "description": "my message group",
              "outputTopic": "sample",
              "properties": [],
              "onChange": true,
              "minPublishInterval": 0,
              "samplingMode": "allChangedValues",
              "customSamplingRate": false,
              "tags": {
                "modbus": {
                  "myDevice1": [
                    "di0",
                    "di1"
                  ]
                }
              },
              "pollingInterval": 0,
              "sendOutThreshold": {
                "mode": "byTime",
                "time": 60
              }
            }
          },
          "byInterval-latestChangedValues": {
            "value": {
              "id": 1,
              "enable": true,
              "description": "my message group",
              "outputTopic": "sample",
              "properties": [],
              "onChange": true,
              "minPublishInterval": 0,
              "samplingMode": "latestChangedValues",
              "customSamplingRate": false,
              "tags": {
                "modbus": {
                  "myDevice1": [
                    "di0",
                    "di1"
                  ]
                }
              },
              "pollingInterval": 0,
              "sendOutThreshold": {
                "mode": "byTime",
                "time": 60
              }
            }
          },
          "byInterval-custom": {
            "value": {
              "id": 1,
              "enable": true,
              "description": "my message group",
              "outputTopic": "sample",
              "properties": [],
              "onChange": true,
              "minPublishInterval": 0,
              "samplingMode": "allValues",
              "customSamplingRate": true,
              "tags": {
                "modbus": {
                  "myDevice1": [
                    "di0",
                    "di1"
                  ]
                }
              },
              "pollingInterval": 51,
              "sendOutThreshold": {
                "mode": "byTime",
                "time": 60
              }
            }
          },
          "immediately-onchange": {
            "value": {
              "id": 1,
              "enable": true,
              "description": "my message group",
              "outputTopic": "sample",
              "properties": [],
              "onChange": true,
              "minPublishInterval": 0,
              "samplingMode": "allValues",
              "customSamplingRate": false,
              "tags": {
                "modbus": {
                  "myDevice1": [
                    "di0",
                    "di1"
                  ]
                }
              },
              "pollingInterval": 0,
              "sendOutThreshold": {
                "mode": "immediately"
              }
            }
          },
          "bySize-enable-idle-timer": {
            "value": {
              "id": 1,
              "enable": true,
              "description": "my message group",
              "outputTopic": "sample",
              "properties": [],
              "onChange": true,
              "minPublishInterval": 0,
              "samplingMode": "allValues",
              "customSamplingRate": false,
              "tags": {
                "modbus": {
                  "myDevice1": [
                    "di0",
                    "di1"
                  ]
                }
              },
              "pollingInterval": 0,
              "sendOutThreshold": {
                "mode": "bySize",
                "size": 4096,
                "sizeIdleTimer": {
                  "enable": true,
                  "time": 60
                }
              }
            }
          },
          "bySize-disable-idle-timer": {
            "value": {
              "id": 1,
              "enable": true,
              "description": "my message group",
              "outputTopic": "sample",
              "properties": [],
              "onChange": true,
              "minPublishInterval": 0,
              "samplingMode": "allValues",
              "customSamplingRate": false,
              "tags": {
                "modbus": {
                  "myDevice1": [
                    "di0",
                    "di1"
                  ]
                }
              },
              "pollingInterval": 0,
              "sendOutThreshold": {
                "mode": "bySize",
                "size": 4096,
                "sizeIdleTimer": {
                  "enable": false
                }
              }
            }
          }
        },
        "schemas": {
          "MQTTConfiguration": {
            "title": "MQTT client configuration",
            "required": [
              "server",
              "port"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true
              },
              "enable": {
                "type": "boolean",
                "default": false
              },
              "status": {
                "type": "string",
                "enum": [
                  "disconnect",
                  "connecting",
                  "connectFailure",
                  "connected"
                ],
                "readOnly": true
              },
              "protocolVersion": {
                "type": "string",
                "description": "MQTT protocol version",
                "default": "3.1.1",
                "enum": [
                  3.1,
                  "3.1.1"
                ]
              },
              "server": {
                "type": "string",
                "description": "MQTT server(broker) ip or url"
              },
              "port": {
                "type": "integer"
              },
              "keepAliveSec": {
                "type": "integer",
                "default": 60,
                "minimum": 10,
                "maximum": 65536
              },
              "handshakeTimeout": {
                "type": "integer",
                "default": 10,
                "minimum": 10,
                "maximum": 600
              },
              "retryInterval": {
                "type": "integer",
                "default": 60,
                "minimum": 10,
                "maximum": 3600
              },
              "clearSession": {
                "type": "boolean",
                "default": true
              },
              "certificateOverTLS": {
                "type": "boolean",
                "default": false
              },
              "clientID": {
                "type": "string",
                "description": "Max length: 65536 in V3.1.1, 23 in V3.1"
              },
              "userName": {
                "type": "string",
                "maxLength": 255
              },
              "password": {
                "type": "string",
                "maxLength": 255
              },
              "tlsVersion": {
                "type": "string",
                "default": 1.2,
                "enum": [
                  1.3,
                  1.2,
                  1.1,
                  1
                ]
              },
              "insecureSkipVerify": {
                "type": "boolean",
                "default": false
              },
              "certificate": {
                "properties": {
                  "rootCaCertFile": {
                    "type": "string"
                  },
                  "caCertFile": {
                    "type": "string"
                  },
                  "caPkFile": {
                    "type": "string"
                  }
                }
              },
              "qos": {
                "type": "integer",
                "description": "support qos 0,1,2",
                "default": 1
              },
              "retain": {
                "type": "boolean",
                "default": false
              },
              "willMessage": {
                "properties": {
                  "enable": {
                    "type": "boolean",
                    "default": false
                  },
                  "topic": {
                    "description": "refer: http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718106",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 65536
                  },
                  "message": {
                    "type": "string"
                  },
                  "qos": {
                    "type": "integer"
                  },
                  "retain": {
                    "type": "boolean"
                  }
                }
              },
              "remoteAPI": {
                "description": "- ThingsPro Edge REST API invocation(request/response patten)\n- required headers:\n-  * request-expired-time: UTC\n-  * request-id: int string\n-  * example:\n      ```\n      # request\n      mosquitto_pub -t '/devices/1/request' \\\n         -m '{\"path\":\"/system/sshserver\",\"method\":\"PUT\",\"headers\":[{\"request-expired-time\":\"2020-11-12 11:45:26\"},{\"request-id\":\"1\"}],\"requestBody\":{\"enable\":true,\"port\":22}}'\n      # response, subscribe topic '/devices/1/response'\n      {\"request-id\":\"1\",\"state\":200,\"payload\":\"{\\\"data\\\":{\\\"type\\\":\\\"general\\\",\\\"description\\\":\\\"1\\\",\\\"hostName\\\":\\\"Moxa\\\",\\\"modelName\\\":\\\"UC-8100A-ME-T-LX\\\",\\\"deviceType\\\":\\\"gateway\\\",\\\"serialNumber\\\":\\\"TAICB1046773\\\",\\\"firmwareVersion\\\":\\\"1.3.1\\\",\\\"thingsproVersion\\\":\\\"1.1.0-594\\\",\\\"cpu\\\":\\\"ARMv7Processorrev2(v7l)\\\",\\\"memorySize\\\":1055838208,\\\"disk\\\":[{\\\"name\\\":\\\"System\\\",\\\"mount\\\":\\\"/\\\",\\\"device\\\":\\\"/dev/root\\\",\\\"total\\\":6827344896,\\\"free\\\":4880628736,\\\"used\\\":1659873280,\\\"percent\\\":25.37837731628948,\\\"tags\\\":{\\\"used\\\":\\\"systemDiskUsed\\\",\\\"free\\\":\\\"systemDiskFree\\\",\\\"percent\\\":\\\"systemDiskPercent\\\"}}],\\\"lastBootTime\\\":\\\"2019-12-20T11:31:20+08:00\\\"}}\"}\n      ```\n",
                "properties": {
                  "enable": {
                    "type": "boolean",
                    "default": false
                  },
                  "requestSubTopic": {
                    "description": "refer: http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718106",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 65536
                  },
                  "responsePubTopic": {
                    "description": "refer: http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718106",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 65536
                  },
                  "qos": {
                    "default": 1,
                    "type": "integer"
                  },
                  "retain": {
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            },
            "example": {
              "id": 1,
              "enable": true,
              "status": "connected",
              "protocolVersion": "3.1.1",
              "server": "127.0.0.1",
              "port": 1883,
              "keepAliveSec": 60,
              "handshakeTimeout": 10,
              "retryInterval": 60,
              "clearSession": true,
              "certificateOverTLS": false,
              "clientID": "mydevice1",
              "userName": "moxa",
              "password": "123",
              "tlsVersion": "1.2",
              "insecureSkipVerify": false,
              "certificate": {
                "rootCaCertFile": "",
                "caCertFile": "",
                "caPkFile": ""
              },
              "qos": 1,
              "retain": false,
              "willMessage": {
                "enable": true,
                "topic": "/devices/1/will",
                "message": "dead",
                "qos": 1,
                "retain": true
              },
              "remoteAPI": {
                "enable": true,
                "requestSubTopic": "/devices/1/request",
                "responsePubTopic": "/devices/1/response",
                "ttl": 60,
                "qos": 1,
                "retain": false
              }
            }
          },
          "DLMConfiguration": {
            "title": "DLM configuration",
            "description": "- \"DLM connection status.\"\n- \"Event: reference thingspro event/log API to listen events(label=[\\\"notification\\\", \\\"dlm\\\"])\"\n",
            "properties": {
              "connection": {
                "type": "object",
                "properties": {
                  "enable": {
                    "type": "boolean",
                    "description": "DLM enable/disable",
                    "default": true
                  },
                  "retryDelaySec": {
                    "type": "integer",
                    "description": "Delay between retries.",
                    "default": 10,
                    "minimum": 10,
                    "maximum": 86400
                  },
                  "picTarget": {
                    "type": "string",
                    "description": "PIC target",
                    "default": "prod",
                    "enum": [
                      "prod",
                      "stage",
                      "develop"
                    ]
                  }
                }
              },
              "certificates": {
                "type": "object",
                "properties": {
                  "caCertFile": {
                    "type": "string",
                    "description": "device ca certificate file name"
                  },
                  "caPkFile": {
                    "description": "device ca private key file name",
                    "type": "string"
                  },
                  "certificateInfo": {
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                      "issuerCN": {
                        "type": "string",
                        "readOnly": true
                      },
                      "notBefore": {
                        "type": "string",
                        "readOnly": true
                      },
                      "notAfter": {
                        "type": "string",
                        "readOnly": true
                      },
                      "modelName": {
                        "type": "string",
                        "readOnly": true
                      },
                      "macAddress": {
                        "type": "string",
                        "readOnly": true
                      },
                      "serialNumber": {
                        "type": "string",
                        "readOnly": true
                      }
                    }
                  }
                }
              },
              "connectionStatus": {
                "type": "object",
                "properties": {
                  "projectName": {
                    "type": "string",
                    "readOnly": true
                  },
                  "status": {
                    "type": "string",
                    "description": "DLM connection status.",
                    "readOnly": true,
                    "enum": [
                      "connecting",
                      "connectFailure",
                      "connected"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "readOnly": true,
                    "description": "DLM error message."
                  },
                  "lastConnectTime": {
                    "readOnly": true,
                    "type": "string",
                    "description": "last connect start time, format: \"Mon Jan _2 15:04:05 2006\""
                  },
                  "lastConnectedTime": {
                    "readOnly": true,
                    "type": "string",
                    "description": "last connected time, format: \"Mon Jan _2 15:04:05 2006\""
                  },
                  "statuslastUpdateTime": {
                    "readOnly": true,
                    "type": "string",
                    "description": "connection status last update time, format: \"Mon Jan _2 15:04:05 2006\""
                  }
                }
              }
            },
            "example": {
              "data": {
                "connection": {
                  "enable": true,
                  "retryDelaySec": 10
                },
                "certificates": {
                  "caPkFile": "device.key",
                  "caCertFile": "device.crt",
                  "certificateInfo": {
                    "issuerCN": "Apollo intermediate CA",
                    "notBefore": "Sep 20, 2019, 01:07:06",
                    "notAfter": "Jul 7, 2037, 01:07:06",
                    "modelName": "UC-8100A-ME-T",
                    "macAddress": "00:90:e8:00:02:42",
                    "serialNumber": "MOXA00000469"
                  }
                },
                "connectionStatus": {
                  "projectName": "myProject",
                  "status": "connecting",
                  "message": "",
                  "lastConnectedTime": "Sep 23, 2019, 10:00:01",
                  "lastConnectTime": "Sep 23, 2019, 10:00:01",
                  "statuslastUpdateTime": "Sep 24, 2019, 08:31:44"
                }
              }
            }
          },
          "AzureIoTDeviceConfiguration": {
            "title": "Azure IoT Device configuration",
            "properties": {
              "status": {
                "type": "string",
                "readOnly": true,
                "description": "The iot device service status.",
                "default": "disconnect",
                "enum": [
                  "disconnect",
                  "connecting",
                  "connectFailure",
                  "connected"
                ]
              },
              "provisioning": {
                "properties": {
                  "enable": {
                    "type": "boolean",
                    "default": false
                  },
                  "protocol": {
                    "type": "object",
                    "properties": {
                      "capabilities": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "protocol": {
                              "type": "string"
                            },
                            "port": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "protocol": {
                        "type": "string",
                        "description": "Communication protocol",
                        "default": "mqtt"
                      },
                      "port": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Communication protocol used port"
                      }
                    }
                  },
                  "keepAlive": {
                    "type": "integer",
                    "description": "unit: second",
                    "default": 60,
                    "minimum": 1,
                    "maximum": 3600
                  },
                  "supportTwin": {
                    "type": "boolean",
                    "default": true
                  },
                  "authenticationType": {
                    "type": "string",
                    "description": "The identity provisioning mode of the iot device.",
                    "default": "symmetricKey",
                    "enum": [
                      "x509",
                      "symmetricKey"
                    ]
                  },
                  "connectionString": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1024
                  },
                  "certificate": {
                    "description": "X509 certificate",
                    "properties": {
                      "caCertFile": {
                        "type": "string",
                        "description": "device ca certificate file name"
                      },
                      "caPkFile": {
                        "description": "device ca private key file name",
                        "type": "string"
                      }
                    }
                  },
                  "rootCaCertFile": {
                    "description": "root ca certificate file name",
                    "type": "string"
                  }
                }
              }
            },
            "example": {
              "status": "connected",
              "provisioning": {
                "authenticationType": "symmetricKey",
                "connectionString": "[connection string]",
                "enable": true,
                "protocol": {
                  "capabilities": [
                    {
                      "protocol": "mqtt",
                      "port": 8883
                    },
                    {
                      "protocol": "mqttOverWebsocket",
                      "port": 443
                    },
                    {
                      "protocol": "amqp",
                      "port": 5671
                    },
                    {
                      "protocol": "amqpOverWebsocket",
                      "port": 443
                    }
                  ],
                  "protocol": "mqtt",
                  "port": 8883
                },
                "supportTwin": true,
                "certificate": {
                  "caPkFile": "device.key",
                  "caCertFile": "device.crt"
                },
                "rootCaCertFile": "root.crt"
              }
            }
          },
          "AwsIoTCoreConfiguration": {
            "title": "AWS IoT Device configuration",
            "properties": {
              "status": {
                "type": "string",
                "readOnly": true,
                "description": "The iot device service status.",
                "enum": [
                  "disconnect",
                  "connecting",
                  "connectFailure",
                  "connected"
                ]
              },
              "provisioning": {
                "properties": {
                  "enable": {
                    "type": "boolean",
                    "default": false
                  },
                  "host": {
                    "type": "string"
                  },
                  "port": {
                    "type": "integer",
                    "default": 8883
                  },
                  "thingID": {
                    "type": "string"
                  },
                  "messageQOS": {
                    "type": "integer",
                    "default": 0
                  },
                  "keepAliveSec": {
                    "type": "integer",
                    "description": "unit: second",
                    "default": 60,
                    "minimum": 1,
                    "maximum": 3600
                  },
                  "supportDM": {
                    "type": "boolean",
                    "default": true
                  },
                  "certificate": {
                    "properties": {
                      "rootCaCertFile": {
                        "type": "string"
                      },
                      "caCertFile": {
                        "type": "string"
                      },
                      "caPkFile": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "example": {
              "status": "connected",
              "provisioning": {
                "enable": true,
                "host": "a22j5sm6o3yzc5.iot.us-east-1.amazonaws.com",
                "port": 8883,
                "thingID": "MyThingsproEdge",
                "supportDM": true,
                "messageQOS": 0,
                "certificate": {
                  "rootCaCertFile": "rootCA.crt",
                  "caPkFile": "private.key",
                  "caCertFile": "device.crt"
                }
              }
            }
          },
          "BlukConfiguration": {
            "title": "Bluk Upload Configuration",
            "description": "Bulk data upload to server after device status change to connected.",
            "required": [
              "enable",
              "size"
            ],
            "properties": {
              "enable": {
                "type": "boolean",
                "default": false
              },
              "size": {
                "type": "integer",
                "description": "unit: KB",
                "default": 128,
                "minimum": 1,
                "maximum": 1024
              }
            }
          },
          "SparkplugBrokerConfiguration": {
            "title": "Sparkplug broker configuration",
            "required": [
              "server",
              "port"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true
              },
              "status": {
                "type": "string",
                "readOnly": true,
                "description": "Connection status.",
                "enum": [
                  "disconnect",
                  "connecting",
                  "connectFailure",
                  "connected"
                ]
              },
              "lastConectedTime": {
                "type": "string",
                "readOnly": true,
                "default": ""
              },
              "enable": {
                "type": "boolean",
                "default": false
              },
              "server": {
                "type": "string",
                "description": "MQTT server(broker) ip or url"
              },
              "port": {
                "type": "integer",
                "minimum": 1,
                "maximum": 65536
              },
              "keepAliveSec": {
                "type": "integer",
                "default": 60,
                "minimum": 10,
                "maximum": 65536
              },
              "certificateOverTLS": {
                "type": "boolean",
                "default": false
              },
              "clientID": {
                "type": "string",
                "description": "Max length: 65536 in V3.1.1, 23 in V3.1"
              },
              "userName": {
                "type": "string",
                "maxLength": 255
              },
              "password": {
                "type": "string",
                "maxLength": 255
              },
              "tlsVersion": {
                "type": "string",
                "default": 1.2,
                "enum": [
                  "1.3",
                  "1.2",
                  "1.1",
                  "1.0"
                ]
              },
              "insecureSkipVerify": {
                "type": "boolean",
                "default": false
              },
              "certificate": {
                "properties": {
                  "rootCaCertFile": {
                    "type": "string"
                  },
                  "caCertFile": {
                    "type": "string"
                  },
                  "caPkFile": {
                    "type": "string"
                  }
                }
              }
            },
            "example": {
              "id": 1,
              "enable": true,
              "status": "connected",
              "lastConnectedTime": "May 20, 2020, 14:05",
              "server": "test.sparkplug.org",
              "port": 1883,
              "keepAliveSec": 10,
              "userName": "admin",
              "password": "password"
            }
          },
          "SparkplugConfiguration": {
            "title": "Sparkplug configuration",
            "required": [
              "nodeID",
              "groupID"
            ],
            "properties": {
              "enable": {
                "type": "boolean",
                "default": false
              },
              "enableDM": {
                "type": "boolean",
                "default": false
              },
              "nodeID": {
                "description": "The format can be valid UTF-8 alphanumeric String with the exception of the reserved characters of \"+\", \"/\", \"#\"",
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "groupID": {
                "description": "The format can be valid UTF-8 alphanumeric String with the exception of the reserved characters of \"+\", \"/\", \"#\"",
                "type": "string",
                "minLength": 1,
                "maxLength": 255
              },
              "uuid": {
                "description": "The format can be valid UTF-8 alphanumeric String. UUID to track message type in terms of schema definitions",
                "type": "string",
                "minLength": 0,
                "maxLength": 255
              },
              "primaryHostID": {
                "type": "string",
                "description": "The format can be valid UTF-8 alphanumeric String.",
                "minLength": 0,
                "maxLength": 255
              },
              "handshakeTimeout": {
                "type": "integer",
                "default": 10,
                "minimum": 1,
                "maximum": 600
              },
              "maxRetries": {
                "type": "integer",
                "default": 3,
                "minimum": 0,
                "maximum": 60
              },
              "retryInterval": {
                "type": "integer",
                "default": 60,
                "minimum": 10,
                "maximum": 3600
              },
              "bulkUpload": {
                "$ref": "#/components/schemas/BlukConfiguration"
              },
              "brokerList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SparkplugBrokerConfiguration"
                }
              }
            },
            "example": {
              "enable": true,
              "enableDM": false,
              "nodeID": "gary",
              "groupID": "thingspro-edges",
              "uuid": "",
              "primaryHostID": "garyig",
              "handshakeTimeout": 10,
              "retryInterval": 10,
              "maxRetries": 3,
              "bulkUpload": {
                "enable": false,
                "size": 128
              },
              "brokerList": [
                {
                  "id": 1,
                  "enable": true,
                  "status": "connected",
                  "lastConnectedTime": "May 20, 2020, 14:05",
                  "server": "test.sparkplug.org",
                  "port": 1883,
                  "keepAliveSec": 10,
                  "userName": "admin",
                  "password": "password"
                }
              ]
            }
          },
          "AzureIoTEdgeConfiguration": {
            "title": "Azure IoT Edge configuration",
            "properties": {
              "iotedge": {
                "description": "IoT Edge runtime information",
                "properties": {
                  "version": {
                    "type": "string",
                    "readOnly": true
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "resetting",
                      "running",
                      "dead",
                      "exited",
                      "waiting"
                    ],
                    "readOnly": true
                  },
                  "since": {
                    "type": "string",
                    "example": "Mon 2016-10-07 09:49:16 CST",
                    "readOnly": true
                  },
                  "match": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "suggestion": {
                    "type": "string",
                    "readOnly": true
                  },
                  "modules": {
                    "type": "array",
                    "items": {
                      "description": "IoT Edge modules runtime information",
                      "type": "object",
                      "properties": {
                        "status": {
                          "description": "One of created, restarting, running, removing, paused, exited, or dead",
                          "readOnly": true,
                          "type": "string"
                        },
                        "config": {
                          "description": "docker image URL",
                          "readOnly": true,
                          "type": "string"
                        },
                        "description": {
                          "readOnly": true,
                          "type": "string"
                        },
                        "name": {
                          "description": "module name",
                          "readOnly": true,
                          "type": "string"
                        },
                        "match": {
                          "type": "boolean",
                          "readOnly": true
                        },
                        "suggestion": {
                          "type": "string",
                          "readOnly": true
                        }
                      }
                    }
                  }
                }
              },
              "provisioning": {
                "properties": {
                  "enable": {
                    "type": "boolean",
                    "default": false
                  },
                  "supportTwin": {
                    "type": "boolean"
                  },
                  "globalEndpoint": {
                    "type": "string",
                    "description": "DPS url",
                    "default": "https://global.azure-devices-provisioning.net"
                  },
                  "source": {
                    "type": "string",
                    "description": "The identity provisioning mode of the iotedge.",
                    "default": "manual",
                    "enum": [
                      "manual",
                      "dps"
                    ]
                  },
                  "method": {
                    "type": "string",
                    "description": "The identity provisioning mode of the iotedge.",
                    "default": "tpm",
                    "enum": [
                      "tpm",
                      "symmetricKey",
                      "x509"
                    ]
                  },
                  "connectionString": {
                    "type": "string",
                    "description": "for source:manual",
                    "minLength": 1,
                    "maxLength": 1024
                  },
                  "scopeId": {
                    "description": "for source:dps; Value of a specific DPS instance's ID scope",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 128
                  },
                  "symmetricKey": {
                    "description": "for source:dps,method:symmetricKey",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 256
                  },
                  "identityCert": {
                    "description": "for source:dps,method:x509",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1024
                  },
                  "identityPk": {
                    "description": "for source:dps,method:x509",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1024
                  },
                  "registrationId": {
                    "description": "Use only lowercase alphanumeric and dash ('-') characters. For example, symm-key-device-007\n",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 128
                  },
                  "endorsementKey": {
                    "description": "for source:dps,method:tpm;",
                    "type": "string",
                    "readOnly": true
                  }
                }
              },
              "downstreamCerts": {
                "properties": {
                  "mode": {
                    "type": "string",
                    "description": "The identity certication mode of the iotedge.",
                    "default": "default",
                    "enum": [
                      "default",
                      "user",
                      "moxa"
                    ]
                  },
                  "caCertFile": {
                    "type": "string",
                    "description": "device ca certificate file name"
                  },
                  "caPkFile": {
                    "description": "device ca private key file name",
                    "type": "string"
                  },
                  "trustedCaFile": {
                    "type": "string",
                    "description": "a file containing all the trusted CA"
                  },
                  "certificateInfo": {
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                      "issuer": {
                        "type": "string",
                        "readOnly": true
                      },
                      "notAfter": {
                        "type": "string",
                        "readOnly": true
                      },
                      "subject": {
                        "type": "object",
                        "properties": {
                          "cn": {
                            "type": "string",
                            "readOnly": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "StoreAndForward": {
            "title": "Store and forward configuration",
            "properties": {
              "enable": {
                "type": "boolean",
                "default": false
              },
              "targetDiskName": {
                "type": "string"
              },
              "desiredDiskCacheSizeMB": {
                "type": "integer"
              },
              "timeToLiveSec": {
                "type": "integer"
              },
              "dropBehavior": {
                "type": "string",
                "enum": [
                  "oldest",
                  "newest"
                ]
              },
              "disks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "readOnly": true
                    },
                    "mount": {
                      "type": "string",
                      "readOnly": true
                    },
                    "device": {
                      "type": "string",
                      "readOnly": true
                    },
                    "total": {
                      "type": "integer",
                      "readOnly": true
                    },
                    "used": {
                      "type": "integer",
                      "readOnly": true
                    },
                    "free": {
                      "type": "integer",
                      "readOnly": true
                    }
                  }
                }
              }
            },
            "example": {
              "enable": true,
              "targetDiskName": "System",
              "desiredDiskCacheSizeMB": 8,
              "timeToLiveSec": 7200,
              "dropBehavior": "oldest",
              "disks": [
                {
                  "name": "System",
                  "mount": "/",
                  "device": "/dev/root",
                  "total": 3206059008,
                  "used": 6059008,
                  "free": 3200000000
                }
              ]
            }
          },
          "MessagePolicyV20": {
            "title": "Message upload group configuration (version: 2.0)",
            "required": [
              "id",
              "enable",
              "tags",
              "pollingInterval",
              "sentOutThreshold",
              "outputTopic"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true
              },
              "enable": {
                "type": "boolean"
              },
              "properties": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "key",
                    "value"
                  ],
                  "properties": {
                    "key": {
                      "type": "string",
                      "minLength": 1
                    },
                    "value": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                }
              },
              "tags": {
                "type": "object",
                "properties": {
                  "moduleName": {
                    "type": "object",
                    "properties": {
                      "sourceName": {
                        "type": "array",
                        "items": {
                          "description": "tag name",
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 255
                        }
                      }
                    }
                  }
                }
              },
              "outputTopic": {
                "type": "string",
                "default": "sample",
                "minLength": 1
              },
              "pollingInterval": {
                "type": "integer",
                "description": "unit:second",
                "default": 0,
                "minLength": 0,
                "maxLength": 86400
              },
              "sendOutThreshold": {
                "type": "object",
                "properties": {
                  "size": {
                    "description": "unit:byte",
                    "type": "integer",
                    "default": 4096,
                    "minimum": 0,
                    "maximum": 262144
                  },
                  "time": {
                    "description": "unit:second",
                    "type": "integer",
                    "default": 60,
                    "minimum": 0,
                    "maximum": 86400
                  }
                }
              },
              "format": {
                "description": "jq filter string, use to change message format.\n- empty means use default message format: `{tags:{(.prvdName):{(.srcName):{(.tagName):{values:[{updateTimeStamp:(.ts/1000|todateiso8601),value:.dataValue}]}}}}}`\n",
                "type": "string",
                "default": "",
                "minLength": 0,
                "maxLength": 4096
              }
            },
            "example": {
              "id": 1,
              "enable": true,
              "outputTopic": "sample2",
              "properties": [],
              "tags": {
                "modbus": {
                  "myDevice1": [
                    "di0",
                    "di1"
                  ]
                },
                "system": {
                  "system": [
                    "cpuUsage",
                    "memoryUsage"
                  ]
                }
              },
              "pollingInterval": 5,
              "sendOutThreshold": {
                "size": 4096,
                "time": 120
              },
              "format": ""
            }
          },
          "MessagePolicy": {
            "title": "Message upload group configuration",
            "required": [
              "id",
              "enable",
              "tags",
              "sendOutThreshold",
              "outputTopic"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true
              },
              "enable": {
                "type": "boolean"
              },
              "description": {
                "type": "string",
                "maxLength": 1024
              },
              "format": {
                "description": "jq filter string, use to change message format.\n- empty means use default message format: {tags:{(.prvdName):{(.srcName):{(.tagName):{values:[{updateTimeStamp:(.ts/1000|todateiso8601),value:.dataValue}]}}}}}\n",
                "type": "string",
                "default": "",
                "minLength": 0,
                "maxLength": 4096
              },
              "properties": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "key",
                    "value"
                  ],
                  "properties": {
                    "key": {
                      "type": "string",
                      "minLength": 1
                    },
                    "value": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                }
              },
              "tags": {
                "type": "object",
                "properties": {
                  "moduleName": {
                    "type": "object",
                    "properties": {
                      "sourceName": {
                        "type": "array",
                        "items": {
                          "description": "tag name",
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 255
                        }
                      }
                    }
                  }
                }
              },
              "outputTopic": {
                "type": "string",
                "default": "sample",
                "minLength": 1
              },
              "onChange": {
                "description": "drop data if same with latest when enable onChange.",
                "type": "boolean",
                "readOnly": true
              },
              "minPublishInterval": {
                "description": "a fixed interval between the two publish. unit:second",
                "type": "integer",
                "default": 0,
                "minimum": 0,
                "maximum": 10
              },
              "samplingMode": {
                "type": "string",
                "default": "allChangedValues",
                "enum": [
                  "allValues",
                  "latestValues",
                  "allChangedValues",
                  "latestChangedValues"
                ]
              },
              "customSamplingRate": {
                "description": "enable will use the pollingInterval that user input.",
                "type": "boolean",
                "default": false
              },
              "pollingInterval": {
                "type": "integer",
                "description": "unit:second, 0 means subscribe mode",
                "default": 0,
                "minLength": 0,
                "maxLength": 86400
              },
              "sendOutThreshold": {
                "type": "object",
                "properties": {
                  "mode": {
                    "type": "string",
                    "default": "byTime",
                    "enum": [
                      "byTime",
                      "bySize",
                      "immediately"
                    ]
                  },
                  "time": {
                    "description": "unit:second",
                    "type": "integer",
                    "default": 60,
                    "minimum": 0,
                    "maximum": 86400
                  },
                  "size": {
                    "description": "unit:byte",
                    "type": "integer",
                    "default": 4096,
                    "minimum": 0,
                    "maximum": 262144
                  },
                  "sizeIdleTimer": {
                    "type": "object",
                    "properties": {
                      "enable": {
                        "type": "boolean",
                        "default": true
                      },
                      "time": {
                        "description": "unit:second",
                        "type": "integer",
                        "default": 60,
                        "minimum": 0,
                        "maximum": 86400
                      }
                    }
                  }
                }
              }
            },
            "example": {
              "id": 1,
              "enable": true,
              "description": "my message group",
              "outputTopic": "sample",
              "properties": [],
              "onChange": false,
              "minPublishInterval": 0,
              "samplingMode": "allValues",
              "customSamplingRate": false,
              "tags": {
                "modbus": {
                  "myDevice1": [
                    "di0",
                    "di1"
                  ]
                }
              },
              "pollingInterval": 0,
              "sendOutThreshold": {
                "mode": "byTime",
                "time": 60
              }
            }
          },
          "SparkplugMessagePolicy": {
            "title": "Sparkplug Message upload group configuration",
            "required": [
              "id",
              "enable",
              "tags",
              "sendOutThreshold"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true
              },
              "enable": {
                "type": "boolean"
              },
              "description": {
                "type": "string",
                "maxLength": 1024
              },
              "tags": {
                "type": "object",
                "properties": {
                  "moduleName": {
                    "type": "object",
                    "properties": {
                      "sourceName": {
                        "type": "array",
                        "items": {
                          "description": "tag name",
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 255
                        }
                      }
                    }
                  }
                }
              },
              "onChange": {
                "description": "drop data if same with latest when enable onChange.",
                "type": "boolean",
                "readOnly": true
              },
              "minPublishInterval": {
                "description": "a fixed interval between the two publish. unit:second",
                "type": "integer",
                "default": 0,
                "minimum": 0,
                "maximum": 10
              },
              "samplingMode": {
                "type": "string",
                "default": "allChangedValues",
                "enum": [
                  "allValues",
                  "latestValues",
                  "allChangedValues",
                  "latestChangedValues"
                ]
              },
              "customSamplingRate": {
                "description": "enable will use the pollingInterval that user input.",
                "type": "boolean",
                "default": false
              },
              "pollingInterval": {
                "type": "integer",
                "description": "unit:second, 0 means subscribe mode",
                "default": 10,
                "minLength": 0,
                "maxLength": 86400
              },
              "sendOutThreshold": {
                "type": "object",
                "properties": {
                  "mode": {
                    "type": "string",
                    "default": "byTime",
                    "enum": [
                      "byTime",
                      "bySize",
                      "immediately"
                    ]
                  },
                  "time": {
                    "description": "unit:second",
                    "type": "integer",
                    "default": 60,
                    "minimum": 0,
                    "maximum": 86400
                  },
                  "size": {
                    "description": "unit:byte",
                    "type": "integer",
                    "default": 4096,
                    "minimum": 0,
                    "maximum": 262144
                  },
                  "sizeIdleTimer": {
                    "type": "object",
                    "properties": {
                      "enable": {
                        "type": "boolean",
                        "default": true
                      },
                      "time": {
                        "description": "unit:second",
                        "type": "integer",
                        "default": 60,
                        "minimum": 0,
                        "maximum": 86400
                      }
                    }
                  }
                }
              }
            },
            "example": {
              "id": 1,
              "enable": true,
              "description": "my message group",
              "properties": [],
              "onChange": false,
              "minPublishInterval": 0,
              "samplingMode": "allValues",
              "customSamplingRate": false,
              "tags": {
                "modbus": {
                  "myDevice1": [
                    "di0",
                    "di1"
                  ]
                }
              },
              "pollingInterval": 0,
              "sendOutThreshold": {
                "mode": "byTime",
                "time": 60
              }
            }
          },
          "Tag": {
            "type": "object",
            "properties": {
              "srcName": {
                "type": "string"
              },
              "tagName": {
                "type": "string"
              },
              "dataType": {
                "type": "string",
                "enum": [
                  "uint8",
                  "uint16",
                  "uint32",
                  "uint64",
                  "int16",
                  "int32",
                  "int64",
                  "float32",
                  "float64",
                  "string",
                  "boolean",
                  "bytearray"
                ]
              },
              "duration": {
                "type": "integer",
                "format": "int32"
              },
              "dataUnit": {
                "type": "string"
              },
              "access": {
                "type": "string",
                "enum": [
                  "ro",
                  "wo",
                  "rw"
                ]
              }
            },
            "example": {
              "srcName": "system",
              "tagName": "cpuUsage",
              "dataType": "int32",
              "duration": 1000,
              "dataUnit": "%",
              "access": "ro"
            }
          },
          "DeviceProperties": {
            "type": "object",
            "properties": {
              "$origin": {
                "type": "object",
                "properties": {
                  "$resource": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "reportedPath",
                        "desiredPath"
                      ],
                      "properties": {
                        "source": {
                          "type": "string",
                          "description": "json path of property in resource; empty == \".\"(complete json object/array)"
                        },
                        "reportedPath": {
                          "type": "string",
                          "description": "json path of reported property."
                        },
                        "desiredPath": {
                          "type": "string",
                          "description": "json path of desired property."
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": {
              "device": {
                "general": [
                  {
                    "reportedPath": "general",
                    "desiredPath": "general"
                  }
                ],
                "wan": [
                  {
                    "reportedPath": "wan",
                    "desiredPath": "wan"
                  }
                ]
              }
            }
          },
          "CloudSupportList": {
            "type": "string",
            "description": "Cloud APP support cloud list.",
            "enum": [
              "azure-iotedge",
              "azure-device",
              "dlm",
              "mqtt",
              "aws"
            ]
          }
        }
      },
      "security": [
        {
          "bearerAuth": []
        }
      ],
      "paths": {
        "/mqtt": {
          "get": {
            "description": "Get MQTT client configuration.",
            "tags": [
              "mqtt"
            ],
            "responses": {
              "200": {
                "description": "MQTT client configuration.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MQTTConfiguration"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "post": {
            "description": "Create a MQTT client configuration.",
            "tags": [
              "mqtt"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MQTTConfiguration"
                  }
                },
                "multipart/form-data": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "rootCaCertFile": {
                        "description": "trusted ca certificate",
                        "format": "binary",
                        "type": "string"
                      },
                      "caCertFile": {
                        "description": "device ca certificate",
                        "format": "binary",
                        "type": "string"
                      },
                      "caPkFile": {
                        "description": "device ca private key",
                        "format": "binary",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "MQTT client configuration.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MQTTConfiguration"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/mqtt/{id}": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "the `id` in the configuration of mqtt clients.",
              "schema": {
                "type": "integer"
              },
              "required": true
            }
          ],
          "put": {
            "description": "Edit MQTT client configuration.",
            "tags": [
              "mqtt"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MQTTConfiguration"
                  }
                },
                "multipart/form-data": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "rootCaCertFile": {
                        "description": "trusted ca certificate",
                        "format": "binary",
                        "type": "string"
                      },
                      "caCertFile": {
                        "description": "device ca certificate",
                        "format": "binary",
                        "type": "string"
                      },
                      "caPkFile": {
                        "description": "device ca private key",
                        "format": "binary",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "MQTT client configuration.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MQTTConfiguration"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "description": "delete MQTT client configuration.",
            "tags": [
              "mqtt"
            ],
            "responses": {
              "200": {
                "description": "MQTT client configuration.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MQTTConfiguration"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/mqtt/{id}/certificates": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "the `id` in the configuration of mqtt clients.",
              "schema": {
                "type": "integer"
              },
              "required": true
            }
          ],
          "delete": {
            "description": "delete certficate.",
            "tags": [
              "mqtt"
            ],
            "responses": {
              "200": {
                "description": "MQTT client configuration",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MQTTConfiguration"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/mqtt/{id}/store-and-forward": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "the `id` in the configuration of mqtt clients.",
              "schema": {
                "type": "integer"
              },
              "required": true
            }
          ],
          "get": {
            "description": "get store and forward setting.",
            "tags": [
              "mqtt"
            ],
            "responses": {
              "200": {
                "description": "store and forward setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/StoreAndForward"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "update store and forward setting.",
            "tags": [
              "mqtt"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StoreAndForward"
                  },
                  "example": {
                    "enable": true,
                    "targetDiskName": "System",
                    "desiredDiskCacheSizeMB": 8,
                    "timeToLiveSec": 7200,
                    "dropBehavior": "oldest"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "store and forward setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/StoreAndForward"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/mqtt/{id}/messages": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "the `id` in the configuration of mqtt clients.",
              "schema": {
                "type": "integer"
              },
              "required": true
            }
          ],
          "get": {
            "description": "get message groups setting.",
            "tags": [
              "mqtt"
            ],
            "responses": {
              "200": {
                "description": "message groups setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessagePolicyV20"
                      }
                    }
                  }
                }
              }
            }
          },
          "post": {
            "description": "create a message group.",
            "tags": [
              "mqtt"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessagePolicyV20"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "message group setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessagePolicyV20"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/mqtt/{id}/messages/{group_id}": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "the `id` in the configuration of mqtt clients.",
              "schema": {
                "type": "integer"
              },
              "required": true
            },
            {
              "name": "group_id",
              "in": "path",
              "description": "the `id` in the configuration of message groups.",
              "schema": {
                "type": "integer"
              },
              "required": true
            }
          ],
          "get": {
            "description": "get message group setting.",
            "tags": [
              "mqtt"
            ],
            "responses": {
              "200": {
                "description": "message policy setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MessagePolicyV20"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "update message group setting.",
            "tags": [
              "mqtt"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessagePolicyV20"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "message group setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MessagePolicyV20"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "description": "delete message group setting.",
            "tags": [
              "mqtt"
            ],
            "responses": {
              "200": {
                "description": "message groups setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessagePolicyV20"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/mqtt/{id}/messages/test": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "the `id` in the configuration of mqtt clients.",
              "schema": {
                "type": "integer"
              },
              "required": true
            }
          ],
          "put": {
            "description": "test custom payload.",
            "tags": [
              "mqtt"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "format": {
                        "type": "string"
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Tag"
                        }
                      }
                    }
                  },
                  "example": {
                    "format": "{time: (now|todateiso8601), (.srcName): { (.tagName): .dataValue} }",
                    "tags": [
                      {
                        "srcName": "system",
                        "tagName": "cpuUsage",
                        "dataType": "int32",
                        "duration": 1000,
                        "access": "ro"
                      }
                    ]
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "custom payload test results",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "object"
                        },
                        "error": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "data": {
                        "system": {
                          "cpuUsage": 60
                        },
                        "time": "2019-09-27T11:42:34Z"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-device": {
          "get": {
            "description": "Get azure iot device configuration.",
            "tags": [
              "azure_device"
            ],
            "responses": {
              "200": {
                "description": "Azure iot device configuration.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AzureIoTDeviceConfiguration"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "Update provisioning configuration.",
            "tags": [
              "azure_device"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AzureIoTDeviceConfiguration"
                  },
                  "examples": {
                    "symmetricKey mode": {
                      "value": {
                        "provisioning": {
                          "enable": true,
                          "authenticationType": "symmetricKey",
                          "supportTwin": true,
                          "connectionString": "connection-string-test",
                          "keepAlive": 60,
                          "protocol": {
                            "protocol": "mqtt"
                          }
                        }
                      }
                    },
                    "switch to X509 mode (need import certificate)": {
                      "value": {
                        "provisioning": {
                          "enable": true,
                          "authenticationType": "x509",
                          "supportTwin": false,
                          "connectionString": "connection-string-test",
                          "keepAlive": 60,
                          "protocol": {
                            "protocol": "mqtt"
                          },
                          "certificate": {
                            "caPkFile": "device.crt",
                            "caCertFile": "device.key"
                          }
                        }
                      }
                    },
                    "enable/disable device management": {
                      "value": {
                        "provisioning": {
                          "enable": true,
                          "authenticationType": "symmetricKey",
                          "supportTwin": false,
                          "connectionString": "connection-string-test",
                          "keepAlive": 60,
                          "protocol": {
                            "protocol": "mqtt"
                          }
                        }
                      }
                    },
                    "change communication protocol": {
                      "value": {
                        "provisioning": {
                          "enable": true,
                          "authenticationType": "symmetricKey",
                          "supportTwin": true,
                          "connectionString": "connection-string-test",
                          "keepAlive": 60,
                          "protocol": {
                            "protocol": "mqttOverWebsocket"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "azure iot device configuration",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AzureIoTDeviceConfiguration"
                        }
                      }
                    },
                    "example": {
                      "data": {
                        "provisioning": {
                          "authenticationType": "symmetricKey",
                          "connectionString": "connection-string-test",
                          "enable": true,
                          "supportTwin": true,
                          "certificate": {
                            "caPkFile": "",
                            "caCertFile": "",
                            "certificateInfo": {
                              "notAfter": "",
                              "subject": {
                                "cn": ""
                              },
                              "issuer": ""
                            }
                          }
                        },
                        "status": "connected"
                      }
                    }
                  }
                }
              }
            }
          },
          "post": {
            "description": "Setup x509 certificates.",
            "tags": [
              "azure_device"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "multipart/form-data": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "caCertFile": {
                        "description": "device ca certificate",
                        "format": "binary",
                        "type": "string"
                      },
                      "caPkFile": {
                        "description": "device ca private key",
                        "format": "binary",
                        "type": "string"
                      },
                      "rootCaCertFile": {
                        "description": "root ca certificate",
                        "format": "binary",
                        "type": "string"
                      },
                      "connectionString": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1024
                      },
                      "protocol": {
                        "type": "string",
                        "description": "Communication protocol",
                        "enum": [
                          "mqtt",
                          "mqttOverWebsocket",
                          "amqp",
                          "amqpOverWebsocket"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "azure iot device configuration",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AzureIoTDeviceConfiguration"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-device/twin/properties": {
          "get": {
            "description": "get twin properties setting.",
            "tags": [
              "azure_device"
            ],
            "responses": {
              "200": {
                "description": "twin properties setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/DeviceProperties"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "update twin properties setting.",
            "tags": [
              "azure_device"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeviceProperties"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "twin properties setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/DeviceProperties"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-device/twin/reported": {
          "put": {
            "description": "reported twin properties.",
            "tags": [
              "azure_device"
            ],
            "responses": {
              "200": {
                "description": "twin properties setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "data": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-device/twin/clear": {
          "put": {
            "description": "clear twin properties.",
            "tags": [
              "azure_device"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "example": [
                    "general",
                    "ethernets"
                  ]
                }
              }
            },
            "responses": {
              "200": {
                "description": "twin properties setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "data": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-device/store-and-forward": {
          "get": {
            "description": "get store and forward setting.",
            "tags": [
              "azure_device"
            ],
            "responses": {
              "200": {
                "description": "store and forward setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/StoreAndForward"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "update store and forward setting.",
            "tags": [
              "azure_device"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StoreAndForward"
                  },
                  "example": {
                    "enable": true,
                    "targetDiskName": "System",
                    "desiredDiskCacheSizeMB": 8,
                    "timeToLiveSec": 7200,
                    "dropBehavior": "oldest"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "store and forward setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/StoreAndForward"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-device/messages": {
          "get": {
            "description": "get message groups setting.",
            "tags": [
              "azure_device"
            ],
            "responses": {
              "200": {
                "description": "message groups setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessagePolicyV20"
                      }
                    }
                  }
                }
              }
            }
          },
          "post": {
            "description": "create a message group.",
            "tags": [
              "azure_device"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessagePolicyV20"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "message group setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessagePolicyV20"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-device/messages/{id}": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "message group id.",
              "schema": {
                "type": "integer"
              },
              "required": true
            }
          ],
          "get": {
            "description": "get message group setting.",
            "tags": [
              "azure_device"
            ],
            "responses": {
              "200": {
                "description": "message policy setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MessagePolicyV20"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "update message group setting.",
            "tags": [
              "azure_device"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessagePolicyV20"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "message group setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MessagePolicyV20"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "description": "delete message group setting.",
            "tags": [
              "azure_device"
            ],
            "responses": {
              "200": {
                "description": "message groups setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessagePolicyV20"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-device/messages/test": {
          "put": {
            "description": "test custom payload.",
            "tags": [
              "azure_device"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "format": {
                        "type": "string"
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Tag"
                        }
                      }
                    }
                  },
                  "example": {
                    "format": "{ time : (now|todateiso8601), (.srcName) : { (.tagName) : .dataValue}}",
                    "tags": [
                      {
                        "srcName": "system",
                        "tagName": "cpuUsage",
                        "dataType": "int32",
                        "duration": 1000,
                        "dataUnit": "%",
                        "access": "ro"
                      }
                    ]
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "custom payload test results",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "object"
                        },
                        "error": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "data": {
                        "system": {
                          "cpuUsage": 60
                        },
                        "time": "2019-09-27T11:42:34Z"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/aws": {
          "get": {
            "description": "Get AWS iot device configuration.",
            "tags": [
              "aws"
            ],
            "responses": {
              "200": {
                "description": "AWS iot device configuration.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AwsIoTCoreConfiguration"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "Update provisioning configuration.",
            "tags": [
              "aws"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AwsIoTCoreConfiguration"
                  }
                },
                "multipart/form-data": {
                  "schema": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AwsIoTCoreConfiguration"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "rootCaCertFile": {
                            "description": "trusted ca certificate",
                            "format": "binary",
                            "type": "string"
                          },
                          "caCertFile": {
                            "description": "device ca certificate",
                            "format": "binary",
                            "type": "string"
                          },
                          "caPkFile": {
                            "description": "device ca private key",
                            "format": "binary",
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "AWS iot device configuration",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AwsIoTCoreConfiguration"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/aws/shadow/properties": {
          "get": {
            "description": "get twin properties setting.",
            "tags": [
              "aws"
            ],
            "responses": {
              "200": {
                "description": "twin properties setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/DeviceProperties"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "update twin properties setting.",
            "tags": [
              "aws"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeviceProperties"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "twin properties setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/DeviceProperties"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/aws/shadow/reported": {
          "put": {
            "description": "reported twin properties.",
            "tags": [
              "aws"
            ],
            "responses": {
              "200": {
                "description": "twin properties setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "data": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "/aws/shadow/clear": {
          "put": {
            "description": "clear twin properties.",
            "tags": [
              "aws"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "example": [
                    "general",
                    "ethernets"
                  ]
                }
              }
            },
            "responses": {
              "200": {
                "description": "twin properties setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "data": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "/aws/store-and-forward": {
          "get": {
            "description": "get store and forward setting.",
            "tags": [
              "aws"
            ],
            "responses": {
              "200": {
                "description": "store and forward setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/StoreAndForward"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "update store and forward setting.",
            "tags": [
              "aws"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StoreAndForward"
                  },
                  "example": {
                    "enable": true,
                    "targetDiskName": "System",
                    "desiredDiskCacheSizeMB": 8,
                    "timeToLiveSec": 7200,
                    "dropBehavior": "oldest"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "store and forward setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/StoreAndForward"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/aws/messages": {
          "get": {
            "description": "get message groups setting.",
            "tags": [
              "aws"
            ],
            "responses": {
              "200": {
                "description": "message groups setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessagePolicyV20"
                      }
                    }
                  }
                }
              }
            }
          },
          "post": {
            "description": "create a message group.",
            "tags": [
              "aws"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessagePolicyV20"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "message group setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessagePolicyV20"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/aws/messages/{id}": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "message group id.",
              "schema": {
                "type": "integer"
              },
              "required": true
            }
          ],
          "get": {
            "description": "get message group setting.",
            "tags": [
              "aws"
            ],
            "responses": {
              "200": {
                "description": "message policy setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MessagePolicyV20"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "update message group setting.",
            "tags": [
              "aws"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessagePolicyV20"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "message group setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MessagePolicyV20"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "description": "delete message group setting.",
            "tags": [
              "aws"
            ],
            "responses": {
              "200": {
                "description": "message groups setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessagePolicyV20"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/aws/messages/test": {
          "put": {
            "description": "test custom payload.",
            "tags": [
              "aws"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "format": {
                        "type": "string"
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Tag"
                        }
                      }
                    }
                  },
                  "example": {
                    "format": "{ time : (now|todateiso8601), (.srcName) : { (.tagName) : .dataValue}}",
                    "tags": [
                      {
                        "srcName": "system",
                        "tagName": "cpuUsage",
                        "dataType": "int32",
                        "duration": 1000,
                        "dataUnit": "%",
                        "access": "ro"
                      }
                    ]
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "custom payload test results",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "object"
                        },
                        "error": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "data": {
                        "system": {
                          "cpuUsage": 60
                        },
                        "time": "2019-09-27T11:42:34Z"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-iotedge": {
          "get": {
            "description": "Get azure iotedge configuration.",
            "tags": [
              "azure_iotedge"
            ],
            "responses": {
              "200": {
                "description": "Azure iotedge configuration.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AzureIoTEdgeConfiguration"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "patch": {
            "description": "Update azure iotedge configuration.",
            "tags": [
              "azure_iotedge"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AzureIoTEdgeConfiguration"
                  },
                  "examples": {
                    "enable-service": {
                      "value": {
                        "provisioning": {
                          "enable": true
                        }
                      }
                    },
                    "provisioning-manual": {
                      "value": {
                        "provisioning": {
                          "source": "manual",
                          "connectionString": "[YOUR CONNECTION STRING]"
                        }
                      }
                    },
                    "provisioning-dps-tpm": {
                      "value": {
                        "provisioning": {
                          "source": "dps",
                          "method": "tpm",
                          "globalEndpoint": "https://global.azure-devices-provisioning.net",
                          "registrationId": "[registration ID]",
                          "scopeId": "[DEVICE SCOPE ID]"
                        }
                      }
                    },
                    "provisioning-dps-symmetricKey": {
                      "value": {
                        "provisioning": {
                          "source": "dps",
                          "method": "symmetricKey",
                          "globalEndpoint": "https://global.azure-devices-provisioning.net",
                          "registrationId": "[registration ID]",
                          "scopeId": "[DEVICE SCOPE ID]",
                          "symmetricKey": "[symmetric Key]"
                        }
                      }
                    },
                    "provisioning-dps-x509": {
                      "value": {
                        "provisioning": {
                          "source": "dps",
                          "method": "x509",
                          "globalEndpoint": "https://global.azure-devices-provisioning.net",
                          "scopeId": "[SCOPE ID]",
                          "registrationId": "",
                          "identityCert": "[CERT FILE CONTENT]",
                          "identityPk": "[KEY CONTENT]"
                        }
                      }
                    },
                    "downstreamCerts-default": {
                      "value": {
                        "downstreamCerts": {
                          "mode": "default"
                        }
                      }
                    },
                    "downstreamCerts-moxa": {
                      "value": {
                        "downstreamCerts": {
                          "mode": "moxa"
                        }
                      }
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "azure iotedge configuration",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AzureIoTEdgeConfiguration"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-iotedge/reset": {
          "put": {
            "description": "Reset AIE APP(include iotedge runtime pkgs).",
            "tags": [
              "azure_iotedge"
            ],
            "responses": {
              "202": {
                "description": "restart azure iotedge service success",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AzureIoTEdgeConfiguration"
                        }
                      },
                      "example": {
                        "data": {
                          "iotedge": {
                            "status": "resetting"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "reset failed",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "error": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "error": "reset iotedge failed"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-iotedge/restart": {
          "put": {
            "description": "Control azure iotedge service.",
            "tags": [
              "azure_iotedge"
            ],
            "responses": {
              "200": {
                "description": "restart azure iotedge service success",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AzureIoTEdgeConfiguration"
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "restart azure iotedge service failed",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "error": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "error": "restart iotedge failed"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-iotedge/modules/{name}/restart": {
          "put": {
            "description": "Restart azure module.",
            "tags": [
              "azure_iotedge"
            ],
            "parameters": [
              {
                "in": "path",
                "name": "name",
                "required": true,
                "schema": {
                  "type": "string",
                  "enum": [
                    "restart"
                  ]
                },
                "description": "control action."
              }
            ],
            "responses": {
              "200": {
                "description": "Restart azure iotedge modules success",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "data": "edgeAgent enable task is accepted"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Restart azure iotedge service/modules failed",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "error": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "error": "stop module is not allowed"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-iotedge/certificates": {
          "post": {
            "description": "Import user certificates and update azure iotedge configuration.",
            "tags": [
              "azure_iotedge"
            ],
            "requestBody": {
              "description": "The uploaded certificates and configuration.",
              "required": true,
              "content": {
                "multipart/form-data": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "caCertFile": {
                        "description": "device ca certificate",
                        "format": "binary",
                        "type": "string"
                      },
                      "caPkFile": {
                        "description": "device ca private key",
                        "format": "binary",
                        "type": "string"
                      },
                      "trustedCaFile": {
                        "description": "a file containing all the trusted CA",
                        "format": "binary",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "azure iotedge configuration",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AzureIoTEdgeConfiguration"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-iotedge/twin/properties": {
          "get": {
            "description": "get twin properties setting.",
            "tags": [
              "azure_iotedge"
            ],
            "responses": {
              "200": {
                "description": "twin properties setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/DeviceProperties"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "update twin properties setting.",
            "tags": [
              "azure_iotedge"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeviceProperties"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "twin properties setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/DeviceProperties"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-iotedge/twin/reported": {
          "put": {
            "description": "reported twin properties.",
            "tags": [
              "azure_iotedge"
            ],
            "responses": {
              "200": {
                "description": "twin properties setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "data": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-iotedge/twin/clear": {
          "put": {
            "description": "clear twin properties.",
            "tags": [
              "azure_iotedge"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "example": [
                    "general",
                    "ethernets"
                  ]
                }
              }
            },
            "responses": {
              "200": {
                "description": "twin properties setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "data": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-iotedge/messages": {
          "get": {
            "description": "get message groups setting.",
            "tags": [
              "azure_iotedge"
            ],
            "responses": {
              "200": {
                "description": "message groups setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessagePolicyV20"
                      }
                    }
                  }
                }
              }
            }
          },
          "post": {
            "description": "create a message group.",
            "tags": [
              "azure_iotedge"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessagePolicyV20"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "message group setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessagePolicyV20"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-iotedge/messages/{id}": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "message group id.",
              "schema": {
                "type": "integer"
              },
              "required": true
            }
          ],
          "get": {
            "description": "get message group setting.",
            "tags": [
              "azure_iotedge"
            ],
            "responses": {
              "200": {
                "description": "message policy setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MessagePolicyV20"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "update message group setting.",
            "tags": [
              "azure_iotedge"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessagePolicyV20"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "message group setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/MessagePolicyV20"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "description": "delete message group setting.",
            "tags": [
              "azure_iotedge"
            ],
            "responses": {
              "200": {
                "description": "message groups setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessagePolicyV20"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/azure-iotedge/messages/test": {
          "put": {
            "description": "test custom payload.",
            "tags": [
              "azure_iotedge"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "format": {
                        "type": "string"
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Tag"
                        }
                      }
                    }
                  },
                  "example": {
                    "format": "{ time : (now|todateiso8601), (.srcName) : { (.tagName) : .dataValue}}",
                    "tags": [
                      {
                        "srcName": "system",
                        "tagName": "cpuUsage",
                        "dataType": "int32",
                        "duration": 1000,
                        "dataUnit": "%",
                        "access": "ro"
                      }
                    ]
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "custom payload test results",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "object"
                        },
                        "error": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "data": {
                        "system": {
                          "cpuUsage": 60
                        },
                        "time": "2019-09-27T11:42:34Z"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/sparkplug": {
          "get": {
            "parameters": [
              {
                "in": "query",
                "description": "Get runtime status, ex: {\"brokerList\":[{\"id\":1,\"status\":\"connected\"}]}",
                "name": "event",
                "schema": {
                  "type": "boolean"
                }
              }
            ],
            "description": "Get Sparkplug configuration.",
            "tags": [
              "sparkplug"
            ],
            "responses": {
              "200": {
                "description": "Sparkplug configuration.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SparkplugConfiguration"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "Update Sparkplug configuration.(BrokerList is readOnly in this endpoint)",
            "tags": [
              "sparkplug"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SparkplugConfiguration"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Sparkplug configuration",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SparkplugConfiguration"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/sparkplug/configuration": {
          "get": {
            "tags": [
              "sparkplug"
            ],
            "summary": "Download configurations",
            "parameters": [
              {
                "description": "Use password to encryption (default:true)",
                "in": "query",
                "name": "encryption",
                "schema": {
                  "default": true,
                  "type": "boolean"
                }
              },
              {
                "description": "password (default:serial number)",
                "in": "query",
                "name": "password",
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "content": {
                  "application/zip": {
                    "schema": {
                      "format": "binary",
                      "type": "string"
                    }
                  }
                },
                "description": "success"
              }
            }
          },
          "put": {
            "tags": [
              "sparkplug"
            ],
            "summary": "Upload configurations",
            "requestBody": {
              "content": {
                "multipart/form-data": {
                  "schema": {
                    "properties": {
                      "decryption": {
                        "default": true,
                        "description": "Use password to decryption (default:true)",
                        "type": "boolean"
                      },
                      "file": {
                        "description": "configuration file",
                        "format": "binary",
                        "type": "string"
                      },
                      "password": {
                        "description": "password",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "example": {
                      "data": {
                        "fileName": "2019-12-19-13-52-backup.zip",
                        "fileSize": 46272
                      }
                    },
                    "schema": {
                      "properties": {
                        "data": {
                          "properties": {
                            "filename": {
                              "type": "string"
                            },
                            "filesize": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "success"
              },
              "400": {
                "content": {
                  "application/json": {
                    "examples": {
                      "extract1": {
                        "summary": "failed to extract",
                        "value": {
                          "error": {
                            "code": 10001,
                            "message": "extract: zip: not a valid zip file"
                          }
                        }
                      },
                      "extract2": {
                        "summary": "password error",
                        "value": {
                          "error": {
                            "code": 10001,
                            "message": "extract: zip: decryption error"
                          }
                        }
                      },
                      "filesize": {
                        "summary": "file size is over limitation",
                        "value": {
                          "error": {
                            "code": 10000,
                            "message": "file is over size"
                          }
                        }
                      }
                    },
                    "schema": {
                      "properties": {
                        "error": {
                          "properties": {
                            "code": {
                              "type": "integer"
                            },
                            "message": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "error"
              }
            }
          }
        },
        "/sparkplug/brokers": {
          "get": {
            "description": "Get Sparkplug brokers configuration.",
            "tags": [
              "sparkplug"
            ],
            "responses": {
              "200": {
                "description": "Sparkplug brokers configuration.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SparkplugBrokerConfiguration"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "Update Sparkplug brokers configuration.",
            "tags": [
              "sparkplug"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SparkplugBrokerConfiguration"
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Sparkplug configuration",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SparkplugBrokerConfiguration"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "post": {
            "description": "Create a new Sparkplug broker configuration.",
            "tags": [
              "sparkplug"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SparkplugBrokerConfiguration"
                  }
                },
                "multipart/form-data": {
                  "schema": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SparkplugBrokerConfiguration"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "rootCaCertFile": {
                            "description": "trusted ca certificate",
                            "format": "binary",
                            "type": "string"
                          },
                          "caCertFile": {
                            "description": "device ca certificate",
                            "format": "binary",
                            "type": "string"
                          },
                          "caPkFile": {
                            "description": "device ca private key",
                            "format": "binary",
                            "type": "string"
                          }
                        }
                      }
                    ]
                  },
                  "example": {
                    "enable": true,
                    "server": "test.sparkplug.org",
                    "port": 1883,
                    "keepAliveSec": 10,
                    "userName": "admin",
                    "password": "password"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Sparkplug configuration",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SparkplugBrokerConfiguration"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/sparkplug/brokers/{id}": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "broker id.",
              "schema": {
                "type": "integer"
              },
              "required": true
            }
          ],
          "put": {
            "description": "Update Sparkplug broker configuration.",
            "tags": [
              "sparkplug"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SparkplugBrokerConfiguration"
                  }
                },
                "multipart/form-data": {
                  "schema": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SparkplugBrokerConfiguration"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "rootCaCertFile": {
                            "description": "trusted ca certificate",
                            "format": "binary",
                            "type": "string"
                          },
                          "caCertFile": {
                            "description": "device ca certificate",
                            "format": "binary",
                            "type": "string"
                          },
                          "caPkFile": {
                            "description": "device ca private key",
                            "format": "binary",
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Sparkplug configuration",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SparkplugBrokerConfiguration"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "description": "Delete Sparkplug broker configuration.",
            "tags": [
              "sparkplug"
            ],
            "responses": {
              "200": {
                "description": "Sparkplug configuration",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SparkplugBrokerConfiguration"
                          }
                        }
                      }
                    },
                    "example": {
                      "data": []
                    }
                  }
                }
              }
            }
          }
        },
        "/sparkplug/node/properties": {
          "get": {
            "description": "get node properties setting.",
            "tags": [
              "sparkplug"
            ],
            "responses": {
              "200": {
                "description": "node properties setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/DeviceProperties"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "update twin properties setting.",
            "tags": [
              "sparkplug"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeviceProperties"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "twin properties setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/DeviceProperties"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/sparkplug/node/reported": {
          "put": {
            "description": "reported node properties.",
            "tags": [
              "sparkplug"
            ],
            "responses": {
              "200": {
                "description": "node properties setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "data": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "/sparkplug/node/clear": {
          "put": {
            "description": "clear node properties.",
            "tags": [
              "sparkplug"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "example": [
                    "general",
                    "ethernets"
                  ]
                }
              }
            },
            "responses": {
              "200": {
                "description": "node properties setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "data": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "/sparkplug/store-and-forward": {
          "get": {
            "description": "get store and forward setting.",
            "tags": [
              "sparkplug"
            ],
            "responses": {
              "200": {
                "description": "store and forward setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/StoreAndForward"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "update store and forward setting.",
            "tags": [
              "sparkplug"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StoreAndForward"
                  },
                  "example": {
                    "enable": true,
                    "targetDiskName": "System",
                    "desiredDiskCacheSizeMB": 8,
                    "timeToLiveSec": 7200,
                    "dropBehavior": "oldest"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "store and forward setting.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/StoreAndForward"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/sparkplug/messages": {
          "parameters": [
            {
              "in": "query",
              "name": "type",
              "schema": {
                "type": "string",
                "enum": [
                  "node",
                  "device"
                ]
              }
            }
          ],
          "get": {
            "description": "get message groups setting.",
            "tags": [
              "sparkplug"
            ],
            "responses": {
              "200": {
                "description": "message groups setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SparkplugMessagePolicy"
                      }
                    }
                  }
                }
              }
            }
          },
          "post": {
            "description": "create a message group.",
            "tags": [
              "sparkplug"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SparkplugMessagePolicy"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "message group setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SparkplugMessagePolicy"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/sparkplug/messages/{id}": {
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "message group id.",
              "schema": {
                "type": "integer"
              },
              "required": true
            }
          ],
          "get": {
            "description": "get message group setting.",
            "tags": [
              "sparkplug"
            ],
            "responses": {
              "200": {
                "description": "message policy setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SparkplugMessagePolicy"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "put": {
            "description": "update message group setting.",
            "tags": [
              "sparkplug"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SparkplugMessagePolicy"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "message group setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SparkplugMessagePolicy"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "description": "delete message group setting.",
            "tags": [
              "sparkplug"
            ],
            "responses": {
              "200": {
                "description": "message groups setting",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SparkplugMessagePolicy"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "servers": [
        {
          "url": "http://127.0.0.1/api/v1"
        }
      ]
    },
    "plugin-redoc-4": {
      "openapi": "3.0.0",
      "x-tagGroups": [
        {
          "name": "Device Configuration API",
          "tags": [
            "general",
            "time",
            "zoneinfo",
            "dns",
            "route",
            "network",
            "ethernets",
            "serials",
            "cellulars",
            "gps",
            "dhcpservers",
            "wifi",
            "firewall",
            "systemtags",
            "platform"
          ]
        }
      ],
      "info": {
        "version": "2.1.0",
        "title": "Device Configuration APIs",
        "description": "Device Configuration APIs"
      },
      "servers": [
        {
          "url": "https://127.0.0.1/api/v1"
        }
      ],
      "security": [
        {
          "bearerAuth": []
        }
      ],
      "components": {
        "securitySchemes": {
          "bearerAuth": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT"
          }
        }
      },
      "paths": {
        "/device/general": {
          "$ref": "./module.d/general.yaml#/paths/~1device~1general"
        },
        "/device/time": {
          "$ref": "./module.d/time.yaml#/paths/~1device~1time"
        },
        "/device/zoneinfo": {
          "$ref": "./module.d/time.yaml#/paths/~1device~1zoneinfo"
        },
        "/device/dns": {
          "$ref": "./module.d/dns.yaml#/paths/~1device~1dns"
        },
        "/device/route": {
          "$ref": "./module.d/route.yaml#/paths/~1device~1route"
        },
        "/device/network/wan": {
          "$ref": "./module.d/route.yaml#/paths/~1device~1network~1wan"
        },
        "/device/ethernets": {
          "$ref": "./module.d/ethernet.yaml#/paths/~1device~1ethernets"
        },
        "/device/ethernets/{id}": {
          "$ref": "./module.d/ethernet.yaml#/paths/~1device~1ethernets~1{id}"
        },
        "/device/serials": {
          "$ref": "./module.d/serials.yaml#/paths/~1device~1serials"
        },
        "/device/serials/{id}": {
          "$ref": "./module.d/serials.yaml#/paths/~1device~1serials~1{id}"
        },
        "/device/cellulars": {
          "$ref": "./module.d/cellular.yaml#/paths/~1device~1cellulars"
        },
        "/device/cellulars/{id}": {
          "$ref": "./module.d/cellular.yaml#/paths/~1device~1cellulars~1{id}"
        },
        "/device/gps": {
          "$ref": "./module.d/gps.yaml#/paths/~1device~1gps"
        },
        "/device/wifi": {
          "$ref": "./module.d/wifi.yaml#/paths/~1device~1wifi"
        },
        "/device/wifi/{id}": {
          "$ref": "./module.d/wifi.yaml#/paths/~1device~1wifi~1{id}"
        },
        "/device/wifi/{id}/client/networks": {
          "$ref": "./module.d/wifi.yaml#/paths/~1device~1wifi~1{id}~1client~1networks"
        },
        "/device/wifi/{id}/client/networks/{uuid}": {
          "$ref": "./module.d/wifi.yaml#/paths/~1device~1wifi~1{id}~1client~1networks~1{uuid}"
        },
        "/device/wifi/{id}/client/scan": {
          "$ref": "./module.d/wifi.yaml#/paths/~1device~1wifi~1{id}~1client~1scan"
        },
        "/device/dhcpservers": {
          "$ref": "./module.d/dhcpservers.yaml#/paths/~1device~1dhcpservers"
        },
        "/device/dhcpservers/{id}": {
          "$ref": "./module.d/dhcpservers.yaml#/paths/~1device~1dhcpservers~1{id}"
        },
        "/device/firewall/inbounds": {
          "$ref": "./module.d/firewall.yaml#/paths/~1device~1firewall~1inbounds"
        },
        "/tags/monitor/system/status": {
          "$ref": "./module.d/systemtags.yaml#/paths/~1tags~1monitor~1system~1status"
        },
        "/tags/monitor/system/storage": {
          "$ref": "./module.d/systemtags.yaml#/paths/~1tags~1monitor~1system~1storage"
        },
        "/tags/monitor/system/network": {
          "$ref": "./module.d/systemtags.yaml#/paths/~1tags~1monitor~1system~1network"
        },
        "/device/platform/device-tags": {
          "$ref": "./module.d/platform.yaml#/paths/~1device~1platform~1device-tags"
        }
      }
    }
  },
  "docusaurus-theme-classic": {
    "default": null
  },
  "docusaurus-theme-redoc": {
    "default": null
  }
}